services:
  database:
    image: "postgres:alpine3.22"
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: "administrator"
      POSTGRES_PASSWORD: "qixqug-boqjim-3zeqvE"
      POSTGRES_DB: "default"
    volumes:
      - pg-db:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U administrator -d default"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  auth1:
    build:
      context: ./auth
      dockerfile: Dockerfile
    environment:
      NAME: "auth1"
      DB_HOST: database
      DB_PORT: "5432"
      DB_USER: "administrator"
      DB_PASSWORD: "qixqug-boqjim-3zeqvE"
      DB_NAME: "default"
      DB_SSLMODE: "disable"
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/api/v1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth2:
    build:
      context: ./auth
      dockerfile: Dockerfile
    environment:
      NAME: "auth2"
      DB_HOST: database
      DB_PORT: "5432"
      DB_USER: "administrator"
      DB_PASSWORD: "qixqug-boqjim-3zeqvE"
      DB_NAME: "default"
      DB_SSLMODE: "disable"
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/api/v1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      auth1:
        condition: service_healthy
      auth2:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/nginx-health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  pg-db:
