services:
  postgres:
    image: docker.io/postgres:16-alpine
    environment:
      POSTGRES_DB: electric
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    tmpfs:
      - /tmp
    volumes:
      - ./postgres-data:/var/lib/cloud-postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - -c
      - listen_addresses=*
      - -c
      - wal_level=logical
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  electric:
    image: docker.io/electricsql/electric:latest
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/electric?sslmode=disable
      # Not suitable for production. Only use insecure mode in development or if you've otherwise secured the Electric API.
      # See https://electric-sql.com/docs/guides/security
      ELECTRIC_INSECURE: true
    ports:
      - "30000:30000"
    depends_on:
      postgres:
        condition: service_healthy

  auth1:
    build:
      context: ./auth
      dockerfile: Dockerfile
    environment:
      NAME: auth1
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: electric
      DB_HOST: postgres
      DB_SSLMODE: "disable"
      JWT_SECRET: "your-super-secret-jwt-key-change-in-production"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/api/v1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth2:
    build:
      context: ./auth
      dockerfile: Dockerfile
    environment:
      NAME: auth2
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: electric
      DB_HOST: postgres
      DB_SSLMODE: "disable"
      JWT_SECRET: "your-super-secret-jwt-key-change-in-production"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/api/v1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    ports:
      - "5173:5173"
    depends_on:
      - electric
    restart: unless-stopped
  express:
    build:
      context: ./express
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      - postgres
  express2:
    build:
      context: ./express2
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: electric
      JWT_SECRET: "your-super-secret-jwt-key-change-in-production"
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
  express3:
    build:
      context: ./express3
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: electric
      JWT_SECRET: "your-super-secret-jwt-key-change-in-production"
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
  express4:
    build:
      context: ./express4
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: electric
      JWT_SECRET: "your-super-secret-jwt-key-change-in-production"
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      auth1:
        condition: service_healthy
      auth2:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/nginx-health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
