/**
 * @since 1.0.0
 */
import { SocketServer } from "@effect/platform/SocketServer";
import * as RpcServer from "@effect/rpc/RpcServer";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import * as MessageStorage from "./MessageStorage.js";
import * as Runners from "./Runners.js";
import * as ShardManager from "./ShardManager.js";
const withLogAddress = layer => Layer.effectDiscard(Effect.gen(function* () {
  const server = yield* SocketServer;
  const address = server.address._tag === "UnixAddress" ? server.address.path : `${server.address.hostname}:${server.address.port}`;
  yield* Effect.annotateLogs(Effect.logInfo(`Listening on: ${address}`), {
    package: "@effect/cluster",
    service: "ShardManager"
  });
})).pipe(Layer.provideMerge(layer));
/**
 * @since 1.0.0
 * @category Layers
 */
export const layer = /*#__PURE__*/ShardManager.layerServer.pipe(withLogAddress, /*#__PURE__*/Layer.provide(RpcServer.layerProtocolSocketServer), /*#__PURE__*/Layer.provideMerge(ShardManager.layer), /*#__PURE__*/Layer.provide(Runners.layerRpc), /*#__PURE__*/Layer.provide(MessageStorage.layerNoop));
//# sourceMappingURL=SocketShardManager.js.map