/**
 * @since 1.0.0
 */
import * as Hash from "effect/Hash";
import { NodeInspectSymbol } from "effect/Inspectable";
import * as Schema from "effect/Schema";
const SymbolKey = "@effect/cluster/RunnerAddress";
/**
 * @since 1.0.0
 * @category type ids
 */
export const TypeId = /*#__PURE__*/Symbol.for(SymbolKey);
/**
 * @since 1.0.0
 * @category models
 */
export class RunnerAddress extends /*#__PURE__*/Schema.Class(SymbolKey)({
  host: Schema.NonEmptyString,
  port: Schema.Int
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  [Hash.symbol]() {
    return Hash.cached(this)(Hash.string(this.toString()));
  }
  /**
   * @since 1.0.0
   */
  toString() {
    return `RunnerAddress(${this.host}:${this.port})`;
  }
  /**
   * @since 1.0.0
   */
  [NodeInspectSymbol]() {
    return this.toString();
  }
}
/**
 * @since 1.0.0
 * @category constructors
 */
export const make = (host, port) => new RunnerAddress({
  host,
  port
});
//# sourceMappingURL=RunnerAddress.js.map