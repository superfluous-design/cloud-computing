import * as Effect from "effect/Effect";
/** @internal */
export class EntityReaper extends /*#__PURE__*/Effect.Service()("@effect/cluster/EntityReaper", {
  scoped: /*#__PURE__*/Effect.gen(function* () {
    let currentResolution = 30_000;
    const registered = [];
    const latch = yield* Effect.makeLatch();
    const register = options => Effect.suspend(() => {
      currentResolution = Math.max(Math.min(currentResolution, options.maxIdleTime), 5000);
      registered.push(options);
      return latch.open;
    });
    const clock = yield* Effect.clock;
    yield* Effect.gen(function* () {
      while (true) {
        yield* Effect.sleep(currentResolution);
        const now = clock.unsafeCurrentTimeMillis();
        for (const {
          entities,
          maxIdleTime,
          servers
        } of registered) {
          for (const state of servers.values()) {
            const duration = now - state.lastActiveCheck;
            if (state.activeRequests.size > 0 || duration < maxIdleTime) {
              continue;
            }
            yield* Effect.fork(entities.removeIgnore(state.address));
          }
        }
      }
    }).pipe(latch.whenOpen, Effect.interruptible, Effect.forkScoped);
    return {
      register
    };
  })
}) {}
//# sourceMappingURL=entityReaper.js.map