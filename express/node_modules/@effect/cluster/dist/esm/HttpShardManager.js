import * as HttpRouter from "@effect/platform/HttpRouter";
import * as HttpServer from "@effect/platform/HttpServer";
import * as RpcServer from "@effect/rpc/RpcServer";
import * as Effect from "effect/Effect";
import { identity } from "effect/Function";
import * as Layer from "effect/Layer";
import { layerClientProtocolHttp, layerClientProtocolWebsocket } from "./HttpCommon.js";
import * as MessageStorage from "./MessageStorage.js";
import * as RunnerHealth from "./RunnerHealth.js";
import * as Runners from "./Runners.js";
import * as ShardManager from "./ShardManager.js";
/**
 * @since 1.0.0
 * @category Http App
 */
export const toHttpApp = /*#__PURE__*/Effect.gen(function* () {
  const handlers = yield* Layer.build(ShardManager.layerServerHandlers);
  return yield* RpcServer.toHttpApp(ShardManager.Rpcs).pipe(Effect.provide(handlers));
});
/**
 * @since 1.0.0
 * @category Http App
 */
export const toHttpAppWebsocket = /*#__PURE__*/Effect.gen(function* () {
  const handlers = yield* Layer.build(ShardManager.layerServerHandlers);
  return yield* RpcServer.toHttpAppWebsocket(ShardManager.Rpcs).pipe(Effect.provide(handlers));
});
/**
 * A layer for the `ShardManager` service, that does not run a server.
 *
 * It only provides the `Runners` rpc client.
 *
 * You can use this with the `toHttpApp` and `toHttpAppWebsocket` apis
 * to run a complete `ShardManager` server.
 *
 * @since 1.0.0
 * @category Layers
 */
export const layerNoServerHttp = options => ShardManager.layer.pipe(Layer.provide(Runners.layerRpc.pipe(Layer.provide([layerClientProtocolHttp({
  path: options.runnerPath,
  https: options.runnerHttps
}), MessageStorage.layerNoop]))));
/**
 * A layer for the `ShardManager` service, that does not run a server.
 *
 * It only provides the `Runners` rpc client.
 *
 * You can use this with the `toHttpApp` and `toHttpAppWebsocket` apis
 * to run a complete `ShardManager` server.
 *
 * @since 1.0.0
 * @category Layers
 */
export const layerNoServerWebsocket = options => ShardManager.layer.pipe(Layer.provide(Runners.layerRpc.pipe(Layer.provide([layerClientProtocolWebsocket({
  path: options.runnerPath,
  https: options.runnerHttps
}), MessageStorage.layerNoop]))));
/**
 * A HTTP layer for the `ShardManager` server, that adds a route to the provided
 * `HttpRouter.Tag`.
 *
 * By default, it uses the `HttpRouter.Default` tag.
 *
 * @since 1.0.0
 * @category Layers
 */
export const layerHttpOptions = options => {
  const routerTag = options.routerTag ?? HttpRouter.Default;
  return routerTag.serve().pipe(options.logAddress ? withLogAddress : identity, Layer.merge(ShardManager.layerServer), Layer.provide(RpcServer.layerProtocolHttp(options)), Layer.provideMerge(layerNoServerHttp(options)));
};
/**
 * A WebSocket layer for the `ShardManager` server, that adds a route to the provided
 * `HttpRouter.Tag`.
 *
 * By default, it uses the `HttpRouter.Default` tag.
 *
 * @since 1.0.0
 * @category Layers
 */
export const layerWebsocketOptions = options => {
  const routerTag = options.routerTag ?? HttpRouter.Default;
  return routerTag.serve().pipe(options.logAddress ? withLogAddress : identity, Layer.merge(ShardManager.layerServer), Layer.provide(RpcServer.layerProtocolWebsocket(options)), Layer.provideMerge(layerNoServerWebsocket(options)));
};
const withLogAddress = layer => Layer.effectDiscard(HttpServer.addressFormattedWith(address => Effect.annotateLogs(Effect.logInfo(`Listening on: ${address}`), {
  package: "@effect/cluster",
  service: "ShardManager"
}))).pipe(Layer.provideMerge(layer));
/**
 * A HTTP layer for the `ShardManager` server, that adds a route to the provided
 * `HttpRouter.Tag`.
 *
 * By default, it uses the `HttpRouter.Default` tag.
 *
 * @since 1.0.0
 * @category Layers
 */
export const layerHttp = /*#__PURE__*/layerHttpOptions({
  path: "/",
  runnerPath: "/"
});
/**
 * A Websocket layer for the `ShardManager` server, that adds a route to the provided
 * `HttpRouter.Tag`.
 *
 * By default, it uses the `HttpRouter.Default` tag.
 *
 * @since 1.0.0
 * @category Layers
 */
export const layerWebsocket = /*#__PURE__*/layerWebsocketOptions({
  path: "/",
  runnerPath: "/"
});
/**
 * @since 1.0.0
 * @category Layers
 */
export const layerRunnerHealthHttp = /*#__PURE__*/Layer.provide(RunnerHealth.layerRpc, /*#__PURE__*/layerClientProtocolHttp({
  path: "/"
}));
/**
 * @since 1.0.0
 * @category Layers
 */
export const layerRunnerHealthWebsocket = /*#__PURE__*/Layer.provide(RunnerHealth.layerRpc, /*#__PURE__*/layerClientProtocolWebsocket({
  path: "/"
}));
//# sourceMappingURL=HttpShardManager.js.map