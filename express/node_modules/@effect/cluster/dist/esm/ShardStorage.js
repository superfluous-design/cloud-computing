/**
 * @since 1.0.0
 */
import * as Context from "effect/Context";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import * as MutableHashMap from "effect/MutableHashMap";
import * as Option from "effect/Option";
import { Runner } from "./Runner.js";
import { RunnerAddress } from "./RunnerAddress.js";
import { ShardId } from "./ShardId.js";
/**
 * Represents a generic interface to the persistent storage required by the
 * cluster.
 *
 * @since 1.0.0
 * @category models
 */
export class ShardStorage extends /*#__PURE__*/Context.Tag("@effect/cluster/ShardStorage")() {}
/**
 * @since 1.0.0
 * @category layers
 */
export const makeEncoded = /*#__PURE__*/Effect.fnUntraced(function* (encoded) {
  const activeShards = new Set();
  return ShardStorage.of({
    getAssignments: Effect.map(encoded.getAssignments, assignments => {
      const map = new Map();
      for (const [shardId, runnerAddress] of assignments) {
        map.set(ShardId.make(shardId), runnerAddress === null ? Option.none() : Option.some(decodeRunnerAddress(runnerAddress)));
      }
      return map;
    }),
    saveAssignments: assignments => encoded.saveAssignments(Array.from(assignments, ([shardId, runnerAddress]) => [shardId, Option.isNone(runnerAddress) ? null : encodeRunnerAddress(runnerAddress.value)])),
    getRunners: Effect.gen(function* () {
      const runners = yield* encoded.getRunners;
      const results = new Array(runners.length);
      for (let i = 0; i < runners.length; i++) {
        const [address, runner] = runners[i];
        results[i] = [decodeRunnerAddress(address), Runner.decodeSync(runner)];
      }
      return results;
    }),
    saveRunners: runners => Effect.suspend(() => encoded.saveRunners(Array.from(runners, ([address, runner]) => [encodeRunnerAddress(address), Runner.encodeSync(runner)]))),
    acquire: (address, shardIds) => encoded.acquire(encodeRunnerAddress(address), Array.from(shardIds)),
    refresh: (address, shardIds) => encoded.refresh(encodeRunnerAddress(address), Array.from(shardIds)),
    release: Effect.fnUntraced(function* (address, shardId) {
      activeShards.delete(shardId);
      yield* encoded.release(encodeRunnerAddress(address), shardId).pipe(Effect.onError(() => Effect.sync(() => activeShards.add(shardId))));
    }),
    releaseAll: Effect.fnUntraced(function* (address) {
      activeShards.clear();
      yield* encoded.releaseAll(encodeRunnerAddress(address));
    })
  });
});
/**
 * @since 1.0.0
 * @category layers
 */
export const layerNoop = /*#__PURE__*/Layer.sync(ShardStorage, () => {
  let acquired = [];
  return ShardStorage.of({
    getAssignments: Effect.succeed(new Map()),
    saveAssignments: () => Effect.void,
    getRunners: Effect.sync(() => []),
    saveRunners: () => Effect.void,
    acquire: (_address, shards) => {
      acquired = Array.from(shards);
      return Effect.succeed(Array.from(shards));
    },
    refresh: () => Effect.sync(() => acquired),
    release: () => Effect.void,
    releaseAll: () => Effect.void
  });
});
/**
 * @since 1.0.0
 * @category constructors
 */
export const makeMemory = /*#__PURE__*/Effect.gen(function* () {
  const assignments = new Map();
  const runners = MutableHashMap.empty();
  function saveAssignments(value) {
    return Effect.sync(() => {
      for (const [shardId, runnerAddress] of value) {
        assignments.set(shardId, runnerAddress);
      }
    });
  }
  function saveRunners(value) {
    return Effect.sync(() => {
      for (const [address, runner] of value) {
        MutableHashMap.set(runners, address, runner);
      }
    });
  }
  let acquired = [];
  return ShardStorage.of({
    getAssignments: Effect.sync(() => new Map(assignments)),
    saveAssignments,
    getRunners: Effect.sync(() => Array.from(runners)),
    saveRunners,
    acquire: (_address, shardIds) => {
      acquired = Array.from(shardIds);
      return Effect.succeed(Array.from(shardIds));
    },
    refresh: () => Effect.sync(() => acquired),
    release: () => Effect.void,
    releaseAll: () => Effect.void
  });
});
/**
 * @since 1.0.0
 * @category layers
 */
export const layerMemory = /*#__PURE__*/Layer.effect(ShardStorage, makeMemory);
// -------------------------------------------------------------------------------------
// internal
// -------------------------------------------------------------------------------------
const encodeRunnerAddress = runnerAddress => `${runnerAddress.host}:${runnerAddress.port}`;
const decodeRunnerAddress = runnerAddress => {
  const [host, port] = runnerAddress.split(":");
  return new RunnerAddress({
    host,
    port: Number(port)
  });
};
//# sourceMappingURL=ShardStorage.js.map