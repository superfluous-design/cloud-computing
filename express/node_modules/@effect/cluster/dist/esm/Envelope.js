/**
 * @since 1.0.0
 */
import * as Headers from "@effect/platform/Headers";
import * as Predicate from "effect/Predicate";
import * as PrimaryKey from "effect/PrimaryKey";
import * as Schema from "effect/Schema";
import { EntityAddress, EntityAddressFromSelf } from "./EntityAddress.js";
import { SnowflakeFromString } from "./Snowflake.js";
/**
 * @since 1.0.0
 * @category type ids
 */
export const TypeId = /*#__PURE__*/Symbol.for("@effect/cluster/Envelope");
/**
 * @since 1.0.0
 * @category models
 */
export class AckChunk extends /*#__PURE__*/Schema.TaggedClass("@effect/cluster/Envelope/AckChunk")("AckChunk", {
  id: SnowflakeFromString,
  address: EntityAddress,
  requestId: SnowflakeFromString,
  replyId: SnowflakeFromString
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  withRequestId(requestId) {
    return new AckChunk({
      ...this,
      requestId
    });
  }
}
/**
 * @since 1.0.0
 * @category models
 */
export class Interrupt extends /*#__PURE__*/Schema.TaggedClass("@effect/cluster/Envelope/Interrupt")("Interrupt", {
  id: SnowflakeFromString,
  address: EntityAddress,
  requestId: SnowflakeFromString
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  withRequestId(requestId) {
    return new Interrupt({
      ...this,
      requestId
    });
  }
}
/**
 * @since 1.0.0
 * @category refinements
 */
export const isEnvelope = u => Predicate.hasProperty(u, TypeId);
/**
 * @since 1.0.0
 * @category constructors
 */
export const makeRequest = options => ({
  [TypeId]: TypeId,
  _tag: "Request",
  requestId: options.requestId,
  tag: options.tag,
  address: options.address,
  payload: options.payload,
  headers: options.headers,
  traceId: options.traceId,
  spanId: options.spanId,
  sampled: options.sampled
});
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
export const EnvelopeFromSelf = /*#__PURE__*/Schema.declare(isEnvelope, {
  identifier: "Envelope"
});
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
export const RequestFromSelf = /*#__PURE__*/Schema.declare(u => isEnvelope(u) && u._tag === "Request", {
  identifier: "Envelope"
});
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
export const PartialEncodedRequest = /*#__PURE__*/Schema.Struct({
  _tag: /*#__PURE__*/Schema.Literal("Request"),
  requestId: SnowflakeFromString,
  address: EntityAddress,
  tag: Schema.String,
  payload: Schema.Unknown,
  headers: Headers.schema,
  traceId: Schema.String,
  spanId: Schema.String,
  sampled: Schema.Boolean
});
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
export const PartialEncoded = /*#__PURE__*/Schema.Union(PartialEncodedRequest, AckChunk, Interrupt);
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
export const PartialEncodedArray = /*#__PURE__*/Schema.mutable(/*#__PURE__*/Schema.Array(PartialEncoded));
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
export const PartialEncodedRequestFromSelf = /*#__PURE__*/Schema.Struct({
  _tag: /*#__PURE__*/Schema.Literal("Request"),
  requestId: /*#__PURE__*/Schema.typeSchema(SnowflakeFromString),
  address: EntityAddressFromSelf,
  tag: Schema.String,
  payload: Schema.Unknown,
  headers: Headers.schemaFromSelf,
  traceId: Schema.String,
  spanId: Schema.String,
  sampled: Schema.Boolean
});
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
export const PartialEncodedFromSelf = /*#__PURE__*/Schema.Union(PartialEncodedRequestFromSelf, /*#__PURE__*/Schema.typeSchema(AckChunk), /*#__PURE__*/Schema.typeSchema(Interrupt));
/**
 * @since 1.0.0
 * @category primary key
 */
export const primaryKey = envelope => {
  if (envelope._tag !== "Request" || !Predicate.hasProperty(envelope.payload, PrimaryKey.symbol)) {
    return null;
  }
  const value = PrimaryKey.value(envelope.payload);
  // hash the entity address to save space?
  return `${envelope.address.entityType}/${envelope.address.entityId}/${envelope.tag}/${value}`;
};
//# sourceMappingURL=Envelope.js.map