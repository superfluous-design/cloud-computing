"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeId = exports.RunnerUnavailable = exports.RunnerNotRegistered = exports.PersistenceError = exports.MalformedMessage = exports.MailboxFull = exports.EntityNotManagedByRunner = exports.EntityNotAssignedToRunner = exports.AlreadyProcessingMessage = void 0;
var Cause = _interopRequireWildcard(require("effect/Cause"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var _Predicate = require("effect/Predicate");
var Schema = _interopRequireWildcard(require("effect/Schema"));
var _EntityAddress = require("./EntityAddress.js");
var _RunnerAddress = require("./RunnerAddress.js");
var _Snowflake = require("./Snowflake.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category Symbols
 */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for("@effect/cluster/ClusterError");
/**
 * Represents an error that occurs when a Runner receives a message for an entity
 * that it is not assigned to it.
 *
 * @since 1.0.0
 * @category errors
 */
class EntityNotAssignedToRunner extends /*#__PURE__*/Schema.TaggedError()("EntityNotAssignedToRunner", {
  address: _EntityAddress.EntityAddress
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  static is(u) {
    return (0, _Predicate.hasProperty)(u, TypeId) && (0, _Predicate.isTagged)(u, "EntityNotAssignedToRunner");
  }
}
/**
 * Represents an error that occurs when a Runner receives a message for an entity
 * that it is not responsible for managing.
 *
 * @since 1.0.0
 * @category errors
 */
exports.EntityNotAssignedToRunner = EntityNotAssignedToRunner;
class EntityNotManagedByRunner extends /*#__PURE__*/Schema.TaggedError()("EntityNotManagedByRunner", {
  address: _EntityAddress.EntityAddress
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  static is(u) {
    return (0, _Predicate.hasProperty)(u, TypeId) && (0, _Predicate.isTagged)(u, "EntityNotManagedByRunner");
  }
}
/**
 * Represents an error that occurs when a message fails to be properly
 * deserialized by an entity.
 *
 * @since 1.0.0
 * @category errors
 */
exports.EntityNotManagedByRunner = EntityNotManagedByRunner;
class MalformedMessage extends /*#__PURE__*/Schema.TaggedError()("MalformedMessage", {
  cause: Schema.Defect
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  static is(u) {
    return (0, _Predicate.hasProperty)(u, TypeId) && (0, _Predicate.isTagged)(u, "MalformedMessage");
  }
  /**
   * @since 1.0.0
   */
  static refail = /*#__PURE__*/Effect.mapError(cause => new MalformedMessage({
    cause
  }));
}
/**
 * Represents an error that occurs when a message fails to be persisted into
 * cluster's mailbox storage.
 *
 * @since 1.0.0
 * @category errors
 */
exports.MalformedMessage = MalformedMessage;
class PersistenceError extends /*#__PURE__*/Schema.TaggedError()("PersistenceError", {
  cause: Schema.Defect
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  static refail(effect) {
    return Effect.catchAllCause(effect, cause => Effect.fail(new PersistenceError({
      cause: Cause.squash(cause)
    })));
  }
}
/**
 * Represents an error that occurs when a Runner is not registered with the shard
 * manager.
 *
 * @since 1.0.0
 * @category errors
 */
exports.PersistenceError = PersistenceError;
class RunnerNotRegistered extends /*#__PURE__*/Schema.TaggedError()("RunnerNotRegistered", {
  address: _RunnerAddress.RunnerAddress
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
}
/**
 * Represents an error that occurs when a Runner is unresponsive.
 *
 * @since 1.0.0
 * @category errors
 */
exports.RunnerNotRegistered = RunnerNotRegistered;
class RunnerUnavailable extends /*#__PURE__*/Schema.TaggedError()("RunnerUnavailable", {
  address: _RunnerAddress.RunnerAddress
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  static is(u) {
    return (0, _Predicate.hasProperty)(u, TypeId) && (0, _Predicate.isTagged)(u, "RunnerUnavailable");
  }
}
/**
 * Represents an error that occurs when the entities mailbox is full.
 *
 * @since 1.0.0
 * @category errors
 */
exports.RunnerUnavailable = RunnerUnavailable;
class MailboxFull extends /*#__PURE__*/Schema.TaggedError()("MailboxFull", {
  address: _EntityAddress.EntityAddress
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  static is(u) {
    return (0, _Predicate.hasProperty)(u, TypeId) && (0, _Predicate.isTagged)(u, "MailboxFull");
  }
}
/**
 * Represents an error that occurs when the entity is already processing a
 * request.
 *
 * @since 1.0.0
 * @category errors
 */
exports.MailboxFull = MailboxFull;
class AlreadyProcessingMessage extends /*#__PURE__*/Schema.TaggedError()("AlreadyProcessingMessage", {
  envelopeId: _Snowflake.SnowflakeFromString,
  address: _EntityAddress.EntityAddress
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  static is(u) {
    return (0, _Predicate.hasProperty)(u, TypeId) && (0, _Predicate.isTagged)(u, "AlreadyProcessingMessage");
  }
}
exports.AlreadyProcessingMessage = AlreadyProcessingMessage;
//# sourceMappingURL=ClusterError.js.map