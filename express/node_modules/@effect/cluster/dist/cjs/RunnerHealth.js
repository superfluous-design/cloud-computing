"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make = exports.layerRpc = exports.layerNoop = exports.layer = exports.RunnerHealth = void 0;
var Context = _interopRequireWildcard(require("effect/Context"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var MessageStorage = _interopRequireWildcard(require("./MessageStorage.js"));
var Runners = _interopRequireWildcard(require("./Runners.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

/**
 * Represents the service used to check if a Runner is healthy.
 *
 * If a Runner is responsive, shards will not be re-assigned because the Runner may
 * still be processing messages. If a Runner is not responsive, then its
 * associated shards can and will be re-assigned to a different Runner.
 *
 * @since 1.0.0
 * @category models
 */
class RunnerHealth extends /*#__PURE__*/Context.Tag("@effect/cluster/RunnerHealth")() {}
/**
 * A layer which will **always** consider a Runner healthy.
 *
 * This is useful for testing.
 *
 * @since 1.0.0
 * @category layers
 */
exports.RunnerHealth = RunnerHealth;
const layerNoop = exports.layerNoop = /*#__PURE__*/Layer.succeed(RunnerHealth, /*#__PURE__*/RunnerHealth.of({
  isAlive: () => Effect.succeed(true)
}));
/**
 * @since 1.0.0
 * @category Constructors
 */
const make = exports.make = /*#__PURE__*/Effect.gen(function* () {
  const runners = yield* Runners.Runners;
  function isAlive(address) {
    return Effect.isSuccess(Effect.timeout(runners.ping(address), 3000));
  }
  return RunnerHealth.of({
    isAlive
  });
});
/**
 * A layer which will ping a Runner directly to check if it is healthy.
 *
 * @since 1.0.0
 * @category layers
 */
const layer = exports.layer = /*#__PURE__*/Layer.effect(RunnerHealth, make);
/**
 * A layer which will ping a Runner directly to check if it is healthy.
 *
 * @since 1.0.0
 * @category layers
 */
const layerRpc = exports.layerRpc = /*#__PURE__*/layer.pipe(/*#__PURE__*/Layer.provide(Runners.layerRpc), /*#__PURE__*/Layer.provide(MessageStorage.layerNoop));
//# sourceMappingURL=RunnerHealth.js.map