"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make = exports.TypeId = exports.Runner = void 0;
var _Inspectable = require("effect/Inspectable");
var Pretty = _interopRequireWildcard(require("effect/Pretty"));
var Schema = _interopRequireWildcard(require("effect/Schema"));
var _RunnerAddress = require("./RunnerAddress.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

const SymbolKey = "@effect/cluster/Runner";
/**
 * @since 1.0.0
 * @category type ids
 */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for(SymbolKey);
/**
 * A `Runner` represents a physical application server that is capable of running
 * entities.
 *
 * Because a Runner represents a physical application server, a Runner must have a
 * unique `address` which can be used to communicate with the server.
 *
 * The version of a Runner is used during rebalancing to give priority to newer
 * application servers and slowly decommission older ones.
 *
 * @since 1.0.0
 * @category models
 */
class Runner extends /*#__PURE__*/Schema.Class(SymbolKey)({
  address: _RunnerAddress.RunnerAddress,
  version: Schema.Int
}) {
  /**
   * @since 1.0.0
   */
  static pretty = /*#__PURE__*/Pretty.make(this);
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  static decodeSync = /*#__PURE__*/Schema.decodeSync(/*#__PURE__*/Schema.parseJson(Runner));
  /**
   * @since 1.0.0
   */
  static encodeSync = /*#__PURE__*/Schema.encodeSync(/*#__PURE__*/Schema.parseJson(Runner));
  /**
   * @since 1.0.0
   */
  [_Inspectable.NodeInspectSymbol]() {
    return this.toString();
  }
}
/**
 * A `Runner` represents a physical application server that is capable of running
 * entities.
 *
 * Because a Runner represents a physical application server, a Runner must have a
 * unique `address` which can be used to communicate with the server.
 *
 * The version of a Runner is used during rebalancing to give priority to newer
 * application servers and slowly decommission older ones.
 *
 * @since 1.0.0
 * @category Constructors
 */
exports.Runner = Runner;
const make = props => new Runner(props);
exports.make = make;
//# sourceMappingURL=Runner.js.map