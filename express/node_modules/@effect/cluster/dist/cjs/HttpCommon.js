"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layerClientProtocolWebsocket = exports.layerClientProtocolHttp = void 0;
var HttpClient = _interopRequireWildcard(require("@effect/platform/HttpClient"));
var HttpClientRequest = _interopRequireWildcard(require("@effect/platform/HttpClientRequest"));
var Socket = _interopRequireWildcard(require("@effect/platform/Socket"));
var RpcClient = _interopRequireWildcard(require("@effect/rpc/RpcClient"));
var RpcSerialization = _interopRequireWildcard(require("@effect/rpc/RpcSerialization"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var _Runners = require("./Runners.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category Layers
 */
const layerClientProtocolHttp = options => Layer.effect(_Runners.RpcClientProtocol, Effect.gen(function* () {
  const serialization = yield* RpcSerialization.RpcSerialization;
  const client = yield* HttpClient.HttpClient;
  const https = options.https ?? false;
  return address => {
    const clientWithUrl = HttpClient.mapRequest(client, HttpClientRequest.prependUrl(`http${https ? "s" : ""}://${address.host}:${address.port}/${options.path}`));
    return RpcClient.makeProtocolHttp(clientWithUrl).pipe(Effect.provideService(RpcSerialization.RpcSerialization, serialization));
  };
}));
/**
 * @since 1.0.0
 * @category Layers
 */
exports.layerClientProtocolHttp = layerClientProtocolHttp;
const layerClientProtocolWebsocket = options => Layer.effect(_Runners.RpcClientProtocol, Effect.gen(function* () {
  const serialization = yield* RpcSerialization.RpcSerialization;
  const https = options.https ?? false;
  const constructor = yield* Socket.WebSocketConstructor;
  return Effect.fnUntraced(function* (address) {
    const socket = yield* Socket.makeWebSocket(`ws${https ? "s" : ""}://${address.host}:${address.port}/${options.path}`).pipe(Effect.provideService(Socket.WebSocketConstructor, constructor));
    return yield* RpcClient.makeProtocolSocket().pipe(Effect.provideService(Socket.Socket, socket), Effect.provideService(RpcSerialization.RpcSerialization, serialization));
  });
}));
exports.layerClientProtocolWebsocket = layerClientProtocolWebsocket;
//# sourceMappingURL=HttpCommon.js.map