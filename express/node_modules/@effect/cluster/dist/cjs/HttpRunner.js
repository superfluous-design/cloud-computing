"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHttpAppWebsocket = exports.toHttpApp = exports.layerWebsocketOptions = exports.layerWebsocketClientOnly = exports.layerWebsocket = exports.layerHttpClientOnly = exports.layerHttp = exports.layerClient = exports.layer = void 0;
var HttpRouter = _interopRequireWildcard(require("@effect/platform/HttpRouter"));
var HttpServer = _interopRequireWildcard(require("@effect/platform/HttpServer"));
var RpcServer = _interopRequireWildcard(require("@effect/rpc/RpcServer"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var _HttpCommon = require("./HttpCommon.js");
var Runners = _interopRequireWildcard(require("./Runners.js"));
var RunnerServer = _interopRequireWildcard(require("./RunnerServer.js"));
var Sharding = _interopRequireWildcard(require("./Sharding.js"));
var ShardManager = _interopRequireWildcard(require("./ShardManager.js"));
var SynchronizedClock = _interopRequireWildcard(require("./SynchronizedClock.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 * @category Http App
 */
const toHttpApp = exports.toHttpApp = /*#__PURE__*/Effect.gen(function* () {
  const handlers = yield* Layer.build(RunnerServer.layerHandlers);
  return yield* RpcServer.toHttpApp(Runners.Rpcs, {
    spanPrefix: "RunnerServer",
    disableTracing: true
  }).pipe(Effect.provide(handlers));
});
/**
 * @since 1.0.0
 * @category Http App
 */
const toHttpAppWebsocket = exports.toHttpAppWebsocket = /*#__PURE__*/Effect.gen(function* () {
  const handlers = yield* Layer.build(RunnerServer.layerHandlers);
  return yield* RpcServer.toHttpAppWebsocket(Runners.Rpcs, {
    spanPrefix: "RunnerServer",
    disableTracing: true
  }).pipe(Effect.provide(handlers));
});
/**
 * @since 1.0.0
 * @category Layers
 */
const layerClient = exports.layerClient = /*#__PURE__*/Sharding.layer.pipe(/*#__PURE__*/Layer.provideMerge(Runners.layerRpc), /*#__PURE__*/Layer.provideMerge(SynchronizedClock.layer), /*#__PURE__*/Layer.provide(ShardManager.layerClientRpc));
/**
 * A HTTP layer for the `Runners` services, that adds a route to the provided
 * `HttpRouter.Tag`.
 *
 * By default, it uses the `HttpRouter.Default` tag.
 *
 * @since 1.0.0
 * @category Layers
 */
const layer = options => {
  const layer = RunnerServer.layerWithClients.pipe(Layer.provide(RpcServer.layerProtocolHttp(options)));
  return options.logAddress ? withLogAddress(layer) : layer;
};
/**
 * @since 1.0.0
 * @category Layers
 */
exports.layer = layer;
const layerWebsocketOptions = options => {
  const layer = RunnerServer.layerWithClients.pipe(Layer.provide(RpcServer.layerProtocolWebsocket(options)));
  return options.logAddress ? withLogAddress(layer) : layer;
};
exports.layerWebsocketOptions = layerWebsocketOptions;
const withLogAddress = layer => Layer.effectDiscard(HttpServer.addressFormattedWith(address => Effect.annotateLogs(Effect.logInfo(`Listening on: ${address}`), {
  package: "@effect/cluster",
  service: "Runner"
}))).pipe(Layer.provideMerge(layer));
/**
 * @since 1.0.0
 * @category Layers
 */
const layerHttp = exports.layerHttp = /*#__PURE__*/HttpRouter.Default.serve().pipe(/*#__PURE__*/Layer.provideMerge(/*#__PURE__*/layer({
  path: "/",
  logAddress: true
})), /*#__PURE__*/Layer.provide(/*#__PURE__*/(0, _HttpCommon.layerClientProtocolHttp)({
  path: "/"
})));
/**
 * @since 1.0.0
 * @category Layers
 */
const layerHttpClientOnly = exports.layerHttpClientOnly = /*#__PURE__*/RunnerServer.layerClientOnly.pipe(/*#__PURE__*/Layer.provide(/*#__PURE__*/(0, _HttpCommon.layerClientProtocolHttp)({
  path: "/"
})));
/**
 * @since 1.0.0
 * @category Layers
 */
const layerWebsocket = exports.layerWebsocket = /*#__PURE__*/HttpRouter.Default.serve().pipe(/*#__PURE__*/Layer.provideMerge(/*#__PURE__*/layerWebsocketOptions({
  path: "/",
  logAddress: true
})), /*#__PURE__*/Layer.provide(/*#__PURE__*/(0, _HttpCommon.layerClientProtocolWebsocket)({
  path: "/"
})));
/**
 * @since 1.0.0
 * @category Layers
 */
const layerWebsocketClientOnly = exports.layerWebsocketClientOnly = /*#__PURE__*/RunnerServer.layerClientOnly.pipe(/*#__PURE__*/Layer.provide(/*#__PURE__*/(0, _HttpCommon.layerClientProtocolWebsocket)({
  path: "/"
})));
//# sourceMappingURL=HttpRunner.js.map