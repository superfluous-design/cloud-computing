"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layerFromEnv = exports.layerDefaults = exports.layer = exports.defaults = exports.configFromEnv = exports.config = exports.ShardingConfig = void 0;
var Config = _interopRequireWildcard(require("effect/Config"));
var ConfigProvider = _interopRequireWildcard(require("effect/ConfigProvider"));
var Context = _interopRequireWildcard(require("effect/Context"));
var Duration = _interopRequireWildcard(require("effect/Duration"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var Option = _interopRequireWildcard(require("effect/Option"));
var _RunnerAddress = require("./RunnerAddress.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

/**
 * Represents the configuration for the `Sharding` service on a given runner.
 *
 * @since 1.0.0
 * @category models
 */
class ShardingConfig extends /*#__PURE__*/Context.Tag("@effect/cluster/ShardingConfig")() {}
exports.ShardingConfig = ShardingConfig;
const defaultRunnerAddress = /*#__PURE__*/_RunnerAddress.RunnerAddress.make({
  host: "localhost",
  port: 34431
});
/**
 * @since 1.0.0
 * @category defaults
 */
const defaults = exports.defaults = {
  runnerAddress: /*#__PURE__*/Option.some(defaultRunnerAddress),
  serverVersion: 1,
  numberOfShards: 300,
  shardManagerAddress: /*#__PURE__*/_RunnerAddress.RunnerAddress.make({
    host: "localhost",
    port: 8080
  }),
  shardManagerUnavailableTimeout: /*#__PURE__*/Duration.minutes(10),
  entityMailboxCapacity: 4096,
  entityMaxIdleTime: /*#__PURE__*/Duration.minutes(1),
  entityTerminationTimeout: /*#__PURE__*/Duration.seconds(15),
  entityMessagePollInterval: /*#__PURE__*/Duration.seconds(10),
  entityReplyPollInterval: /*#__PURE__*/Duration.millis(200),
  sendRetryInterval: /*#__PURE__*/Duration.millis(100),
  refreshAssignmentsInterval: /*#__PURE__*/Duration.minutes(5),
  simulateRemoteSerialization: true
};
/**
 * @since 1.0.0
 * @category Layers
 */
const layer = options => Layer.succeed(ShardingConfig, {
  ...defaults,
  ...options
});
/**
 * @since 1.0.0
 * @category defaults
 */
exports.layer = layer;
const layerDefaults = exports.layerDefaults = /*#__PURE__*/layer();
/**
 * @since 1.0.0
 * @category Config
 */
const config = exports.config = /*#__PURE__*/Config.all({
  runnerAddress: /*#__PURE__*/Config.all({
    host: Config.string("host").pipe(Config.withDefault(defaultRunnerAddress.host), Config.withDescription("The hostname or IP address of the runner.")),
    port: Config.integer("port").pipe(Config.withDefault(defaultRunnerAddress.port), Config.withDescription("The port used for inter-runner communication."))
  }).pipe(/*#__PURE__*/Config.map(options => _RunnerAddress.RunnerAddress.make(options)), Config.option),
  serverVersion: /*#__PURE__*/Config.integer("serverVersion").pipe(/*#__PURE__*/Config.withDefault(defaults.serverVersion), /*#__PURE__*/Config.withDescription("The version of the current runner.")),
  numberOfShards: /*#__PURE__*/Config.integer("numberOfShards").pipe(/*#__PURE__*/Config.withDefault(defaults.numberOfShards), /*#__PURE__*/Config.withDescription("The number of shards to allocate to a runner.")),
  shardManagerAddress: /*#__PURE__*/Config.all({
    host: Config.string("shardManagerHost").pipe(Config.withDefault(defaults.shardManagerAddress.host), Config.withDescription("The host of the shard manager.")),
    port: Config.integer("shardManagerPort").pipe(Config.withDefault(defaults.shardManagerAddress.port), Config.withDescription("The port of the shard manager."))
  }).pipe(/*#__PURE__*/Config.map(options => _RunnerAddress.RunnerAddress.make(options))),
  shardManagerUnavailableTimeout: /*#__PURE__*/Config.duration("shardManagerUnavailableTimeout").pipe(/*#__PURE__*/Config.withDefault(defaults.shardManagerUnavailableTimeout), /*#__PURE__*/Config.withDescription("If the shard is unavilable for this duration, all the shard assignments will be reset.")),
  entityMailboxCapacity: /*#__PURE__*/Config.integer("entityMailboxCapacity").pipe(/*#__PURE__*/Config.withDefault(defaults.entityMailboxCapacity), /*#__PURE__*/Config.withDescription("The default capacity of the mailbox for entities.")),
  entityMaxIdleTime: /*#__PURE__*/Config.duration("entityMaxIdleTime").pipe(/*#__PURE__*/Config.withDefault(defaults.entityMaxIdleTime), /*#__PURE__*/Config.withDescription("The maximum duration of inactivity (i.e. without receiving a message) after which an entity will be interrupted.")),
  entityTerminationTimeout: /*#__PURE__*/Config.duration("entityTerminationTimeout").pipe(/*#__PURE__*/Config.withDefault(defaults.entityTerminationTimeout), /*#__PURE__*/Config.withDescription("The maximum duration of time to wait for an entity to terminate.")),
  entityMessagePollInterval: /*#__PURE__*/Config.duration("entityMessagePollInterval").pipe(/*#__PURE__*/Config.withDefault(defaults.entityMessagePollInterval), /*#__PURE__*/Config.withDescription("The interval at which to poll for unprocessed messages from storage.")),
  entityReplyPollInterval: /*#__PURE__*/Config.duration("entityReplyPollInterval").pipe(/*#__PURE__*/Config.withDefault(defaults.entityReplyPollInterval), /*#__PURE__*/Config.withDescription("The interval at which to poll for client replies from storage.")),
  sendRetryInterval: /*#__PURE__*/Config.duration("sendRetryInterval").pipe(/*#__PURE__*/Config.withDefault(defaults.sendRetryInterval), /*#__PURE__*/Config.withDescription("The interval to retry a send if EntityNotManagedByRunner is returned.")),
  refreshAssignmentsInterval: /*#__PURE__*/Config.duration("refreshAssignmentsInterval").pipe(/*#__PURE__*/Config.withDefault(defaults.refreshAssignmentsInterval), /*#__PURE__*/Config.withDescription("The interval at which to refresh shard assignments.")),
  simulateRemoteSerialization: /*#__PURE__*/Config.boolean("simulateRemoteSerialization").pipe(/*#__PURE__*/Config.withDefault(defaults.simulateRemoteSerialization), /*#__PURE__*/Config.withDescription("Simulate serialization and deserialization to remote runners for local entities."))
});
/**
 * @since 1.0.0
 * @category Config
 */
const configFromEnv = exports.configFromEnv = /*#__PURE__*/config.pipe(/*#__PURE__*/Effect.withConfigProvider(/*#__PURE__*/ConfigProvider.fromEnv().pipe(ConfigProvider.constantCase)));
/**
 * @since 1.0.0
 * @category Layers
 */
const layerFromEnv = options => Layer.effect(ShardingConfig, options ? Effect.map(configFromEnv, config => ({
  ...config,
  ...options
})) : configFromEnv);
exports.layerFromEnv = layerFromEnv;
//# sourceMappingURL=ShardingConfig.js.map