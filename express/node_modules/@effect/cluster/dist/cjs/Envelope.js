"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.primaryKey = exports.makeRequest = exports.isEnvelope = exports.TypeId = exports.RequestFromSelf = exports.PartialEncodedRequestFromSelf = exports.PartialEncodedRequest = exports.PartialEncodedFromSelf = exports.PartialEncodedArray = exports.PartialEncoded = exports.Interrupt = exports.EnvelopeFromSelf = exports.AckChunk = void 0;
var Headers = _interopRequireWildcard(require("@effect/platform/Headers"));
var Predicate = _interopRequireWildcard(require("effect/Predicate"));
var PrimaryKey = _interopRequireWildcard(require("effect/PrimaryKey"));
var Schema = _interopRequireWildcard(require("effect/Schema"));
var _EntityAddress = require("./EntityAddress.js");
var _Snowflake = require("./Snowflake.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category type ids
 */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for("@effect/cluster/Envelope");
/**
 * @since 1.0.0
 * @category models
 */
class AckChunk extends /*#__PURE__*/Schema.TaggedClass("@effect/cluster/Envelope/AckChunk")("AckChunk", {
  id: _Snowflake.SnowflakeFromString,
  address: _EntityAddress.EntityAddress,
  requestId: _Snowflake.SnowflakeFromString,
  replyId: _Snowflake.SnowflakeFromString
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  withRequestId(requestId) {
    return new AckChunk({
      ...this,
      requestId
    });
  }
}
/**
 * @since 1.0.0
 * @category models
 */
exports.AckChunk = AckChunk;
class Interrupt extends /*#__PURE__*/Schema.TaggedClass("@effect/cluster/Envelope/Interrupt")("Interrupt", {
  id: _Snowflake.SnowflakeFromString,
  address: _EntityAddress.EntityAddress,
  requestId: _Snowflake.SnowflakeFromString
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  withRequestId(requestId) {
    return new Interrupt({
      ...this,
      requestId
    });
  }
}
/**
 * @since 1.0.0
 * @category refinements
 */
exports.Interrupt = Interrupt;
const isEnvelope = u => Predicate.hasProperty(u, TypeId);
/**
 * @since 1.0.0
 * @category constructors
 */
exports.isEnvelope = isEnvelope;
const makeRequest = options => ({
  [TypeId]: TypeId,
  _tag: "Request",
  requestId: options.requestId,
  tag: options.tag,
  address: options.address,
  payload: options.payload,
  headers: options.headers,
  traceId: options.traceId,
  spanId: options.spanId,
  sampled: options.sampled
});
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
exports.makeRequest = makeRequest;
const EnvelopeFromSelf = exports.EnvelopeFromSelf = /*#__PURE__*/Schema.declare(isEnvelope, {
  identifier: "Envelope"
});
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
const RequestFromSelf = exports.RequestFromSelf = /*#__PURE__*/Schema.declare(u => isEnvelope(u) && u._tag === "Request", {
  identifier: "Envelope"
});
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
const PartialEncodedRequest = exports.PartialEncodedRequest = /*#__PURE__*/Schema.Struct({
  _tag: /*#__PURE__*/Schema.Literal("Request"),
  requestId: _Snowflake.SnowflakeFromString,
  address: _EntityAddress.EntityAddress,
  tag: Schema.String,
  payload: Schema.Unknown,
  headers: Headers.schema,
  traceId: Schema.String,
  spanId: Schema.String,
  sampled: Schema.Boolean
});
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
const PartialEncoded = exports.PartialEncoded = /*#__PURE__*/Schema.Union(PartialEncodedRequest, AckChunk, Interrupt);
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
const PartialEncodedArray = exports.PartialEncodedArray = /*#__PURE__*/Schema.mutable(/*#__PURE__*/Schema.Array(PartialEncoded));
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
const PartialEncodedRequestFromSelf = exports.PartialEncodedRequestFromSelf = /*#__PURE__*/Schema.Struct({
  _tag: /*#__PURE__*/Schema.Literal("Request"),
  requestId: /*#__PURE__*/Schema.typeSchema(_Snowflake.SnowflakeFromString),
  address: _EntityAddress.EntityAddressFromSelf,
  tag: Schema.String,
  payload: Schema.Unknown,
  headers: Headers.schemaFromSelf,
  traceId: Schema.String,
  spanId: Schema.String,
  sampled: Schema.Boolean
});
/**
 * @since 1.0.0
 * @category serialization / deserialization
 */
const PartialEncodedFromSelf = exports.PartialEncodedFromSelf = /*#__PURE__*/Schema.Union(PartialEncodedRequestFromSelf, /*#__PURE__*/Schema.typeSchema(AckChunk), /*#__PURE__*/Schema.typeSchema(Interrupt));
/**
 * @since 1.0.0
 * @category primary key
 */
const primaryKey = envelope => {
  if (envelope._tag !== "Request" || !Predicate.hasProperty(envelope.payload, PrimaryKey.symbol)) {
    return null;
  }
  const value = PrimaryKey.value(envelope.payload);
  // hash the entity address to save space?
  return `${envelope.address.entityType}/${envelope.address.entityId}/${envelope.tag}/${value}`;
};
exports.primaryKey = primaryKey;
//# sourceMappingURL=Envelope.js.map