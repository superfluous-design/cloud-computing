"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResourceRef = void 0;
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Exit = _interopRequireWildcard(require("effect/Exit"));
var MutableRef = _interopRequireWildcard(require("effect/MutableRef"));
var Option = _interopRequireWildcard(require("effect/Option"));
var Scope = _interopRequireWildcard(require("effect/Scope"));
var _interruptors = require("./interruptors.js");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
class ResourceRef {
  state;
  acquire;
  static from = /*#__PURE__*/Effect.fnUntraced(function* (parentScope, acquire) {
    const state = MutableRef.make({
      _tag: "Closed"
    });
    yield* Scope.addFinalizerExit(parentScope, exit => {
      const s = MutableRef.get(state);
      if (s._tag === "Closed") {
        return Effect.void;
      }
      const scope = s.scope;
      MutableRef.set(state, {
        _tag: "Closed"
      });
      return Scope.close(scope, exit);
    });
    const scope = yield* Scope.make();
    MutableRef.set(state, {
      _tag: "Acquiring",
      scope
    });
    const value = yield* acquire(scope);
    MutableRef.set(state, {
      _tag: "Acquired",
      scope,
      value
    });
    return new ResourceRef(state, acquire);
  });
  constructor(state, acquire) {
    this.state = state;
    this.acquire = acquire;
  }
  latch = /*#__PURE__*/Effect.unsafeMakeLatch(true);
  unsafeGet() {
    if (this.state.current._tag === "Acquired") {
      return Option.some(this.state.current.value);
    }
    return Option.none();
  }
  unsafeRebuild() {
    const s = this.state.current;
    if (s._tag === "Closed") {
      return Effect.interrupt;
    }
    const prevScope = s.scope;
    const scope = Effect.runSync(Scope.make());
    this.latch.unsafeClose();
    MutableRef.set(this.state, {
      _tag: "Acquiring",
      scope
    });
    return Effect.fiberIdWith(fiberId => {
      _interruptors.internalInterruptors.add(fiberId);
      return Scope.close(prevScope, Exit.void);
    }).pipe(Effect.andThen(this.acquire(scope)), Effect.flatMap(value => {
      MutableRef.set(this.state, {
        _tag: "Acquired",
        scope,
        value
      });
      return this.latch.open;
    }));
  }
  await = /*#__PURE__*/Effect.suspend(() => {
    const s = this.state.current;
    if (s._tag === "Closed") {
      return Effect.interrupt;
    } else if (s._tag === "Acquired") {
      return Effect.succeed(s.value);
    }
    return Effect.zipRight(this.latch.await, this.await);
  });
}
exports.ResourceRef = ResourceRef;
//# sourceMappingURL=resourceRef.js.map