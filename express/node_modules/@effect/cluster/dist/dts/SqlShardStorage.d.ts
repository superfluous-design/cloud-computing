/**
 * @since 1.0.0
 */
import * as SqlClient from "@effect/sql/SqlClient";
import type { SqlError } from "@effect/sql/SqlError";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import { PersistenceError } from "./ClusterError.js";
import * as ShardStorage from "./ShardStorage.js";
/**
 * @since 1.0.0
 * @category Constructors
 */
export declare const make: (this: unknown, options?: {
    readonly prefix?: string | undefined;
} | undefined) => Effect.Effect<{
    readonly getAssignments: Effect.Effect<ReadonlyMap<import("./ShardId.js").ShardId, import("effect/Option").Option<import("./RunnerAddress.js").RunnerAddress>>, PersistenceError>;
    readonly saveAssignments: (assignments: Iterable<readonly [import("./ShardId.js").ShardId, import("effect/Option").Option<import("./RunnerAddress.js").RunnerAddress>]>) => Effect.Effect<void, PersistenceError>;
    readonly getRunners: Effect.Effect<Array<[import("./RunnerAddress.js").RunnerAddress, import("./Runner.js").Runner]>, PersistenceError>;
    readonly saveRunners: (runners: Iterable<readonly [import("./RunnerAddress.js").RunnerAddress, import("./Runner.js").Runner]>) => Effect.Effect<void, PersistenceError>;
    readonly acquire: (address: import("./RunnerAddress.js").RunnerAddress, shardIds: Iterable<import("./ShardId.js").ShardId>) => Effect.Effect<Array<import("./ShardId.js").ShardId>, PersistenceError>;
    readonly refresh: (address: import("./RunnerAddress.js").RunnerAddress, shardIds: Iterable<import("./ShardId.js").ShardId>) => Effect.Effect<Array<import("./ShardId.js").ShardId>, PersistenceError>;
    readonly release: (address: import("./RunnerAddress.js").RunnerAddress, shardId: import("./ShardId.js").ShardId) => Effect.Effect<void, PersistenceError>;
    readonly releaseAll: (address: import("./RunnerAddress.js").RunnerAddress) => Effect.Effect<void, PersistenceError>;
}, SqlError, SqlClient.SqlClient>;
/**
 * @since 1.0.0
 * @category Layers
 */
export declare const layer: Layer.Layer<ShardStorage.ShardStorage, SqlError, SqlClient.SqlClient>;
/**
 * @since 1.0.0
 * @category Layers
 */
export declare const layerWith: (options: {
    readonly prefix?: string | undefined;
}) => Layer.Layer<ShardStorage.ShardStorage, SqlError, SqlClient.SqlClient>;
//# sourceMappingURL=SqlShardStorage.d.ts.map