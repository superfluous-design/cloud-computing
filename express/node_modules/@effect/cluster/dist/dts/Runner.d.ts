/**
 * @since 1.0.0
 */
import { NodeInspectSymbol } from "effect/Inspectable";
import * as Schema from "effect/Schema";
import { RunnerAddress } from "./RunnerAddress.js";
/**
 * @since 1.0.0
 * @category type ids
 */
export declare const TypeId: unique symbol;
/**
 * @since 1.0.0
 * @category type ids
 */
export type TypeId = typeof TypeId;
declare const Runner_base: Schema.Class<Runner, {
    address: typeof RunnerAddress;
    version: typeof Schema.Int;
}, Schema.Struct.Encoded<{
    address: typeof RunnerAddress;
    version: typeof Schema.Int;
}>, never, {
    readonly address: RunnerAddress;
} & {
    readonly version: number;
}, {}, {}>;
/**
 * A `Runner` represents a physical application server that is capable of running
 * entities.
 *
 * Because a Runner represents a physical application server, a Runner must have a
 * unique `address` which can be used to communicate with the server.
 *
 * The version of a Runner is used during rebalancing to give priority to newer
 * application servers and slowly decommission older ones.
 *
 * @since 1.0.0
 * @category models
 */
export declare class Runner extends Runner_base {
    /**
     * @since 1.0.0
     */
    static pretty: (a: Runner) => string;
    /**
     * @since 1.0.0
     */
    readonly [TypeId]: symbol;
    /**
     * @since 1.0.0
     */
    static readonly decodeSync: (i: string, overrideOptions?: import("effect/SchemaAST").ParseOptions) => Runner;
    /**
     * @since 1.0.0
     */
    static readonly encodeSync: (a: Runner, overrideOptions?: import("effect/SchemaAST").ParseOptions) => string;
    /**
     * @since 1.0.0
     */
    [NodeInspectSymbol](): string;
}
/**
 * A `Runner` represents a physical application server that is capable of running
 * entities.
 *
 * Because a Runner represents a physical application server, a Runner must have a
 * unique `address` which can be used to communicate with the server.
 *
 * The version of a Runner is used during rebalancing to give priority to newer
 * application servers and slowly decommission older ones.
 *
 * @since 1.0.0
 * @category Constructors
 */
export declare const make: (props: {
    readonly address: RunnerAddress;
    readonly version: number;
}) => Runner;
export {};
//# sourceMappingURL=Runner.d.ts.map