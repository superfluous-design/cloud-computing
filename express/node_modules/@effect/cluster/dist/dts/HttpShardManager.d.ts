/**
 * @since 1.0.0
 */
import type * as HttpApp from "@effect/platform/HttpApp";
import type * as HttpClient from "@effect/platform/HttpClient";
import * as HttpRouter from "@effect/platform/HttpRouter";
import * as HttpServer from "@effect/platform/HttpServer";
import type * as Socket from "@effect/platform/Socket";
import type * as RpcSerialization from "@effect/rpc/RpcSerialization";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import type { Scope } from "effect/Scope";
import * as RunnerHealth from "./RunnerHealth.js";
import type { ShardingConfig } from "./ShardingConfig.js";
import * as ShardManager from "./ShardManager.js";
import type { ShardStorage } from "./ShardStorage.js";
/**
 * @since 1.0.0
 * @category Http App
 */
export declare const toHttpApp: Effect.Effect<HttpApp.Default<never, Scope>, never, Scope | RpcSerialization.RpcSerialization | ShardManager.ShardManager>;
/**
 * @since 1.0.0
 * @category Http App
 */
export declare const toHttpAppWebsocket: Effect.Effect<HttpApp.Default<never, Scope>, never, Scope | RpcSerialization.RpcSerialization | ShardManager.ShardManager>;
/**
 * A layer for the `ShardManager` service, that does not run a server.
 *
 * It only provides the `Runners` rpc client.
 *
 * You can use this with the `toHttpApp` and `toHttpAppWebsocket` apis
 * to run a complete `ShardManager` server.
 *
 * @since 1.0.0
 * @category Layers
 */
export declare const layerNoServerHttp: (options: {
    readonly runnerPath: string;
    readonly runnerHttps?: boolean | undefined;
}) => Layer.Layer<ShardManager.ShardManager, never, RpcSerialization.RpcSerialization | ShardStorage | RunnerHealth.RunnerHealth | HttpClient.HttpClient | ShardManager.Config | ShardingConfig>;
/**
 * A layer for the `ShardManager` service, that does not run a server.
 *
 * It only provides the `Runners` rpc client.
 *
 * You can use this with the `toHttpApp` and `toHttpAppWebsocket` apis
 * to run a complete `ShardManager` server.
 *
 * @since 1.0.0
 * @category Layers
 */
export declare const layerNoServerWebsocket: (options: {
    readonly runnerPath: string;
    readonly runnerHttps?: boolean | undefined;
}) => Layer.Layer<ShardManager.ShardManager, never, RpcSerialization.RpcSerialization | ShardStorage | RunnerHealth.RunnerHealth | Socket.WebSocketConstructor | ShardManager.Config | ShardingConfig>;
/**
 * A HTTP layer for the `ShardManager` server, that adds a route to the provided
 * `HttpRouter.Tag`.
 *
 * By default, it uses the `HttpRouter.Default` tag.
 *
 * @since 1.0.0
 * @category Layers
 */
export declare const layerHttpOptions: <I = HttpRouter.Default>(options: {
    readonly path: HttpRouter.PathInput;
    readonly routerTag?: HttpRouter.HttpRouter.TagClass<I, string, any, any>;
    readonly runnerPath: string;
    readonly runnerHttps?: boolean | undefined;
    readonly logAddress?: boolean | undefined;
}) => Layer.Layer<ShardManager.ShardManager, never, RpcSerialization.RpcSerialization | ShardStorage | RunnerHealth.RunnerHealth | HttpClient.HttpClient | HttpServer.HttpServer | ShardManager.Config | ShardingConfig>;
/**
 * A WebSocket layer for the `ShardManager` server, that adds a route to the provided
 * `HttpRouter.Tag`.
 *
 * By default, it uses the `HttpRouter.Default` tag.
 *
 * @since 1.0.0
 * @category Layers
 */
export declare const layerWebsocketOptions: <I = HttpRouter.Default>(options: {
    readonly path: HttpRouter.PathInput;
    readonly routerTag?: HttpRouter.HttpRouter.TagClass<I, string, any, any>;
    readonly runnerPath: string;
    readonly runnerHttps?: boolean | undefined;
    readonly logAddress?: boolean | undefined;
}) => Layer.Layer<ShardManager.ShardManager, never, RpcSerialization.RpcSerialization | ShardStorage | RunnerHealth.RunnerHealth | HttpServer.HttpServer | Socket.WebSocketConstructor | ShardManager.Config | ShardingConfig>;
/**
 * A HTTP layer for the `ShardManager` server, that adds a route to the provided
 * `HttpRouter.Tag`.
 *
 * By default, it uses the `HttpRouter.Default` tag.
 *
 * @since 1.0.0
 * @category Layers
 */
export declare const layerHttp: Layer.Layer<ShardManager.ShardManager, never, RpcSerialization.RpcSerialization | ShardStorage | RunnerHealth.RunnerHealth | HttpClient.HttpClient | HttpServer.HttpServer | ShardManager.Config | ShardingConfig>;
/**
 * A Websocket layer for the `ShardManager` server, that adds a route to the provided
 * `HttpRouter.Tag`.
 *
 * By default, it uses the `HttpRouter.Default` tag.
 *
 * @since 1.0.0
 * @category Layers
 */
export declare const layerWebsocket: Layer.Layer<ShardManager.ShardManager, never, RpcSerialization.RpcSerialization | ShardStorage | RunnerHealth.RunnerHealth | Socket.WebSocketConstructor | HttpServer.HttpServer | ShardManager.Config | ShardingConfig>;
/**
 * @since 1.0.0
 * @category Layers
 */
export declare const layerRunnerHealthHttp: Layer.Layer<RunnerHealth.RunnerHealth, never, RpcSerialization.RpcSerialization | HttpClient.HttpClient | ShardingConfig>;
/**
 * @since 1.0.0
 * @category Layers
 */
export declare const layerRunnerHealthWebsocket: Layer.Layer<RunnerHealth.RunnerHealth, never, RpcSerialization.RpcSerialization | Socket.WebSocketConstructor | ShardingConfig>;
//# sourceMappingURL=HttpShardManager.d.ts.map