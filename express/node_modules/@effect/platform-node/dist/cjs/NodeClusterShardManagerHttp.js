"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layerHttpServer = exports.layer = void 0;
var HttpShardManager = _interopRequireWildcard(require("@effect/cluster/HttpShardManager"));
var ShardingConfig = _interopRequireWildcard(require("@effect/cluster/ShardingConfig"));
var ShardManager = _interopRequireWildcard(require("@effect/cluster/ShardManager"));
var ShardStorage = _interopRequireWildcard(require("@effect/cluster/ShardStorage"));
var SqlShardStorage = _interopRequireWildcard(require("@effect/cluster/SqlShardStorage"));
var RpcSerialization = _interopRequireWildcard(require("@effect/rpc/RpcSerialization"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var _nodeHttp = require("node:http");
var NodeHttpClient = _interopRequireWildcard(require("./NodeHttpClient.js"));
var NodeHttpServer = _interopRequireWildcard(require("./NodeHttpServer.js"));
var NodeSocket = _interopRequireWildcard(require("./NodeSocket.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category Layers
 */
const layerHttpServer = exports.layerHttpServer = /*#__PURE__*/Effect.gen(function* () {
  const config = yield* ShardingConfig.ShardingConfig;
  return NodeHttpServer.layer(_nodeHttp.createServer, config.shardManagerAddress);
}).pipe(Layer.unwrapEffect);
/**
 * @since 1.0.0
 * @category Layers
 */
const layer = options => {
  const layer = options.protocol === "http" ? HttpShardManager.layerHttp.pipe(Layer.provide([HttpShardManager.layerRunnerHealthHttp, layerHttpServer]), Layer.provide(NodeHttpClient.layerUndici)) : HttpShardManager.layerWebsocket.pipe(Layer.provide([HttpShardManager.layerRunnerHealthWebsocket, layerHttpServer]), Layer.provide(NodeSocket.layerWebSocketConstructor));
  return layer.pipe(Layer.provide(options?.storage === "sql" ? SqlShardStorage.layer : ShardStorage.layerNoop), Layer.provide([ShardingConfig.layerFromEnv(options.shardingConfig), ShardManager.layerConfigFromEnv, options?.serialization === "ndjson" ? RpcSerialization.layerNdjson : RpcSerialization.layerMsgPack]));
};
exports.layer = layer;
//# sourceMappingURL=NodeClusterShardManagerHttp.js.map