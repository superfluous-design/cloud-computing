/**
 * @since 1.0.0
 */
import * as HttpRunner from "@effect/cluster/HttpRunner";
import * as MessageStorage from "@effect/cluster/MessageStorage";
import * as ShardingConfig from "@effect/cluster/ShardingConfig";
import * as ShardStorage from "@effect/cluster/ShardStorage";
import * as SqlMessageStorage from "@effect/cluster/SqlMessageStorage";
import * as SqlShardStorage from "@effect/cluster/SqlShardStorage";
import * as RpcSerialization from "@effect/rpc/RpcSerialization";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import * as Option from "effect/Option";
import { createServer } from "node:http";
import * as NodeHttpClient from "./NodeHttpClient.js";
import * as NodeHttpServer from "./NodeHttpServer.js";
import * as NodeSocket from "./NodeSocket.js";
/**
 * @since 1.0.0
 * @category Layers
 */
export const layer = options => {
  const layer = options.clientOnly
  // client only
  ? options.transport === "http" ? Layer.provide(HttpRunner.layerHttpClientOnly, NodeHttpClient.layerUndici) : Layer.provide(HttpRunner.layerWebsocketClientOnly, NodeSocket.layerWebSocketConstructor)
  // with server
  : options.transport === "http" ? Layer.provide(HttpRunner.layerHttp, [layerHttpServer, NodeHttpClient.layerUndici]) : Layer.provide(HttpRunner.layerWebsocket, [layerHttpServer, NodeSocket.layerWebSocketConstructor]);
  return layer.pipe(Layer.provide(options?.storage === "sql" ? options.clientOnly ? [SqlMessageStorage.layer] : [SqlMessageStorage.layer, SqlShardStorage.layer] : [MessageStorage.layerNoop, ShardStorage.layerNoop]), Layer.provide(ShardingConfig.layerFromEnv(options?.shardingConfig)), Layer.provide(options?.serialization === "ndjson" ? RpcSerialization.layerNdjson : RpcSerialization.layerMsgPack));
};
/**
 * @since 1.0.0
 * @category Layers
 */
export const layerHttpServer = /*#__PURE__*/Effect.gen(function* () {
  const config = yield* ShardingConfig.ShardingConfig;
  if (Option.isNone(config.runnerAddress)) {
    return yield* Effect.dieMessage("NodeClusterHttpRunner.layerHttpServer: ShardingConfig.podAddress is None");
  }
  return NodeHttpServer.layer(createServer, config.runnerAddress.value);
}).pipe(Layer.unwrapEffect);
//# sourceMappingURL=NodeClusterRunnerHttp.js.map