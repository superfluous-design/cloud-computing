import * as Context from "effect/Context";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
/**
 * @since 1.0.0
 * @category type ids
 */
export declare const TypeId: unique symbol;
/**
 * @since 1.0.0
 * @category type ids
 */
export type TypeId = typeof TypeId;
/**
 * @since 1.0.0
 * @category interface
 */
export interface Clipboard {
    readonly [TypeId]: TypeId;
    readonly read: Effect.Effect<ClipboardItems, ClipboardError>;
    readonly readString: Effect.Effect<string, ClipboardError>;
    readonly write: (items: ClipboardItems) => Effect.Effect<void, ClipboardError>;
    readonly writeString: (text: string) => Effect.Effect<void, ClipboardError>;
    readonly writeBlob: (blob: Blob) => Effect.Effect<void, ClipboardError>;
    readonly clear: Effect.Effect<void, ClipboardError>;
}
/**
 * @since 1.0.0
 * @category type ids
 */
export declare const ErrorTypeId: unique symbol;
/**
 * @since 1.0.0
 * @category type ids
 */
export type ErrorTypeId = typeof ErrorTypeId;
declare const ClipboardError_base: new <A extends Record<string, any>>(args: import("effect/Types").Simplify<A>) => import("effect/Cause").YieldableError & Record<typeof ErrorTypeId, typeof ErrorTypeId> & {
    readonly _tag: "ClipboardError";
} & Readonly<A>;
/**
 * @since 1.0.0
 * @category errors
 */
export declare class ClipboardError extends ClipboardError_base<{
    readonly message: string;
    readonly cause: unknown;
}> {
}
/**
 * @since 1.0.0
 * @category tag
 */
export declare const Clipboard: Context.Tag<Clipboard, Clipboard>;
/**
 * @since 1.0.0
 * @category constructor
 */
export declare const make: (impl: Omit<Clipboard, "clear" | "writeBlob" | TypeId>) => Clipboard;
/**
 * A layer that directly interfaces with the navigator.clipboard api
 *
 * @since 1.0.0
 * @category layers
 */
export declare const layer: Layer.Layer<Clipboard>;
export {};
//# sourceMappingURL=Clipboard.d.ts.map