"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layerWorker = exports.layerPlatform = exports.layerManager = exports.layer = void 0;
var Worker = _interopRequireWildcard(require("@effect/platform/Worker"));
var _WorkerError = require("@effect/platform/WorkerError");
var Deferred = _interopRequireWildcard(require("effect/Deferred"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var Scope = _interopRequireWildcard(require("effect/Scope"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const platformWorkerImpl = /*#__PURE__*/Worker.makePlatform()({
  setup({
    scope,
    worker
  }) {
    const port = "port" in worker ? worker.port : worker;
    return Effect.as(Scope.addFinalizer(scope, Effect.sync(() => {
      port.postMessage([1]);
    })), port);
  },
  listen({
    deferred,
    emit,
    port,
    scope
  }) {
    function onMessage(event) {
      emit(event.data);
    }
    function onError(event) {
      Deferred.unsafeDone(deferred, new _WorkerError.WorkerError({
        reason: "unknown",
        cause: event.error ?? event.message
      }));
    }
    port.addEventListener("message", onMessage);
    port.addEventListener("error", onError);
    if ("start" in port) {
      port.start();
    }
    return Scope.addFinalizer(scope, Effect.sync(() => {
      port.removeEventListener("message", onMessage);
      port.removeEventListener("error", onError);
    }));
  }
});
/** @internal */
const layerWorker = exports.layerWorker = /*#__PURE__*/Layer.succeed(Worker.PlatformWorker, platformWorkerImpl);
/** @internal */
const layerManager = exports.layerManager = /*#__PURE__*/Layer.provide(Worker.layerManager, layerWorker);
/** @internal */
const layer = spawn => Layer.merge(layerManager, Worker.layerSpawner(spawn));
/** @internal */
exports.layer = layer;
const layerPlatform = spawn => Layer.merge(layerWorker, Worker.layerSpawner(spawn));
exports.layerPlatform = layerPlatform;
//# sourceMappingURL=worker.js.map