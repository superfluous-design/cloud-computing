import * as Worker from "@effect/platform/Worker";
import { WorkerError } from "@effect/platform/WorkerError";
import * as Deferred from "effect/Deferred";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import * as Scope from "effect/Scope";
const platformWorkerImpl = /*#__PURE__*/Worker.makePlatform()({
  setup({
    scope,
    worker
  }) {
    const port = "port" in worker ? worker.port : worker;
    return Effect.as(Scope.addFinalizer(scope, Effect.sync(() => {
      port.postMessage([1]);
    })), port);
  },
  listen({
    deferred,
    emit,
    port,
    scope
  }) {
    function onMessage(event) {
      emit(event.data);
    }
    function onError(event) {
      Deferred.unsafeDone(deferred, new WorkerError({
        reason: "unknown",
        cause: event.error ?? event.message
      }));
    }
    port.addEventListener("message", onMessage);
    port.addEventListener("error", onError);
    if ("start" in port) {
      port.start();
    }
    return Scope.addFinalizer(scope, Effect.sync(() => {
      port.removeEventListener("message", onMessage);
      port.removeEventListener("error", onError);
    }));
  }
});
/** @internal */
export const layerWorker = /*#__PURE__*/Layer.succeed(Worker.PlatformWorker, platformWorkerImpl);
/** @internal */
export const layerManager = /*#__PURE__*/Layer.provide(Worker.layerManager, layerWorker);
/** @internal */
export const layer = spawn => Layer.merge(layerManager, Worker.layerSpawner(spawn));
/** @internal */
export const layerPlatform = spawn => Layer.merge(layerWorker, Worker.layerSpawner(spawn));
//# sourceMappingURL=worker.js.map