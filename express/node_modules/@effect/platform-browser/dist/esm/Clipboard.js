/**
 * @since 1.0.0
 */
import { TypeIdError } from "@effect/platform/Error";
import * as Context from "effect/Context";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
/**
 * @since 1.0.0
 * @category type ids
 */
export const TypeId = /*#__PURE__*/Symbol.for("@effect/platform-browser/Clipboard");
/**
 * @since 1.0.0
 * @category type ids
 */
export const ErrorTypeId = /*#__PURE__*/Symbol.for("@effect/platform-browser/Clipboard/ClipboardError");
/**
 * @since 1.0.0
 * @category errors
 */
export class ClipboardError extends /*#__PURE__*/TypeIdError(ErrorTypeId, "ClipboardError") {}
/**
 * @since 1.0.0
 * @category tag
 */
export const Clipboard = /*#__PURE__*/Context.GenericTag("@effect/platform-browser/Clipboard");
/**
 * @since 1.0.0
 * @category constructor
 */
export const make = impl => Clipboard.of({
  ...impl,
  [TypeId]: TypeId,
  clear: impl.writeString(""),
  writeBlob: blob => impl.write([new ClipboardItem({
    [blob.type]: blob
  })])
});
/**
 * A layer that directly interfaces with the navigator.clipboard api
 *
 * @since 1.0.0
 * @category layers
 */
export const layer = /*#__PURE__*/Layer.succeed(Clipboard, /*#__PURE__*/make({
  read: /*#__PURE__*/Effect.tryPromise({
    try: () => navigator.clipboard.read(),
    catch: cause => new ClipboardError({
      cause,
      "message": "Unable to read from clipboard"
    })
  }),
  write: s => Effect.tryPromise({
    try: () => navigator.clipboard.write(s),
    catch: cause => new ClipboardError({
      cause,
      "message": "Unable to write to clipboard"
    })
  }),
  readString: /*#__PURE__*/Effect.tryPromise({
    try: () => navigator.clipboard.readText(),
    catch: cause => new ClipboardError({
      cause,
      "message": "Unable to read a string from clipboard"
    })
  }),
  writeString: text => Effect.tryPromise({
    try: () => navigator.clipboard.writeText(text),
    catch: cause => new ClipboardError({
      cause,
      "message": "Unable to write a string to clipboard"
    })
  })
}));
//# sourceMappingURL=Clipboard.js.map