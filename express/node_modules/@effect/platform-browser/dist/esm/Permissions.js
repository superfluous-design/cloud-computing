/**
 * @since 1.0.0
 */
import { TypeIdError } from "@effect/platform/Error";
import * as Context from "effect/Context";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
/**
 * @since 1.0.0
 * @category type ids
 */
export const TypeId = /*#__PURE__*/Symbol.for("@effect/platform-browser/Permissions");
/**
 * @since 1.0.0
 * @category type ids
 */
export const ErrorTypeId = /*#__PURE__*/Symbol.for("@effect/platform-browser/Permissions/PermissionsError");
/**
 * @since 1.0.0
 * @category errors
 */
export class PermissionsError extends /*#__PURE__*/TypeIdError(ErrorTypeId, "PermissionsError") {
  get message() {
    return this.reason;
  }
}
/**
 * @since 1.0.0
 * @category tags
 */
export const Permissions = /*#__PURE__*/Context.GenericTag("@effect/platform-browser/Permissions");
/**
 * A layer that directly interfaces with the `navigator.permissions` api
 *
 * @since 1.0.0
 * @category layers
 */
export const layer = /*#__PURE__*/Layer.succeed(Permissions, /*#__PURE__*/Permissions.of({
  [TypeId]: TypeId,
  query: name => Effect.tryPromise({
    try: () => navigator.permissions.query({
      name
    }),
    catch: cause => new PermissionsError({
      reason: cause instanceof DOMException ? "InvalidStateError" : "TypeError",
      cause
    })
  })
}));
//# sourceMappingURL=Permissions.js.map