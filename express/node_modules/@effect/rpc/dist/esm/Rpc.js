import * as Context_ from "effect/Context";
import { globalValue } from "effect/GlobalValue";
import * as Option from "effect/Option";
import { pipeArguments } from "effect/Pipeable";
import * as Predicate from "effect/Predicate";
import * as Schema from "effect/Schema";
import * as RpcSchema from "./RpcSchema.js";
/**
 * @since 1.0.0
 * @category type ids
 */
export const TypeId = /*#__PURE__*/Symbol.for("@effect/rpc/Rpc");
/**
 * @since 1.0.0
 * @category guards
 */
export const isRpc = u => Predicate.hasProperty(u, TypeId);
const Proto = {
  [TypeId]: TypeId,
  pipe() {
    return pipeArguments(this, arguments);
  },
  setSuccess(successSchema) {
    return makeProto({
      ...this,
      successSchema
    });
  },
  setError(errorSchema) {
    return makeProto({
      ...this,
      errorSchema
    });
  },
  setPayload(payloadSchema) {
    return makeProto({
      ...this,
      payloadSchema: Schema.isSchema(payloadSchema) ? payloadSchema : Schema.Struct(payloadSchema)
    });
  },
  middleware(middleware) {
    return makeProto({
      ...this,
      middlewares: new Set([...this.middlewares, middleware])
    });
  },
  annotate(tag, value) {
    return makeProto({
      ...this,
      annotations: Context_.add(this.annotations, tag, value)
    });
  },
  annotateContext(context) {
    return makeProto({
      ...this,
      annotations: Context_.merge(this.annotations, context)
    });
  }
};
const makeProto = options => {
  const self = Object.assign(Object.create(Proto), options);
  self.key = `@effect/rpc/Rpc/${options._tag}`;
  return self;
};
const constEmptyStruct = /*#__PURE__*/Schema.Struct({});
/**
 * @since 1.0.0
 * @category constructors
 */
export const make = (tag, options) => {
  const successSchema = options?.success ?? Schema.Void;
  const errorSchema = options?.error ?? Schema.Never;
  return makeProto({
    _tag: tag,
    payloadSchema: Schema.isSchema(options?.payload) ? options?.payload : options?.payload ? Schema.Struct(options?.payload) : constEmptyStruct,
    successSchema: options?.stream ? RpcSchema.Stream({
      success: successSchema,
      failure: errorSchema
    }) : successSchema,
    errorSchema: options?.stream ? Schema.Never : errorSchema,
    annotations: Context_.empty(),
    middlewares: new Set()
  });
};
/**
 * @since 1.0.0
 * @category constructors
 */
export const fromTaggedRequest = schema => makeProto({
  _tag: schema._tag,
  payloadSchema: schema,
  successSchema: schema.success,
  errorSchema: schema.failure,
  annotations: Context_.empty(),
  middlewares: new Set()
});
const exitSchemaCache = /*#__PURE__*/globalValue("@effect/rpc/Rpc/exitSchemaCache", () => new WeakMap());
/**
 * @since 1.0.0
 * @category constructors
 */
export const exitSchema = self => {
  if (exitSchemaCache.has(self)) {
    return exitSchemaCache.get(self);
  }
  const rpc = self;
  const streamSchemas = RpcSchema.getStreamSchemas(rpc.successSchema.ast);
  const schema = Schema.Exit({
    success: Option.isSome(streamSchemas) ? Schema.Void : rpc.successSchema,
    failure: Option.isSome(streamSchemas) ? Schema.Union(streamSchemas.value.failure, rpc.errorSchema) : rpc.errorSchema,
    defect: Schema.Defect
  });
  exitSchemaCache.set(self, schema);
  return schema;
};
/**
 * @since 1.0.0
 * @category Fork
 */
export const ForkTypeId = /*#__PURE__*/Symbol.for("@effect/rpc/Rpc/Fork");
/**
 * You can use `fork` to wrap a response Effect or Stream, to ensure that the
 * response is executed concurrently regardless of the RpcServer concurrency
 * setting.
 *
 * @since 1.0.0
 * @category Fork
 */
export const fork = value => ({
  [ForkTypeId]: ForkTypeId,
  value
});
/**
 * @since 1.0.0
 * @category Fork
 */
export const isFork = u => ForkTypeId in u;
//# sourceMappingURL=Rpc.js.map