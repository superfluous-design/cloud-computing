/**
 * @since 1.0.0
 */
import { Msgpackr } from "@effect/platform/MsgPack";
import * as Context from "effect/Context";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
/**
 * @since 1.0.0
 * @category serialization
 */
export class RpcSerialization extends /*#__PURE__*/Context.Tag("@effect/rpc/RpcSerialization")() {}
/**
 * @since 1.0.0
 * @category serialization
 */
export const json = /*#__PURE__*/Effect.sync(() => {
  const decoder = new TextDecoder();
  return RpcSerialization.of({
    contentType: "application/json",
    unsafeMake: () => ({
      decode: bytes => [JSON.parse(typeof bytes === "string" ? bytes : decoder.decode(bytes))],
      encode: response => JSON.stringify(response)
    })
  });
});
/**
 * @since 1.0.0
 * @category serialization
 */
export const ndjson = /*#__PURE__*/Effect.sync(() => {
  const decoder = new TextDecoder();
  return RpcSerialization.of({
    contentType: "application/ndjson",
    unsafeMake: () => {
      let buffer = "";
      return {
        decode: bytes => {
          buffer += typeof bytes === "string" ? bytes : decoder.decode(bytes);
          let position = 0;
          let nlIndex = buffer.indexOf("\n", position);
          const items = [];
          while (nlIndex !== -1) {
            const item = JSON.parse(buffer.slice(position, nlIndex));
            items.push(item);
            position = nlIndex + 1;
            nlIndex = buffer.indexOf("\n", position);
          }
          buffer = buffer.slice(position);
          return items;
        },
        encode: response => JSON.stringify(response) + "\n"
      };
    }
  });
});
/**
 * @since 1.0.0
 * @category serialization
 */
export const msgPack = /*#__PURE__*/RpcSerialization.of({
  contentType: "application/msgpack",
  unsafeMake: () => {
    const unpackr = new Msgpackr.Unpackr();
    const packr = new Msgpackr.Packr();
    const encoder = new TextEncoder();
    return {
      decode: bytes => unpackr.unpackMultiple(typeof bytes === "string" ? encoder.encode(bytes) : bytes),
      encode: response => packr.pack(response)
    };
  }
});
/**
 * A rpc serialization layer that uses JSON for serialization.
 *
 * Use this if your protocol supports framing for messages, otherwise use
 * {@link layerNdjson}.
 *
 * @since 1.0.0
 * @category serialization
 */
export const layerJson = /*#__PURE__*/Layer.effect(RpcSerialization, json);
/**
 * A rpc serialization layer that uses NDJSON for serialization.
 *
 * Use this if your protocol does not support framing for messages, otherwise
 * use {@link layerJson}.
 *
 * @since 1.0.0
 * @category serialization
 */
export const layerNdjson = /*#__PURE__*/Layer.effect(RpcSerialization, ndjson);
/**
 * A rpc serialization layer that uses MessagePack for serialization.
 *
 * MessagePack has a more compact binary format compared to JSON and NDJSON. It
 * also has better support for binary data.
 *
 * @since 1.0.0
 * @category serialization
 */
export const layerMsgPack = /*#__PURE__*/Layer.succeed(RpcSerialization, msgPack);
//# sourceMappingURL=RpcSerialization.js.map