"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make = exports.TypeId = void 0;
var Context = _interopRequireWildcard(require("effect/Context"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var Schema = _interopRequireWildcard(require("effect/Schema"));
var Stream = _interopRequireWildcard(require("effect/Stream"));
var Rpc = _interopRequireWildcard(require("./Rpc.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 * @category type ids
 */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for("@effect/rpc/RpcGroup");
const RpcGroupProto = {
  add(...rpcs) {
    return makeProto({
      requests: resolveInput(...this.requests.values(), ...rpcs),
      annotations: this.annotations
    });
  },
  merge(...groups) {
    const requests = new Map(this.requests);
    const annotations = new Map(this.annotations.unsafeMap);
    for (const group of groups) {
      for (const [tag, rpc] of group.requests) {
        requests.set(tag, rpc);
      }
      for (const [key, value] of group.annotations.unsafeMap) {
        annotations.set(key, value);
      }
    }
    return makeProto({
      requests,
      annotations: Context.unsafeMake(annotations)
    });
  },
  middleware(middleware) {
    const requests = new Map();
    for (const [tag, rpc] of this.requests) {
      requests.set(tag, rpc.middleware(middleware));
    }
    return makeProto({
      requests,
      annotations: this.annotations
    });
  },
  toHandlersContext(build) {
    return Effect.gen(this, function* () {
      const context = yield* Effect.context();
      const handlers = Effect.isEffect(build) ? yield* build : build;
      const contextMap = new Map();
      for (const [tag, handler] of Object.entries(handlers)) {
        const rpc = this.requests.get(tag);
        contextMap.set(rpc.key, {
          handler,
          context
        });
      }
      return Context.unsafeMake(contextMap);
    });
  },
  toLayer(build) {
    return Layer.scopedContext(this.toHandlersContext(build));
  },
  toLayerHandler(tag, build) {
    return Layer.scopedContext(Effect.gen(this, function* () {
      const context = yield* Effect.context();
      const handler = Effect.isEffect(build) ? yield* build : build;
      const contextMap = new Map();
      const rpc = this.requests.get(tag);
      contextMap.set(rpc.key, {
        handler,
        context
      });
      return Context.unsafeMake(contextMap);
    }));
  },
  accessHandler(tag) {
    return Effect.contextWith(parentContext => {
      const rpc = this.requests.get(tag);
      const {
        context,
        handler
      } = parentContext.unsafeMap.get(rpc.key);
      return (payload, headers) => {
        const result = handler(payload, headers);
        const effectOrStream = Rpc.isFork(result) ? result.value : result;
        return Effect.isEffect(effectOrStream) ? Effect.provide(effectOrStream, context) : Stream.provideContext(effectOrStream, context);
      };
    });
  },
  annotate(tag, value) {
    return makeProto({
      requests: this.requests,
      annotations: Context.add(this.annotations, tag, value)
    });
  },
  annotateRpcs(tag, value) {
    return this.annotateRpcsContext(Context.make(tag, value));
  },
  annotateContext(context) {
    return makeProto({
      requests: this.requests,
      annotations: Context.merge(this.annotations, context)
    });
  },
  annotateRpcsContext(context) {
    const requests = new Map();
    for (const [tag, rpc] of this.requests) {
      requests.set(tag, rpc.annotateContext(Context.merge(context, rpc.annotations)));
    }
    return makeProto({
      requests,
      annotations: this.annotations
    });
  }
};
const makeProto = options => Object.assign(function () {}, RpcGroupProto, {
  requests: options.requests,
  annotations: options.annotations
});
const resolveInput = (...rpcs) => {
  const requests = new Map();
  for (const rpc of rpcs) {
    requests.set(rpc._tag, Schema.isSchema(rpc) ? Rpc.fromTaggedRequest(rpc) : rpc);
  }
  return requests;
};
/**
 * @since 1.0.0
 * @category groups
 */
const make = (...rpcs) => makeProto({
  requests: resolveInput(...rpcs),
  annotations: Context.empty()
});
exports.make = make;
//# sourceMappingURL=RpcGroup.js.map