"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make = exports.isRpc = exports.isFork = exports.fromTaggedRequest = exports.fork = exports.exitSchema = exports.TypeId = exports.ForkTypeId = void 0;
var Context_ = _interopRequireWildcard(require("effect/Context"));
var _GlobalValue = require("effect/GlobalValue");
var Option = _interopRequireWildcard(require("effect/Option"));
var _Pipeable = require("effect/Pipeable");
var Predicate = _interopRequireWildcard(require("effect/Predicate"));
var Schema = _interopRequireWildcard(require("effect/Schema"));
var RpcSchema = _interopRequireWildcard(require("./RpcSchema.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 * @category type ids
 */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for("@effect/rpc/Rpc");
/**
 * @since 1.0.0
 * @category guards
 */
const isRpc = u => Predicate.hasProperty(u, TypeId);
exports.isRpc = isRpc;
const Proto = {
  [TypeId]: TypeId,
  pipe() {
    return (0, _Pipeable.pipeArguments)(this, arguments);
  },
  setSuccess(successSchema) {
    return makeProto({
      ...this,
      successSchema
    });
  },
  setError(errorSchema) {
    return makeProto({
      ...this,
      errorSchema
    });
  },
  setPayload(payloadSchema) {
    return makeProto({
      ...this,
      payloadSchema: Schema.isSchema(payloadSchema) ? payloadSchema : Schema.Struct(payloadSchema)
    });
  },
  middleware(middleware) {
    return makeProto({
      ...this,
      middlewares: new Set([...this.middlewares, middleware])
    });
  },
  annotate(tag, value) {
    return makeProto({
      ...this,
      annotations: Context_.add(this.annotations, tag, value)
    });
  },
  annotateContext(context) {
    return makeProto({
      ...this,
      annotations: Context_.merge(this.annotations, context)
    });
  }
};
const makeProto = options => {
  const self = Object.assign(Object.create(Proto), options);
  self.key = `@effect/rpc/Rpc/${options._tag}`;
  return self;
};
const constEmptyStruct = /*#__PURE__*/Schema.Struct({});
/**
 * @since 1.0.0
 * @category constructors
 */
const make = (tag, options) => {
  const successSchema = options?.success ?? Schema.Void;
  const errorSchema = options?.error ?? Schema.Never;
  return makeProto({
    _tag: tag,
    payloadSchema: Schema.isSchema(options?.payload) ? options?.payload : options?.payload ? Schema.Struct(options?.payload) : constEmptyStruct,
    successSchema: options?.stream ? RpcSchema.Stream({
      success: successSchema,
      failure: errorSchema
    }) : successSchema,
    errorSchema: options?.stream ? Schema.Never : errorSchema,
    annotations: Context_.empty(),
    middlewares: new Set()
  });
};
/**
 * @since 1.0.0
 * @category constructors
 */
exports.make = make;
const fromTaggedRequest = schema => makeProto({
  _tag: schema._tag,
  payloadSchema: schema,
  successSchema: schema.success,
  errorSchema: schema.failure,
  annotations: Context_.empty(),
  middlewares: new Set()
});
exports.fromTaggedRequest = fromTaggedRequest;
const exitSchemaCache = /*#__PURE__*/(0, _GlobalValue.globalValue)("@effect/rpc/Rpc/exitSchemaCache", () => new WeakMap());
/**
 * @since 1.0.0
 * @category constructors
 */
const exitSchema = self => {
  if (exitSchemaCache.has(self)) {
    return exitSchemaCache.get(self);
  }
  const rpc = self;
  const streamSchemas = RpcSchema.getStreamSchemas(rpc.successSchema.ast);
  const schema = Schema.Exit({
    success: Option.isSome(streamSchemas) ? Schema.Void : rpc.successSchema,
    failure: Option.isSome(streamSchemas) ? Schema.Union(streamSchemas.value.failure, rpc.errorSchema) : rpc.errorSchema,
    defect: Schema.Defect
  });
  exitSchemaCache.set(self, schema);
  return schema;
};
/**
 * @since 1.0.0
 * @category Fork
 */
exports.exitSchema = exitSchema;
const ForkTypeId = exports.ForkTypeId = /*#__PURE__*/Symbol.for("@effect/rpc/Rpc/Fork");
/**
 * You can use `fork` to wrap a response Effect or Stream, to ensure that the
 * response is executed concurrently regardless of the RpcServer concurrency
 * setting.
 *
 * @since 1.0.0
 * @category Fork
 */
const fork = value => ({
  [ForkTypeId]: ForkTypeId,
  value
});
/**
 * @since 1.0.0
 * @category Fork
 */
exports.fork = fork;
const isFork = u => ForkTypeId in u;
exports.isFork = isFork;
//# sourceMappingURL=Rpc.js.map