"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ndjson = exports.msgPack = exports.layerNdjson = exports.layerMsgPack = exports.layerJson = exports.json = exports.RpcSerialization = void 0;
var _MsgPack = require("@effect/platform/MsgPack");
var Context = _interopRequireWildcard(require("effect/Context"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category serialization
 */
class RpcSerialization extends /*#__PURE__*/Context.Tag("@effect/rpc/RpcSerialization")() {}
/**
 * @since 1.0.0
 * @category serialization
 */
exports.RpcSerialization = RpcSerialization;
const json = exports.json = /*#__PURE__*/Effect.sync(() => {
  const decoder = new TextDecoder();
  return RpcSerialization.of({
    contentType: "application/json",
    unsafeMake: () => ({
      decode: bytes => [JSON.parse(typeof bytes === "string" ? bytes : decoder.decode(bytes))],
      encode: response => JSON.stringify(response)
    })
  });
});
/**
 * @since 1.0.0
 * @category serialization
 */
const ndjson = exports.ndjson = /*#__PURE__*/Effect.sync(() => {
  const decoder = new TextDecoder();
  return RpcSerialization.of({
    contentType: "application/ndjson",
    unsafeMake: () => {
      let buffer = "";
      return {
        decode: bytes => {
          buffer += typeof bytes === "string" ? bytes : decoder.decode(bytes);
          let position = 0;
          let nlIndex = buffer.indexOf("\n", position);
          const items = [];
          while (nlIndex !== -1) {
            const item = JSON.parse(buffer.slice(position, nlIndex));
            items.push(item);
            position = nlIndex + 1;
            nlIndex = buffer.indexOf("\n", position);
          }
          buffer = buffer.slice(position);
          return items;
        },
        encode: response => JSON.stringify(response) + "\n"
      };
    }
  });
});
/**
 * @since 1.0.0
 * @category serialization
 */
const msgPack = exports.msgPack = /*#__PURE__*/RpcSerialization.of({
  contentType: "application/msgpack",
  unsafeMake: () => {
    const unpackr = new _MsgPack.Msgpackr.Unpackr();
    const packr = new _MsgPack.Msgpackr.Packr();
    const encoder = new TextEncoder();
    return {
      decode: bytes => unpackr.unpackMultiple(typeof bytes === "string" ? encoder.encode(bytes) : bytes),
      encode: response => packr.pack(response)
    };
  }
});
/**
 * A rpc serialization layer that uses JSON for serialization.
 *
 * Use this if your protocol supports framing for messages, otherwise use
 * {@link layerNdjson}.
 *
 * @since 1.0.0
 * @category serialization
 */
const layerJson = exports.layerJson = /*#__PURE__*/Layer.effect(RpcSerialization, json);
/**
 * A rpc serialization layer that uses NDJSON for serialization.
 *
 * Use this if your protocol does not support framing for messages, otherwise
 * use {@link layerJson}.
 *
 * @since 1.0.0
 * @category serialization
 */
const layerNdjson = exports.layerNdjson = /*#__PURE__*/Layer.effect(RpcSerialization, ndjson);
/**
 * A rpc serialization layer that uses MessagePack for serialization.
 *
 * MessagePack has a more compact binary format compared to JSON and NDJSON. It
 * also has better support for binary data.
 *
 * @since 1.0.0
 * @category serialization
 */
const layerMsgPack = exports.layerMsgPack = /*#__PURE__*/Layer.succeed(RpcSerialization, msgPack);
//# sourceMappingURL=RpcSerialization.js.map