import * as Context from "effect/Context";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
declare const RpcSerialization_base: Context.TagClass<RpcSerialization, "@effect/rpc/RpcSerialization", {
    unsafeMake(): Parser;
    readonly contentType: string;
}>;
/**
 * @since 1.0.0
 * @category serialization
 */
export declare class RpcSerialization extends RpcSerialization_base {
}
/**
 * @since 1.0.0
 * @category serialization
 */
export interface Parser {
    readonly decode: (data: Uint8Array | string) => ReadonlyArray<unknown>;
    readonly encode: (response: unknown) => Uint8Array | string;
}
/**
 * @since 1.0.0
 * @category serialization
 */
export declare const json: Effect.Effect<RpcSerialization["Type"]>;
/**
 * @since 1.0.0
 * @category serialization
 */
export declare const ndjson: Effect.Effect<RpcSerialization["Type"]>;
/**
 * @since 1.0.0
 * @category serialization
 */
export declare const msgPack: RpcSerialization["Type"];
/**
 * A rpc serialization layer that uses JSON for serialization.
 *
 * Use this if your protocol supports framing for messages, otherwise use
 * {@link layerNdjson}.
 *
 * @since 1.0.0
 * @category serialization
 */
export declare const layerJson: Layer.Layer<RpcSerialization>;
/**
 * A rpc serialization layer that uses NDJSON for serialization.
 *
 * Use this if your protocol does not support framing for messages, otherwise
 * use {@link layerJson}.
 *
 * @since 1.0.0
 * @category serialization
 */
export declare const layerNdjson: Layer.Layer<RpcSerialization>;
/**
 * A rpc serialization layer that uses MessagePack for serialization.
 *
 * MessagePack has a more compact binary format compared to JSON and NDJSON. It
 * also has better support for binary data.
 *
 * @since 1.0.0
 * @category serialization
 */
export declare const layerMsgPack: Layer.Layer<RpcSerialization>;
export {};
//# sourceMappingURL=RpcSerialization.d.ts.map