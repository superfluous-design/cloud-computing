"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tuple = exports.struct = exports.reverse = exports.min = exports.max = exports.make = exports.last = exports.intercalate = exports.imap = exports.first = exports.constant = exports.array = exports.SemiProduct = exports.Product = exports.Invariant = void 0;
var _Function = require("effect/Function");
var _Iterable = require("./internal/Iterable.js");
var product_ = _interopRequireWildcard(require("./Product.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 0.24.0
 */

/**
 * The `combineMany` parameter is optional and defaults to a standard
 * implementation. You can provide a custom implementation when performance
 * optimizations are possible.
 *
 * @category constructors
 * @since 0.24.0
 */
const make = (combine, combineMany = (self, collection) => (0, _Iterable.reduce)(self, combine)(collection)) => ({
  combine,
  combineMany
});
/**
 * `Semigroup` that returns last minimum of elements.
 *
 * @category constructors
 * @since 0.24.0
 */
exports.make = make;
const min = O => make((self, that) => O(self, that) === -1 ? self : that);
/**
 * `Semigroup` that returns last maximum of elements.
 *
 * @category constructors
 * @since 0.24.0
 */
exports.min = min;
const max = O => make((self, that) => O(self, that) === 1 ? self : that);
/**
 * @category constructors
 * @since 0.24.0
 */
exports.max = max;
const constant = a => make(() => a, () => a);
/**
 * The dual of a `Semigroup`, obtained by flipping the arguments of `combine`.
 *
 * @since 0.24.0
 */
exports.constant = constant;
const reverse = S => make((self, that) => S.combine(that, self), (self, collection) => {
  const reversed = Array.from(collection).reverse();
  return reversed.length > 0 ? S.combine(S.combineMany(reversed[0], reversed.slice(1)), self) : self;
});
/**
 * The `intercalate` API returns a function that takes a `Semigroup` instance and a separator value, and returns a new
 * `Semigroup` instance that combines values with the given separator.
 *
 * This API is useful when you want to combine values with a specific separator. For example, when you want to concatenate
 * an array of strings with a separator string in between.
 *
 * It is interesting to note that there is no equivalent API in the `Monoid` module. This is because the value `empty`,
 * which is required for the `Monoid` interface, cannot exist.
 *
 * @since 0.24.0
 */
exports.reverse = reverse;
const intercalate = exports.intercalate = /*#__PURE__*/(0, _Function.dual)(2, (S, separator) => make((self, that) => S.combineMany(self, [separator, that])));
/**
 * Always return the first argument.
 *
 * @category instances
 * @since 0.24.0
 */
const first = () => make(a => a, a => a);
/**
 * Always return the last argument.
 *
 * @category instances
 * @since 0.24.0
 */
exports.first = first;
const last = () => make((_, second) => second, (self, collection) => {
  let a = self;
  // eslint-disable-next-line no-empty
  for (a of collection) {}
  return a;
});
/**
 * @since 0.24.0
 */
exports.last = last;
const imap = exports.imap = /*#__PURE__*/(0, _Function.dual)(3, (S, to, from) => make((self, that) => to(S.combine(from(self), from(that))), (self, collection) => to(S.combineMany(from(self), (0, _Iterable.map)(from)(collection)))));
/**
 * @category instances
 * @since 0.24.0
 */
const Invariant = exports.Invariant = {
  imap
};
const product = (self, that) => make(([xa, xb], [ya, yb]) => [self.combine(xa, ya), that.combine(xb, yb)]);
const productAll = collection => {
  return make((x, y) => {
    const len = Math.min(x.length, y.length);
    const out = [];
    let collectionLength = 0;
    for (const s of collection) {
      if (collectionLength >= len) {
        break;
      }
      out.push(s.combine(x[collectionLength], y[collectionLength]));
      collectionLength++;
    }
    return out;
  });
};
const productMany = (self, collection) => {
  const semigroup = productAll(collection);
  return make((x, y) => [self.combine(x[0], y[0]), ...semigroup.combine(x.slice(1), y.slice(1))]);
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiProduct = exports.SemiProduct = {
  imap,
  product,
  productMany
};
const of = constant;
/**
 * @category instances
 * @since 0.24.0
 */
const Product = exports.Product = {
  of,
  imap,
  product,
  productMany,
  productAll
};
/**
 * Similar to `Promise.all` but operates on `Semigroup`s.
 *
 * ```
 * [Semigroup<A>, Semigroup<B>, ...] -> Semigroup<[A, B, ...]>
 * ```
 *
 * This function creates and returns a new `Semigroup` for a tuple of values based on the given `Semigroup`s for each element in the tuple.
 * The returned `Semigroup` combines two tuples of the same type by applying the corresponding `Semigroup` passed as arguments to each element in the tuple.
 *
 * It is useful when you need to combine two tuples of the same type and you have a specific way of combining each element of the tuple.
 *
 * @category combinators
 * @since 0.24.0
 */
const tuple = exports.tuple = /*#__PURE__*/product_.tuple(Product);
/**
 * Given a type `A`, this function creates and returns a `Semigroup` for `ReadonlyArray<A>`.
 * The returned `Semigroup` combines two arrays by concatenating them.
 *
 * @category combinators
 * @since 0.24.0
 */
const array = () => make((self, that) => self.concat(that));
/**
 * This function creates and returns a new `Semigroup` for a struct of values based on the given `Semigroup`s for each property in the struct.
 * The returned `Semigroup` combines two structs of the same type by applying the corresponding `Semigroup` passed as arguments to each property in the struct.
 *
 * It is useful when you need to combine two structs of the same type and you have a specific way of combining each property of the struct.
 *
 * @category combinators
 * @since 0.24.0
 */
exports.array = array;
const struct = exports.struct = /*#__PURE__*/product_.struct(Product);
//# sourceMappingURL=Semigroup.js.map