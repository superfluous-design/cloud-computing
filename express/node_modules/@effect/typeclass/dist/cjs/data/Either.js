"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Traversable = exports.SemiProduct = exports.SemiCoproduct = exports.SemiApplicative = exports.SemiAlternative = exports.Product = exports.Pointed = exports.Of = exports.Monad = exports.Invariant = exports.Foldable = exports.FlatMap = exports.Covariant = exports.Chainable = exports.Bicovariant = exports.Applicative = void 0;
var Either = _interopRequireWildcard(require("effect/Either"));
var _Function = require("effect/Function");
var covariant = _interopRequireWildcard(require("../Covariant.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 0.24.0
 */

const of = Either.right;
const map = Either.map;
const imap = /*#__PURE__*/covariant.imap(map);
const bimap = /*#__PURE__*/(0, _Function.dual)(3, (self, onLeft, onRight) => Either.mapBoth(self, {
  onLeft,
  onRight
}));
const flatMap = Either.flatMap;
const product = (self, that) => Either.isRight(self) ? Either.isRight(that) ? Either.right([self.right, that.right]) : Either.left(that.left) : Either.left(self.left);
const productMany = (self, collection) => {
  if (Either.isLeft(self)) {
    return Either.left(self.left);
  }
  const out = [self.right];
  for (const e of collection) {
    if (Either.isLeft(e)) {
      return Either.left(e.left);
    }
    out.push(e.right);
  }
  return Either.right(out);
};
const productAll = collection => {
  const out = [];
  for (const e of collection) {
    if (Either.isLeft(e)) {
      return Either.left(e.left);
    }
    out.push(e.right);
  }
  return Either.right(out);
};
const coproduct = (self, that) => Either.isRight(self) ? self : that;
const coproductMany = (self, collection) => {
  let out = self;
  if (Either.isRight(out)) {
    return out;
  }
  for (out of collection) {
    if (Either.isRight(out)) {
      return out;
    }
  }
  return out;
};
const traverse = F => (0, _Function.dual)(2, (self, f) => Either.isLeft(self) ? F.of(Either.left(self.left)) : F.map(f(self.right), Either.right));
/**
 * @category instances
 * @since 0.24.0
 */
const Bicovariant = exports.Bicovariant = {
  bimap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Covariant = exports.Covariant = {
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
const Invariant = exports.Invariant = {
  imap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Of = exports.Of = {
  of
};
/**
 * @category instances
 * @since 0.24.0
 */
const Pointed = exports.Pointed = {
  of,
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
const FlatMap = exports.FlatMap = {
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Chainable = exports.Chainable = {
  imap,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Monad = exports.Monad = {
  imap,
  of,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiProduct = exports.SemiProduct = {
  imap,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const Product = exports.Product = {
  of,
  imap,
  product,
  productMany,
  productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiApplicative = exports.SemiApplicative = {
  imap,
  map,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const Applicative = exports.Applicative = {
  imap,
  of,
  map,
  product,
  productMany,
  productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiCoproduct = exports.SemiCoproduct = {
  imap,
  coproduct,
  coproductMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiAlternative = exports.SemiAlternative = {
  map,
  imap,
  coproduct,
  coproductMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const Foldable = exports.Foldable = {
  reduce: /*#__PURE__*/(0, _Function.dual)(3, (self, b, f) => Either.isLeft(self) ? b : f(b, self.right))
};
/**
 * @category instances
 * @since 0.24.0
 */
const Traversable = exports.Traversable = {
  traverse
};
//# sourceMappingURL=Either.js.map