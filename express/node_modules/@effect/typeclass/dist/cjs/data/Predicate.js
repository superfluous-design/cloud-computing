"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSemigroupXor = exports.getSemigroupSome = exports.getSemigroupEvery = exports.getSemigroupEqv = exports.getMonoidXor = exports.getMonoidSome = exports.getMonoidEvery = exports.getMonoidEqv = exports.SemiProduct = exports.Product = exports.Of = exports.Invariant = exports.Contravariant = void 0;
var _Function = require("effect/Function");
var Predicate = _interopRequireWildcard(require("effect/Predicate"));
var contravariant = _interopRequireWildcard(require("../Contravariant.js"));
var monoid = _interopRequireWildcard(require("../Monoid.js"));
var semigroup = _interopRequireWildcard(require("../Semigroup.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 0.24.0
 */

const contramap = Predicate.mapInput;
const imap = /*#__PURE__*/contravariant.imap(contramap);
const of = _ => Predicate.isUnknown;
const product = (self, that) => ([a, b]) => self(a) && that(b);
const productAll = collection => {
  return as => {
    let collectionIndex = 0;
    for (const p of collection) {
      if (collectionIndex >= as.length) {
        break;
      }
      if (p(as[collectionIndex]) === false) {
        return false;
      }
      collectionIndex++;
    }
    return true;
  };
};
const productMany = (self, collection) => {
  const rest = productAll(collection);
  return ([head, ...tail]) => self(head) === false ? false : rest(tail);
};
/**
 * @category instances
 * @since 0.24.0
 */
const Contravariant = exports.Contravariant = {
  imap,
  contramap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Invariant = exports.Invariant = {
  imap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Of = exports.Of = {
  of
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiProduct = exports.SemiProduct = {
  imap,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const Product = exports.Product = {
  of,
  imap,
  product,
  productMany,
  productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
const getSemigroupEqv = () => semigroup.make(Predicate.eqv);
/**
 * @category instances
 * @since 0.24.0
 */
exports.getSemigroupEqv = getSemigroupEqv;
const getMonoidEqv = () => monoid.fromSemigroup(getSemigroupEqv(), _Function.constTrue);
/**
 * @category instances
 * @since 0.24.0
 */
exports.getMonoidEqv = getMonoidEqv;
const getSemigroupXor = () => semigroup.make(Predicate.xor);
/**
 * @category instances
 * @since 0.24.0
 */
exports.getSemigroupXor = getSemigroupXor;
const getMonoidXor = () => monoid.fromSemigroup(getSemigroupXor(), _Function.constFalse);
/**
 * @category instances
 * @since 0.24.0
 */
exports.getMonoidXor = getMonoidXor;
const getSemigroupSome = () => semigroup.make(Predicate.or, (self, collection) => a => {
  if (self(a)) {
    return true;
  }
  for (const p of collection) {
    if (p(a)) {
      return true;
    }
  }
  return false;
});
/**
 * @category instances
 * @since 0.24.0
 */
exports.getSemigroupSome = getSemigroupSome;
const getMonoidSome = () => monoid.fromSemigroup(getSemigroupSome(), _Function.constFalse);
/**
 * @category instances
 * @since 0.24.0
 */
exports.getMonoidSome = getMonoidSome;
const getSemigroupEvery = () => semigroup.make(Predicate.and, (self, collection) => a => {
  if (!self(a)) {
    return false;
  }
  for (const p of collection) {
    if (!p(a)) {
      return false;
    }
  }
  return true;
});
/**
 * @category instances
 * @since 0.24.0
 */
exports.getSemigroupEvery = getSemigroupEvery;
const getMonoidEvery = () => monoid.fromSemigroup(getSemigroupEvery(), _Function.constTrue);
exports.getMonoidEvery = getMonoidEvery;
//# sourceMappingURL=Predicate.js.map