"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOptionalMonoid = exports.Traversable = exports.SemiProduct = exports.SemiCoproduct = exports.SemiApplicative = exports.SemiAlternative = exports.Product = exports.Pointed = exports.Of = exports.Monad = exports.Invariant = exports.Foldable = exports.FlatMap = exports.Filterable = exports.Covariant = exports.Coproduct = exports.Chainable = exports.Applicative = exports.Alternative = void 0;
var _Function = require("effect/Function");
var Option = _interopRequireWildcard(require("effect/Option"));
var covariant = _interopRequireWildcard(require("../Covariant.js"));
var monoid = _interopRequireWildcard(require("../Monoid.js"));
var semigroup = _interopRequireWildcard(require("../Semigroup.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @category instances
 * @since 0.24.0
 */

const of = Option.some;
const map = Option.map;
const flatMap = Option.flatMap;
const productAll = Option.all;
const coproductAll = Option.firstSomeOf;
const zero = Option.none;
const product = Option.product;
const productMany = Option.productMany;
const imap = /*#__PURE__*/covariant.imap(map);
const coproduct = (self, that) => Option.isSome(self) ? self : that;
const coproductMany = (self, collection) => Option.isSome(self) ? self : Option.firstSomeOf(collection);
const traverse = F => (0, _Function.dual)(2, (self, f) => Option.isNone(self) ? F.of(Option.none()) : F.map(f(self.value), Option.some));
/**
 * @category instances
 * @since 0.24.0
 */
const Covariant = exports.Covariant = {
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
const Invariant = exports.Invariant = {
  imap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Of = exports.Of = {
  of
};
/**
 * @category instances
 * @since 0.24.0
 */
const Pointed = exports.Pointed = {
  of,
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
const FlatMap = exports.FlatMap = {
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Chainable = exports.Chainable = {
  imap,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Monad = exports.Monad = {
  imap,
  of,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiProduct = exports.SemiProduct = {
  imap,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const Product = exports.Product = {
  of,
  imap,
  product,
  productMany,
  productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiApplicative = exports.SemiApplicative = {
  imap,
  map,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const Applicative = exports.Applicative = {
  imap,
  of,
  map,
  product,
  productMany,
  productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiCoproduct = exports.SemiCoproduct = {
  imap,
  coproduct,
  coproductMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const Coproduct = exports.Coproduct = {
  imap,
  coproduct,
  coproductMany,
  zero,
  coproductAll
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiAlternative = exports.SemiAlternative = {
  map,
  imap,
  coproduct,
  coproductMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const Alternative = exports.Alternative = {
  map,
  imap,
  coproduct,
  coproductMany,
  coproductAll,
  zero
};
/**
 * @category instances
 * @since 0.24.0
 */
const Foldable = exports.Foldable = {
  reduce: /*#__PURE__*/(0, _Function.dual)(3, (self, b, f) => Option.isNone(self) ? b : f(b, self.value))
};
/**
 * @category instances
 * @since 0.24.0
 */
const Filterable = exports.Filterable = {
  partitionMap: Option.partitionMap,
  filterMap: Option.filterMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Traversable = exports.Traversable = {
  traverse
};
/**
 * @category instances
 * @since 0.24.0
 */
const getOptionalMonoid = Semigroup => monoid.fromSemigroup(semigroup.make((self, that) => Option.isNone(self) ? that : Option.isNone(that) ? self : Option.some(Semigroup.combine(self.value, that.value))), Option.none());
exports.getOptionalMonoid = getOptionalMonoid;
//# sourceMappingURL=Option.js.map