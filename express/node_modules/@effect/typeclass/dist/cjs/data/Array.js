"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSemigroup = exports.getMonoid = exports.TraversableFilterable = exports.Traversable = exports.SemiProduct = exports.SemiApplicative = exports.Product = exports.Pointed = exports.Of = exports.Monad = exports.Invariant = exports.Foldable = exports.FlatMap = exports.Filterable = exports.Covariant = exports.Chainable = exports.Applicative = void 0;
var ArrayInstances = _interopRequireWildcard(require("effect/Array"));
var _Function = require("effect/Function");
var covariant = _interopRequireWildcard(require("../Covariant.js"));
var monoid = _interopRequireWildcard(require("../Monoid.js"));
var semigroup = _interopRequireWildcard(require("../Semigroup.js"));
var semiProduct = _interopRequireWildcard(require("../SemiProduct.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * This module provides utility functions for working with arrays in TypeScript.
 *
 * @since 0.24.0
 */

const of = ArrayInstances.of;
const map = ArrayInstances.map;
const imap = /*#__PURE__*/covariant.imap(map);
const flatMap = ArrayInstances.flatMap;
const product = (self, that) => {
  if (ArrayInstances.isEmptyReadonlyArray(self) || ArrayInstances.isEmptyReadonlyArray(that)) {
    return ArrayInstances.empty();
  }
  const out = [];
  for (let i = 0; i < self.length; i++) {
    for (let j = 0; j < that.length; j++) {
      out.push([self[i], that[j]]);
    }
  }
  return out;
};
const productMany = /*#__PURE__*/semiProduct.productMany(map, product);
const traverse = F => (0, _Function.dual)(2, (self, f) => F.productAll(ArrayInstances.fromIterable(self).map(f)));
const traversePartitionMap = F => (0, _Function.dual)(2, (self, f) => {
  return F.map(traverse(F)(self, f), ArrayInstances.separate);
});
const traverseFilterMap = F => (0, _Function.dual)(2, (self, f) => {
  return F.map(traverse(F)(self, f), ArrayInstances.getSomes);
});
/**
 * @category instances
 * @since 0.24.0
 */
const Of = exports.Of = {
  of
};
/**
 * @category instances
 * @since 0.24.0
 */
const Covariant = exports.Covariant = {
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
const Invariant = exports.Invariant = {
  imap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Pointed = exports.Pointed = {
  of,
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
const FlatMap = exports.FlatMap = {
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Chainable = exports.Chainable = {
  imap,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Filterable = exports.Filterable = {
  partitionMap: ArrayInstances.partitionMap,
  filterMap: ArrayInstances.filterMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Traversable = exports.Traversable = {
  traverse: traverse
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiProduct = exports.SemiProduct = {
  imap,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const SemiApplicative = exports.SemiApplicative = {
  imap,
  map,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
const Product = exports.Product = {
  of,
  imap,
  product,
  productMany,
  productAll: collection => {
    const arrays = ArrayInstances.fromIterable(collection);
    return ArrayInstances.isEmptyReadonlyArray(arrays) ? ArrayInstances.empty() : SemiProduct.productMany(arrays[0], arrays.slice(1));
  }
};
/**
 * @category instances
 * @since 0.24.0
 */
const Applicative = exports.Applicative = {
  imap,
  of,
  map,
  product,
  productMany,
  productAll: Product.productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
const Monad = exports.Monad = {
  imap,
  of,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const Foldable = exports.Foldable = {
  reduce: ArrayInstances.reduce
};
/**
 * @category instances
 * @since 0.24.0
 */
const TraversableFilterable = exports.TraversableFilterable = {
  traversePartitionMap: traversePartitionMap,
  traverseFilterMap: traverseFilterMap
};
/**
 * @category instances
 * @since 0.24.0
 */
const getSemigroup = exports.getSemigroup = semigroup.array;
/**
 * @category instances
 * @since 0.24.0
 */
const getMonoid = exports.getMonoid = monoid.array;
//# sourceMappingURL=Array.js.map