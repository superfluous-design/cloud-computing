"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSemiProduct = exports.getSemiApplicative = exports.getProduct = exports.getApplicative = exports.Pointed = exports.Of = exports.Monad = exports.Invariant = exports.FlatMap = exports.Covariant = exports.Chainable = void 0;
var Micro = _interopRequireWildcard(require("effect/Micro"));
var covariant = _interopRequireWildcard(require("../Covariant.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 0.24.40
 */

const of = Micro.succeed;
const map = Micro.map;
const flatMap = Micro.flatMap;
const imap = /*#__PURE__*/covariant.imap(map);
const product = options => (self, that) => Micro.all([self, that], options);
const productMany = options => (self, collection) => Micro.all([self, ...collection], options);
const productAll = options => collection => Micro.all(collection, options);
/**
 * @category instances
 * @since 0.24.40
 */
const Covariant = exports.Covariant = {
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.40
 */
const Invariant = exports.Invariant = {
  imap
};
/**
 * @category instances
 * @since 0.24.40
 */
const Of = exports.Of = {
  of
};
/**
 * @category instances
 * @since 0.24.40
 */
const Pointed = exports.Pointed = {
  of,
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.40
 */
const FlatMap = exports.FlatMap = {
  flatMap
};
/**
 * @category instances
 * @since 0.24.40
 */
const Chainable = exports.Chainable = {
  imap,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.40
 */
const Monad = exports.Monad = {
  imap,
  of,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.40
 */
const getSemiProduct = options => ({
  imap,
  product: product(options),
  productMany: productMany(options)
});
/**
 * @category instances
 * @since 0.24.40
 */
exports.getSemiProduct = getSemiProduct;
const getProduct = options => ({
  of,
  imap,
  product: product(options),
  productMany: productMany(options),
  productAll: productAll(options)
});
/**
 * @category instances
 * @since 0.24.40
 */
exports.getProduct = getProduct;
const getSemiApplicative = options => ({
  imap,
  map,
  product: product(options),
  productMany: productMany(options)
});
/**
 * @category instances
 * @since 0.24.40
 */
exports.getSemiApplicative = getSemiApplicative;
const getApplicative = options => ({
  imap,
  of,
  map,
  product: product(options),
  productMany: productMany(options),
  productAll: productAll(options)
});
exports.getApplicative = getApplicative;
//# sourceMappingURL=Micro.js.map