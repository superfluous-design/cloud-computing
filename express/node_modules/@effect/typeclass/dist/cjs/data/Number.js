"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SemigroupSum = exports.SemigroupMultiply = exports.SemigroupMin = exports.SemigroupMax = exports.MonoidSum = exports.MonoidMultiply = exports.MonoidMin = exports.MonoidMax = exports.Bounded = void 0;
var Number = _interopRequireWildcard(require("effect/Number"));
var bounded = _interopRequireWildcard(require("../Bounded.js"));
var monoid = _interopRequireWildcard(require("../Monoid.js"));
var semigroup = _interopRequireWildcard(require("../Semigroup.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 0.24.0
 */

/**
 * @category instances
 * @since 0.24.0
 */
const Bounded = exports.Bounded = {
  compare: Number.Order,
  maxBound: Infinity,
  minBound: -Infinity
};
/**
 * `number` semigroup under addition.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupSum } from "@effect/typeclass/data/Number"
 *
 * console.log(SemigroupSum.combine(2, 3))
 * // 5
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupSum = exports.SemigroupSum = /*#__PURE__*/semigroup.make((self, that) => self + that);
/**
 * `number` semigroup under multiplication.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupMultiply } from "@effect/typeclass/data/Number"
 *
 * console.log(SemigroupMultiply.combine(2, 3))
 * // 6
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupMultiply = exports.SemigroupMultiply = /*#__PURE__*/semigroup.make((self, that) => self * that, (self, collection) => {
  if (self === 0) {
    return 0;
  }
  let out = self;
  for (const n of collection) {
    if (n === 0) {
      return 0;
    }
    out = out * n;
  }
  return out;
});
/**
 * A `Semigroup` that uses the minimum between two values.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupMin } from "@effect/typeclass/data/Number"
 *
 * console.log(SemigroupMin.combine(2, 3))
 * // 2
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupMin = exports.SemigroupMin = /*#__PURE__*/semigroup.min(Number.Order);
/**
 * A `Semigroup` that uses the maximum between two values.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupMax } from "@effect/typeclass/data/Number"
 *
 * console.log(SemigroupMax.combine(2, 3))
 * // 3
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupMax = exports.SemigroupMax = /*#__PURE__*/semigroup.max(Number.Order);
/**
 * `number` monoid under addition.
 *
 * The `empty` value is `0`.
 *
 * **Example**
 *
 * ```ts
 * import { MonoidSum } from "@effect/typeclass/data/Number"
 *
 * console.log(MonoidSum.combine(2, 3))
 * // 5
 * console.log(MonoidSum.combine(2, MonoidSum.empty))
 * // 2
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const MonoidSum = exports.MonoidSum = /*#__PURE__*/monoid.fromSemigroup(SemigroupSum, 0);
/**
 * `number` monoid under multiplication.
 *
 * The `empty` value is `1`.
 *
 * **Example**
 *
 * ```ts
 * import { MonoidMultiply } from "@effect/typeclass/data/Number"
 *
 * console.log(MonoidMultiply.combine(2, 3))
 * // 6
 * console.log(MonoidMultiply.combine(2, MonoidMultiply.empty))
 * // 2
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const MonoidMultiply = exports.MonoidMultiply = /*#__PURE__*/monoid.fromSemigroup(SemigroupMultiply, 1);
/**
 * A `Monoid` that uses the minimum between two values.
 *
 * The `empty` value is `-Infinity`.
 *
 * **Example**
 *
 * ```ts
 * import { MonoidMin } from "@effect/typeclass/data/Number"
 *
 * console.log(MonoidMin.combine(2, 3))
 * // 2
 * console.log(MonoidMin.combine(2, MonoidMin.empty))
 * // 2
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const MonoidMin = exports.MonoidMin = /*#__PURE__*/bounded.min(Bounded);
/**
 * A `Monoid` that uses the maximum between two values.
 *
 * The `empty` value is `Infinity`.
 *
 * **Example**
 *
 * ```ts
 * import { MonoidMax } from "@effect/typeclass/data/Number"
 *
 * console.log(MonoidMax.combine(2, 3))
 * // 3
 * console.log(MonoidMax.combine(2, MonoidMax.empty))
 * // 2
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const MonoidMax = exports.MonoidMax = /*#__PURE__*/bounded.max(Bounded);
//# sourceMappingURL=Number.js.map