"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zipWith = exports.zipRight = exports.zipLeft = exports.lift2 = exports.getSemigroup = exports.ap = void 0;
var _Function = require("effect/Function");
var semigroup = _interopRequireWildcard(require("./Semigroup.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 0.24.0
 */

/**
 * Lift a `Semigroup` into 'F', the inner values are combined using the provided `Semigroup`.
 *
 * @category lifting
 * @since 0.24.0
 */
const getSemigroup = F => S => semigroup.make((self, that) => F.map(F.product(self, that), ([a1, a2]) => S.combine(a1, a2)), (self, collection) => F.map(F.productMany(self, collection), ([head, ...tail]) => S.combineMany(head, tail)));
/**
 * Zips two `F` values together using a provided function, returning a new `F` of the result.
 *
 * @since 0.24.0
 */
exports.getSemigroup = getSemigroup;
const zipWith = F => (0, _Function.dual)(3, (self, that, f) => F.map(F.product(self, that), ([a, b]) => f(a, b)));
/**
 * @since 0.24.0
 */
exports.zipWith = zipWith;
const ap = F => (0, _Function.dual)(2, (self, that) => zipWith(F)(self, that, (f, a) => f(a)));
/**
 * @since 0.24.0
 */
exports.ap = ap;
const zipLeft = F => (0, _Function.dual)(2, (self, that) => zipWith(F)(self, that, _Function.identity));
/**
 * @since 0.24.0
 */
exports.zipLeft = zipLeft;
const zipRight = F => (0, _Function.dual)(2, (self, that) => zipWith(F)(self, that, _Function.SK));
/**
 * Lifts a binary function into `F`.
 *
 * @category lifting
 * @since 0.24.0
 */
exports.zipRight = zipRight;
const lift2 = F => f => (0, _Function.dual)(2, (self, that) => zipWith(F)(self, that, f));
exports.lift2 = lift2;
//# sourceMappingURL=SemiApplicative.js.map