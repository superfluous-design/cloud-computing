/**
 * This module provides utility functions for working with arrays in TypeScript.
 *
 * @since 0.24.0
 */
import * as ArrayInstances from "effect/Array";
import type * as applicative from "../Applicative.js";
import type * as chainable from "../Chainable.js";
import * as covariant from "../Covariant.js";
import type * as filterable from "../Filterable.js";
import type * as flatMap_ from "../FlatMap.js";
import type * as foldable from "../Foldable.js";
import type * as invariant from "../Invariant.js";
import type * as monad from "../Monad.js";
import type { Monoid } from "../Monoid.js";
import type * as of_ from "../Of.js";
import type * as pointed from "../Pointed.js";
import type * as product_ from "../Product.js";
import type * as semiApplicative from "../SemiApplicative.js";
import type { Semigroup } from "../Semigroup.js";
import * as semiProduct from "../SemiProduct.js";
import type * as traversable from "../Traversable.js";
import type * as traversableFilterable from "../TraversableFilterable.js";
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Of: of_.Of<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Covariant: covariant.Covariant<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Invariant: invariant.Invariant<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Pointed: pointed.Pointed<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const FlatMap: flatMap_.FlatMap<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Chainable: chainable.Chainable<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Filterable: filterable.Filterable<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Traversable: traversable.Traversable<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const SemiProduct: semiProduct.SemiProduct<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const SemiApplicative: semiApplicative.SemiApplicative<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Product: product_.Product<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Applicative: applicative.Applicative<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Monad: monad.Monad<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Foldable: foldable.Foldable<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const TraversableFilterable: traversableFilterable.TraversableFilterable<ArrayInstances.ReadonlyArrayTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getSemigroup: <A>() => Semigroup<ReadonlyArray<A>>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getMonoid: <A>() => Monoid<ReadonlyArray<A>>;
//# sourceMappingURL=Array.d.ts.map