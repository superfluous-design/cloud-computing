import type { TypeLambda } from "effect/HKT";
import type * as applicative from "../Applicative.js";
import type * as chainable from "../Chainable.js";
import * as covariant from "../Covariant.js";
import type * as flatMap_ from "../FlatMap.js";
import type * as foldable from "../Foldable.js";
import type * as invariant from "../Invariant.js";
import type * as monad from "../Monad.js";
import type * as of_ from "../Of.js";
import type * as pointed from "../Pointed.js";
import type * as product_ from "../Product.js";
import type * as semiAlternative from "../SemiAlternative.js";
import type * as semiApplicative from "../SemiApplicative.js";
import type * as semiCoproduct from "../SemiCoproduct.js";
import type { Semigroup } from "../Semigroup.js";
import type * as semiProduct from "../SemiProduct.js";
import type * as traversable from "../Traversable.js";
/**
 * @category models
 * @since 0.24.0
 */
export type Identity<A> = A;
/**
 * @category type lambdas
 * @since 0.24.0
 */
export interface IdentityTypeLambda extends TypeLambda {
    readonly type: Identity<this["Target"]>;
}
/**
 * @category type lambdas
 * @since 0.24.0
 */
export interface IdentityTypeLambdaFix<A> extends TypeLambda {
    readonly type: Identity<A>;
}
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Covariant: covariant.Covariant<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Invariant: invariant.Invariant<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Of: of_.Of<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Pointed: pointed.Pointed<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const FlatMap: flatMap_.FlatMap<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Chainable: chainable.Chainable<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Monad: monad.Monad<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const SemiProduct: semiProduct.SemiProduct<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Product: product_.Product<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const SemiApplicative: semiApplicative.SemiApplicative<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Applicative: applicative.Applicative<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getSemiCoproduct: <A>(S: Semigroup<A>) => semiCoproduct.SemiCoproduct<IdentityTypeLambdaFix<A>>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getSemiAlternative: <A>(S: Semigroup<A>) => semiAlternative.SemiAlternative<IdentityTypeLambdaFix<A>>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Foldable: foldable.Foldable<IdentityTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Traversable: traversable.Traversable<IdentityTypeLambda>;
//# sourceMappingURL=Identity.d.ts.map