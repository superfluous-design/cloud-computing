import * as Predicate from "effect/Predicate";
import * as contravariant from "../Contravariant.js";
import type * as invariant from "../Invariant.js";
import * as monoid from "../Monoid.js";
import type * as of_ from "../Of.js";
import type * as product_ from "../Product.js";
import type { Semigroup } from "../Semigroup.js";
import type * as semiProduct from "../SemiProduct.js";
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Contravariant: contravariant.Contravariant<Predicate.PredicateTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Invariant: invariant.Invariant<Predicate.PredicateTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Of: of_.Of<Predicate.PredicateTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const SemiProduct: semiProduct.SemiProduct<Predicate.PredicateTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const Product: product_.Product<Predicate.PredicateTypeLambda>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getSemigroupEqv: <A>() => Semigroup<Predicate.Predicate<A>>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getMonoidEqv: <A>() => monoid.Monoid<Predicate.Predicate<A>>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getSemigroupXor: <A>() => Semigroup<Predicate.Predicate<A>>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getMonoidXor: <A>() => monoid.Monoid<Predicate.Predicate<A>>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getSemigroupSome: <A>() => Semigroup<Predicate.Predicate<A>>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getMonoidSome: <A>() => monoid.Monoid<Predicate.Predicate<A>>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getSemigroupEvery: <A>() => Semigroup<Predicate.Predicate<A>>;
/**
 * @category instances
 * @since 0.24.0
 */
export declare const getMonoidEvery: <A>() => monoid.Monoid<Predicate.Predicate<A>>;
//# sourceMappingURL=Predicate.d.ts.map