/**
 * @since 0.24.40
 */
import * as Effect from "effect/Effect";
import type { Concurrency } from "effect/Types";
import type * as applicative from "../Applicative.js";
import type * as chainable from "../Chainable.js";
import * as covariant from "../Covariant.js";
import type * as flatMap_ from "../FlatMap.js";
import type * as invariant from "../Invariant.js";
import type * as monad from "../Monad.js";
import type * as of_ from "../Of.js";
import type * as pointed from "../Pointed.js";
import type * as product_ from "../Product.js";
import type * as semiApplicative from "../SemiApplicative.js";
import type * as semiProduct from "../SemiProduct.js";
/**
 * @category instances
 * @since 0.24.40
 */
export type ConcurrencyOptions = {
    readonly concurrency?: Concurrency | undefined;
    readonly batching?: boolean | "inherit" | undefined;
};
/**
 * @category instances
 * @since 0.24.40
 */
export declare const Covariant: covariant.Covariant<Effect.EffectTypeLambda>;
/**
 * @category instances
 * @since 0.24.40
 */
export declare const Invariant: invariant.Invariant<Effect.EffectTypeLambda>;
/**
 * @category instances
 * @since 0.24.40
 */
export declare const Of: of_.Of<Effect.EffectTypeLambda>;
/**
 * @category instances
 * @since 0.24.40
 */
export declare const Pointed: pointed.Pointed<Effect.EffectTypeLambda>;
/**
 * @category instances
 * @since 0.24.40
 */
export declare const FlatMap: flatMap_.FlatMap<Effect.EffectTypeLambda>;
/**
 * @category instances
 * @since 0.24.40
 */
export declare const Chainable: chainable.Chainable<Effect.EffectTypeLambda>;
/**
 * @category instances
 * @since 0.24.40
 */
export declare const Monad: monad.Monad<Effect.EffectTypeLambda>;
/**
 * @category instances
 * @since 0.24.40
 */
export declare const getSemiProduct: (options?: ConcurrencyOptions) => semiProduct.SemiProduct<Effect.EffectTypeLambda>;
/**
 * @category instances
 * @since 0.24.40
 */
export declare const getProduct: (options?: ConcurrencyOptions) => product_.Product<Effect.EffectTypeLambda>;
/**
 * @category instances
 * @since 0.24.40
 */
export declare const getSemiApplicative: (options?: ConcurrencyOptions) => semiApplicative.SemiApplicative<Effect.EffectTypeLambda>;
/**
 * @category instances
 * @since 0.24.40
 */
export declare const getApplicative: (options?: ConcurrencyOptions) => applicative.Applicative<Effect.EffectTypeLambda>;
//# sourceMappingURL=Effect.d.ts.map