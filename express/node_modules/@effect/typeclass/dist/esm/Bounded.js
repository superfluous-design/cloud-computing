import * as order from "effect/Order";
import * as monoid from "./Monoid.js";
import * as semigroup from "./Semigroup.js";
/**
 * `Monoid` that returns last minimum of elements.
 *
 * @category constructors
 * @since 0.24.0
 */
export const min = B => monoid.fromSemigroup(semigroup.min(B.compare), B.maxBound);
/**
 * `Monoid` that returns last maximum of elements.
 *
 * @category constructors
 * @since 0.24.0
 */
export const max = B => monoid.fromSemigroup(semigroup.max(B.compare), B.minBound);
/**
 * Checks if a value is between the lower and upper limit of a bound.
 *
 * @category predicates
 * @since 0.24.0
 */
export const between = B => order.between(B.compare)({
  minimum: B.minBound,
  maximum: B.maxBound
});
/**
 * Clamp a value between `minBound` and `maxBound` values.
 *
 * @category utils
 * @since 0.24.0
 */
export const clamp = B => order.clamp(B.compare)({
  minimum: B.minBound,
  maximum: B.maxBound
});
/**
 * Reverses the `Order` of a `Bounded` and flips `maxBound` and `minBound` values.
 *
 * @category utils
 * @since 0.24.0
 */
export const reverse = B => ({
  compare: order.reverse(B.compare),
  minBound: B.maxBound,
  maxBound: B.minBound
});
//# sourceMappingURL=Bounded.js.map