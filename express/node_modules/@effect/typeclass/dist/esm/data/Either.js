/**
 * @since 0.24.0
 */
import * as Either from "effect/Either";
import { dual } from "effect/Function";
import * as covariant from "../Covariant.js";
const of = Either.right;
const map = Either.map;
const imap = /*#__PURE__*/covariant.imap(map);
const bimap = /*#__PURE__*/dual(3, (self, onLeft, onRight) => Either.mapBoth(self, {
  onLeft,
  onRight
}));
const flatMap = Either.flatMap;
const product = (self, that) => Either.isRight(self) ? Either.isRight(that) ? Either.right([self.right, that.right]) : Either.left(that.left) : Either.left(self.left);
const productMany = (self, collection) => {
  if (Either.isLeft(self)) {
    return Either.left(self.left);
  }
  const out = [self.right];
  for (const e of collection) {
    if (Either.isLeft(e)) {
      return Either.left(e.left);
    }
    out.push(e.right);
  }
  return Either.right(out);
};
const productAll = collection => {
  const out = [];
  for (const e of collection) {
    if (Either.isLeft(e)) {
      return Either.left(e.left);
    }
    out.push(e.right);
  }
  return Either.right(out);
};
const coproduct = (self, that) => Either.isRight(self) ? self : that;
const coproductMany = (self, collection) => {
  let out = self;
  if (Either.isRight(out)) {
    return out;
  }
  for (out of collection) {
    if (Either.isRight(out)) {
      return out;
    }
  }
  return out;
};
const traverse = F => dual(2, (self, f) => Either.isLeft(self) ? F.of(Either.left(self.left)) : F.map(f(self.right), Either.right));
/**
 * @category instances
 * @since 0.24.0
 */
export const Bicovariant = {
  bimap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Covariant = {
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Invariant = {
  imap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Of = {
  of
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Pointed = {
  of,
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
export const FlatMap = {
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Chainable = {
  imap,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Monad = {
  imap,
  of,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const SemiProduct = {
  imap,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Product = {
  of,
  imap,
  product,
  productMany,
  productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
export const SemiApplicative = {
  imap,
  map,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Applicative = {
  imap,
  of,
  map,
  product,
  productMany,
  productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
export const SemiCoproduct = {
  imap,
  coproduct,
  coproductMany
};
/**
 * @category instances
 * @since 0.24.0
 */
export const SemiAlternative = {
  map,
  imap,
  coproduct,
  coproductMany
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Foldable = {
  reduce: /*#__PURE__*/dual(3, (self, b, f) => Either.isLeft(self) ? b : f(b, self.right))
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Traversable = {
  traverse
};
//# sourceMappingURL=Either.js.map