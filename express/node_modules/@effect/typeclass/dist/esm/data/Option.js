/**
 * @category instances
 * @since 0.24.0
 */
import { dual } from "effect/Function";
import * as Option from "effect/Option";
import * as covariant from "../Covariant.js";
import * as monoid from "../Monoid.js";
import * as semigroup from "../Semigroup.js";
const of = Option.some;
const map = Option.map;
const flatMap = Option.flatMap;
const productAll = Option.all;
const coproductAll = Option.firstSomeOf;
const zero = Option.none;
const product = Option.product;
const productMany = Option.productMany;
const imap = /*#__PURE__*/covariant.imap(map);
const coproduct = (self, that) => Option.isSome(self) ? self : that;
const coproductMany = (self, collection) => Option.isSome(self) ? self : Option.firstSomeOf(collection);
const traverse = F => dual(2, (self, f) => Option.isNone(self) ? F.of(Option.none()) : F.map(f(self.value), Option.some));
/**
 * @category instances
 * @since 0.24.0
 */
export const Covariant = {
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Invariant = {
  imap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Of = {
  of
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Pointed = {
  of,
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
export const FlatMap = {
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Chainable = {
  imap,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Monad = {
  imap,
  of,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const SemiProduct = {
  imap,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Product = {
  of,
  imap,
  product,
  productMany,
  productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
export const SemiApplicative = {
  imap,
  map,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Applicative = {
  imap,
  of,
  map,
  product,
  productMany,
  productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
export const SemiCoproduct = {
  imap,
  coproduct,
  coproductMany
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Coproduct = {
  imap,
  coproduct,
  coproductMany,
  zero,
  coproductAll
};
/**
 * @category instances
 * @since 0.24.0
 */
export const SemiAlternative = {
  map,
  imap,
  coproduct,
  coproductMany
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Alternative = {
  map,
  imap,
  coproduct,
  coproductMany,
  coproductAll,
  zero
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Foldable = {
  reduce: /*#__PURE__*/dual(3, (self, b, f) => Option.isNone(self) ? b : f(b, self.value))
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Filterable = {
  partitionMap: Option.partitionMap,
  filterMap: Option.filterMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Traversable = {
  traverse
};
/**
 * @category instances
 * @since 0.24.0
 */
export const getOptionalMonoid = Semigroup => monoid.fromSemigroup(semigroup.make((self, that) => Option.isNone(self) ? that : Option.isNone(that) ? self : Option.some(Semigroup.combine(self.value, that.value))), Option.none());
//# sourceMappingURL=Option.js.map