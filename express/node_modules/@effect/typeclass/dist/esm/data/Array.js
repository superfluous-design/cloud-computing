/**
 * This module provides utility functions for working with arrays in TypeScript.
 *
 * @since 0.24.0
 */
import * as ArrayInstances from "effect/Array";
import { dual } from "effect/Function";
import * as covariant from "../Covariant.js";
import * as monoid from "../Monoid.js";
import * as semigroup from "../Semigroup.js";
import * as semiProduct from "../SemiProduct.js";
const of = ArrayInstances.of;
const map = ArrayInstances.map;
const imap = /*#__PURE__*/covariant.imap(map);
const flatMap = ArrayInstances.flatMap;
const product = (self, that) => {
  if (ArrayInstances.isEmptyReadonlyArray(self) || ArrayInstances.isEmptyReadonlyArray(that)) {
    return ArrayInstances.empty();
  }
  const out = [];
  for (let i = 0; i < self.length; i++) {
    for (let j = 0; j < that.length; j++) {
      out.push([self[i], that[j]]);
    }
  }
  return out;
};
const productMany = /*#__PURE__*/semiProduct.productMany(map, product);
const traverse = F => dual(2, (self, f) => F.productAll(ArrayInstances.fromIterable(self).map(f)));
const traversePartitionMap = F => dual(2, (self, f) => {
  return F.map(traverse(F)(self, f), ArrayInstances.separate);
});
const traverseFilterMap = F => dual(2, (self, f) => {
  return F.map(traverse(F)(self, f), ArrayInstances.getSomes);
});
/**
 * @category instances
 * @since 0.24.0
 */
export const Of = {
  of
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Covariant = {
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Invariant = {
  imap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Pointed = {
  of,
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.0
 */
export const FlatMap = {
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Chainable = {
  imap,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Filterable = {
  partitionMap: ArrayInstances.partitionMap,
  filterMap: ArrayInstances.filterMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Traversable = {
  traverse: traverse
};
/**
 * @category instances
 * @since 0.24.0
 */
export const SemiProduct = {
  imap,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
export const SemiApplicative = {
  imap,
  map,
  product,
  productMany
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Product = {
  of,
  imap,
  product,
  productMany,
  productAll: collection => {
    const arrays = ArrayInstances.fromIterable(collection);
    return ArrayInstances.isEmptyReadonlyArray(arrays) ? ArrayInstances.empty() : SemiProduct.productMany(arrays[0], arrays.slice(1));
  }
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Applicative = {
  imap,
  of,
  map,
  product,
  productMany,
  productAll: Product.productAll
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Monad = {
  imap,
  of,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const Foldable = {
  reduce: ArrayInstances.reduce
};
/**
 * @category instances
 * @since 0.24.0
 */
export const TraversableFilterable = {
  traversePartitionMap: traversePartitionMap,
  traverseFilterMap: traverseFilterMap
};
/**
 * @category instances
 * @since 0.24.0
 */
export const getSemigroup = semigroup.array;
/**
 * @category instances
 * @since 0.24.0
 */
export const getMonoid = monoid.array;
//# sourceMappingURL=Array.js.map