/**
 * @since 0.24.40
 */
import * as Effect from "effect/Effect";
import * as covariant from "../Covariant.js";
const of = Effect.succeed;
const map = Effect.map;
const flatMap = Effect.flatMap;
const imap = /*#__PURE__*/covariant.imap(map);
const product = options => (self, that) => Effect.all([self, that], options);
const productMany = options => (self, collection) => Effect.all([self, ...collection], options);
const productAll = options => collection => Effect.all(collection, options);
/**
 * @category instances
 * @since 0.24.40
 */
export const Covariant = {
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.40
 */
export const Invariant = {
  imap
};
/**
 * @category instances
 * @since 0.24.40
 */
export const Of = {
  of
};
/**
 * @category instances
 * @since 0.24.40
 */
export const Pointed = {
  of,
  imap,
  map
};
/**
 * @category instances
 * @since 0.24.40
 */
export const FlatMap = {
  flatMap
};
/**
 * @category instances
 * @since 0.24.40
 */
export const Chainable = {
  imap,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.40
 */
export const Monad = {
  imap,
  of,
  map,
  flatMap
};
/**
 * @category instances
 * @since 0.24.40
 */
export const getSemiProduct = options => ({
  imap,
  product: product(options),
  productMany: productMany(options)
});
/**
 * @category instances
 * @since 0.24.40
 */
export const getProduct = options => ({
  of,
  imap,
  product: product(options),
  productMany: productMany(options),
  productAll: productAll(options)
});
/**
 * @category instances
 * @since 0.24.40
 */
export const getSemiApplicative = options => ({
  imap,
  map,
  product: product(options),
  productMany: productMany(options)
});
/**
 * @category instances
 * @since 0.24.40
 */
export const getApplicative = options => ({
  imap,
  of,
  map,
  product: product(options),
  productMany: productMany(options),
  productAll: productAll(options)
});
//# sourceMappingURL=Effect.js.map