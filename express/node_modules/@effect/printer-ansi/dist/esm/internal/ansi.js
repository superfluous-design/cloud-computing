import * as Monoid from "@effect/typeclass/Monoid";
import * as Semigroup from "@effect/typeclass/Semigroup";
import * as Arr from "effect/Array";
import { dual } from "effect/Function";
import * as Option from "effect/Option";
import * as InternalColor from "./color.js";
import * as SGR from "./sgr.js";
const AnsiSymbolKey = "@effect/printer-ansi/Ansi";
/** @internal */
export const AnsiTypeId = /*#__PURE__*/Symbol.for(AnsiSymbolKey);
const make = params => ({
  ...AnsiMonoid.empty,
  ...params
});
// -----------------------------------------------------------------------------
// Instances
// -----------------------------------------------------------------------------
const typeIdSemigroup = /*#__PURE__*/Semigroup.first();
const getFirstSomeSemigroup = /*#__PURE__*/Semigroup.make((self, that) => Option.isSome(self) ? self : that);
const AnsiSemigroup = /*#__PURE__*/Semigroup.struct({
  [AnsiTypeId]: typeIdSemigroup,
  commands: /*#__PURE__*/Semigroup.array(),
  foreground: getFirstSomeSemigroup,
  background: getFirstSomeSemigroup,
  bold: getFirstSomeSemigroup,
  italicized: getFirstSomeSemigroup,
  strikethrough: getFirstSomeSemigroup,
  underlined: getFirstSomeSemigroup
});
const typeIdMonoid = /*#__PURE__*/Monoid.fromSemigroup(typeIdSemigroup, AnsiTypeId);
const monoidOrElse = /*#__PURE__*/Monoid.fromSemigroup(getFirstSomeSemigroup, /*#__PURE__*/Option.none());
const AnsiMonoid = /*#__PURE__*/Monoid.struct({
  [AnsiTypeId]: typeIdMonoid,
  commands: /*#__PURE__*/Monoid.array(),
  foreground: monoidOrElse,
  background: monoidOrElse,
  bold: monoidOrElse,
  italicized: monoidOrElse,
  strikethrough: monoidOrElse,
  underlined: monoidOrElse
});
/** @internal */
export const none = AnsiMonoid.empty;
const ESC = "\u001B[";
const BEL = "\u0007";
const SEP = ";";
// -----------------------------------------------------------------------------
// Styles
// -----------------------------------------------------------------------------
/** @internal */
export const bold = /*#__PURE__*/make({
  bold: /*#__PURE__*/Option.some(/*#__PURE__*/SGR.setBold(true))
});
/** @internal */
export const italicized = /*#__PURE__*/make({
  italicized: /*#__PURE__*/Option.some(/*#__PURE__*/SGR.setItalicized(true))
});
/** @internal */
export const strikethrough = /*#__PURE__*/make({
  strikethrough: /*#__PURE__*/Option.some(/*#__PURE__*/SGR.setStrikethrough(true))
});
/** @internal */
export const underlined = /*#__PURE__*/make({
  underlined: /*#__PURE__*/Option.some(/*#__PURE__*/SGR.setUnderlined(true))
});
// -----------------------------------------------------------------------------
// Colors
// -----------------------------------------------------------------------------
/** @internal */
export const brightColor = color => make({
  foreground: Option.some(SGR.setColor(color, true, "foreground"))
});
/** @internal */
export const color = color => make({
  foreground: Option.some(SGR.setColor(color, false, "foreground"))
});
/** @internal */
export const bgColorBright = color => make({
  background: Option.some(SGR.setColor(color, true, "background"))
});
/** @internal */
export const bgColor = color => make({
  background: Option.some(SGR.setColor(color, false, "background"))
});
/** @internal */
export const black = /*#__PURE__*/color(InternalColor.black);
/** @internal */
export const red = /*#__PURE__*/color(InternalColor.red);
/** @internal */
export const green = /*#__PURE__*/color(InternalColor.green);
/** @internal */
export const yellow = /*#__PURE__*/color(InternalColor.yellow);
/** @internal */
export const blue = /*#__PURE__*/color(InternalColor.blue);
/** @internal */
export const magenta = /*#__PURE__*/color(InternalColor.magenta);
/** @internal */
export const cyan = /*#__PURE__*/color(InternalColor.cyan);
/** @internal */
export const white = /*#__PURE__*/color(InternalColor.white);
/** @internal */
export const blackBright = /*#__PURE__*/brightColor(InternalColor.black);
/** @internal */
export const redBright = /*#__PURE__*/brightColor(InternalColor.red);
/** @internal */
export const greenBright = /*#__PURE__*/brightColor(InternalColor.green);
/** @internal */
export const yellowBright = /*#__PURE__*/brightColor(InternalColor.yellow);
/** @internal */
export const blueBright = /*#__PURE__*/brightColor(InternalColor.blue);
/** @internal */
export const magentaBright = /*#__PURE__*/brightColor(InternalColor.magenta);
/** @internal */
export const cyanBright = /*#__PURE__*/brightColor(InternalColor.cyan);
/** @internal */
export const whiteBright = /*#__PURE__*/brightColor(InternalColor.white);
/** @internal */
export const bgBlack = /*#__PURE__*/bgColor(InternalColor.black);
/** @internal */
export const bgRed = /*#__PURE__*/bgColor(InternalColor.red);
/** @internal */
export const bgGreen = /*#__PURE__*/bgColor(InternalColor.green);
/** @internal */
export const bgYellow = /*#__PURE__*/bgColor(InternalColor.yellow);
/** @internal */
export const bgBlue = /*#__PURE__*/bgColor(InternalColor.blue);
/** @internal */
export const bgMagenta = /*#__PURE__*/bgColor(InternalColor.magenta);
/** @internal */
export const bgCyan = /*#__PURE__*/bgColor(InternalColor.cyan);
/** @internal */
export const bgWhite = /*#__PURE__*/bgColor(InternalColor.white);
/** @internal */
export const bgBlackBright = /*#__PURE__*/bgColorBright(InternalColor.black);
/** @internal */
export const bgRedBright = /*#__PURE__*/bgColorBright(InternalColor.red);
/** @internal */
export const bgGreenBright = /*#__PURE__*/bgColorBright(InternalColor.green);
/** @internal */
export const bgYellowBright = /*#__PURE__*/bgColorBright(InternalColor.yellow);
/** @internal */
export const bgBlueBright = /*#__PURE__*/bgColorBright(InternalColor.blue);
/** @internal */
export const bgMagentaBright = /*#__PURE__*/bgColorBright(InternalColor.magenta);
/** @internal */
export const bgCyanBright = /*#__PURE__*/bgColorBright(InternalColor.cyan);
/** @internal */
export const bgWhiteBright = /*#__PURE__*/bgColorBright(InternalColor.white);
// -----------------------------------------------------------------------------
// Commands
// -----------------------------------------------------------------------------
/** @internal */
export const beep = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(BEL)
});
/** @internal */
export const cursorTo = (column, row) => {
  if (row === undefined) {
    const command = `${ESC}${Math.max(column + 1, 0)}G`;
    return make({
      commands: Arr.of(command)
    });
  }
  const command = `${ESC}${row + 1}${SEP}${Math.max(column + 1, 0)}H`;
  return make({
    commands: Arr.of(command)
  });
};
/** @internal */
export const cursorMove = (column, row = 0) => {
  let command = "";
  if (row < 0) {
    command += `${ESC}${-row}A`;
  }
  if (row > 0) {
    command += `${ESC}${row}B`;
  }
  if (column > 0) {
    command += `${ESC}${column}C`;
  }
  if (column < 0) {
    command += `${ESC}${-column}D`;
  }
  return make({
    commands: Arr.of(command)
  });
};
/** @internal */
export const cursorUp = (lines = 1) => {
  const command = `${ESC}${lines}A`;
  return make({
    commands: Arr.of(command)
  });
};
/** @internal */
export const cursorDown = (lines = 1) => {
  const command = `${ESC}${lines}B`;
  return make({
    commands: Arr.of(command)
  });
};
/** @internal */
export const cursorForward = (columns = 1) => {
  const command = `${ESC}${columns}C`;
  return make({
    commands: Arr.of(command)
  });
};
/** @internal */
export const cursorBackward = (columns = 1) => {
  const command = `${ESC}${columns}D`;
  return make({
    commands: Arr.of(command)
  });
};
/** @internal */
export const cursorLeft = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}G`)
});
/** @internal */
export const cursorSavePosition = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}s`)
});
/** @internal */
export const cursorRestorePosition = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}u`)
});
/** @internal */
export const cursorNextLine = (rows = 1) => make({
  commands: Arr.of(`${ESC}${rows}E`)
});
/** @internal */
export const cursorPrevLine = (rows = 1) => make({
  commands: Arr.of(`${ESC}${rows}F`)
});
/** @internal */
export const cursorHide = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}?25l`)
});
/** @internal */
export const cursorShow = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}?25h`)
});
/** @internal */
export const eraseLines = rows => {
  let command = "";
  for (let i = 0; i < rows; i++) {
    command += `${ESC}2K` + (i < rows - 1 ? `${ESC}1A` : "");
  }
  if (rows > 0) {
    command += `${ESC}G`;
  }
  return make({
    commands: Arr.of(command)
  });
};
/** @internal */
export const eraseEndLine = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}K`)
});
/** @internal */
export const eraseStartLine = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}1K`)
});
/** @internal */
export const eraseLine = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}2K`)
});
/** @internal */
export const eraseDown = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}J`)
});
/** @internal */
export const eraseUp = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}1J`)
});
/** @internal */
export const eraseScreen = /*#__PURE__*/make({
  commands: /*#__PURE__*/Arr.of(`${ESC}2J`)
});
// -----------------------------------------------------------------------------
// Destructors
// -----------------------------------------------------------------------------
/** @internal */
export const stringify = self => stringifyInternal(self);
// -----------------------------------------------------------------------------
// Combinators
// -----------------------------------------------------------------------------
/** @internal */
export const combine = /*#__PURE__*/dual(2, (self, that) => combineInternal(self, that));
// -----------------------------------------------------------------------------
// Internal
// -----------------------------------------------------------------------------
const combineInternal = (self, that) => AnsiSemigroup.combine(self, that);
const stringifyInternal = self => {
  const displaySequence = SGR.toEscapeSequence(Arr.getSomes([Option.some(SGR.reset), self.foreground, self.background, self.bold, self.italicized, self.strikethrough, self.underlined]));
  const commandSequence = Arr.join(self.commands, "");
  return `${displaySequence}${commandSequence}`;
};
//# sourceMappingURL=ansi.js.map