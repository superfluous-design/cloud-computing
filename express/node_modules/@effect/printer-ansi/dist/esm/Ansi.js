import * as InternalAnsi from "./internal/ansi.js";
// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category symbol
 */
export const AnsiTypeId = InternalAnsi.AnsiTypeId;
// -----------------------------------------------------------------------------
// Style Constructors
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category constructors
 */
export const bold = InternalAnsi.bold;
/**
 * @since 1.0.0
 * @category constructors
 */
export const italicized = InternalAnsi.italicized;
/**
 * @since 1.0.0
 * @category constructors
 */
export const strikethrough = InternalAnsi.strikethrough;
/**
 * @since 1.0.0
 * @category constructors
 */
export const underlined = InternalAnsi.underlined;
// -----------------------------------------------------------------------------
// Color Constructors
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category constructors
 */
export const color = InternalAnsi.color;
/**
 * @since 1.0.0
 * @category constructors
 */
export const brightColor = InternalAnsi.brightColor;
/**
 * @since 1.0.0
 * @category constructors
 */
export const bgColor = InternalAnsi.bgColor;
/**
 * @since 1.0.0
 * @category constructors
 */
export const bgColorBright = InternalAnsi.bgColorBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const black = InternalAnsi.black;
/**
 * @since 1.0.0
 * @category colors
 */
export const red = InternalAnsi.red;
/**
 * @since 1.0.0
 * @category colors
 */
export const green = InternalAnsi.green;
/**
 * @since 1.0.0
 * @category colors
 */
export const yellow = InternalAnsi.yellow;
/**
 * @since 1.0.0
 * @category colors
 */
export const blue = InternalAnsi.blue;
/**
 * @since 1.0.0
 * @category colors
 */
export const magenta = InternalAnsi.magenta;
/**
 * @since 1.0.0
 * @category colors
 */
export const cyan = InternalAnsi.cyan;
/**
 * @since 1.0.0
 * @category colors
 */
export const white = InternalAnsi.white;
/**
 * @since 1.0.0
 * @category colors
 */
export const blackBright = InternalAnsi.blackBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const redBright = InternalAnsi.redBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const greenBright = InternalAnsi.greenBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const yellowBright = InternalAnsi.yellowBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const blueBright = InternalAnsi.blueBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const magentaBright = InternalAnsi.magentaBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const cyanBright = InternalAnsi.cyanBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const whiteBright = InternalAnsi.whiteBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgBlack = InternalAnsi.bgBlack;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgRed = InternalAnsi.bgRed;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgGreen = InternalAnsi.bgGreen;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgYellow = InternalAnsi.bgYellow;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgBlue = InternalAnsi.bgBlue;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgMagenta = InternalAnsi.bgMagenta;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgCyan = InternalAnsi.bgCyan;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgWhite = InternalAnsi.bgWhite;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgBlackBright = InternalAnsi.bgBlackBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgRedBright = InternalAnsi.bgRedBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgGreenBright = InternalAnsi.bgGreenBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgYellowBright = InternalAnsi.bgYellowBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgBlueBright = InternalAnsi.bgBlueBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgMagentaBright = InternalAnsi.bgMagentaBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgCyanBright = InternalAnsi.bgCyanBright;
/**
 * @since 1.0.0
 * @category colors
 */
export const bgWhiteBright = InternalAnsi.bgWhiteBright;
// -----------------------------------------------------------------------------
// Command Constructors
// -----------------------------------------------------------------------------
/**
 * Play a beeping sound.
 *
 * @since 1.0.0
 * @category commands
 */
export const beep = InternalAnsi.beep;
/**
 * Moves the cursor to the specified `row` and `column`.
 *
 * Though the ANSI Control Sequence for Cursor Position is `1`-based, this
 * method takes row and column values starting from `0` and adjusts them to `1`-
 * based values.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorTo = InternalAnsi.cursorTo;
/**
 * Move the cursor position the specified number of `rows` and `columns`
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen in either direction, then
 * additional movement will have no effect.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorMove = InternalAnsi.cursorMove;
/**
 * Moves the cursor up by the specified number of `lines` (default `1`) relative
 * to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorUp = InternalAnsi.cursorUp;
/**
 * Moves the cursor down by the specified number of `lines` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorDown = InternalAnsi.cursorDown;
/**
 * Moves the cursor forward by the specified number of `columns` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorForward = InternalAnsi.cursorForward;
/**
 * Moves the cursor backward by the specified number of `columns` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorBackward = InternalAnsi.cursorBackward;
/**
 * Moves the cursor to the first column of the current row.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorLeft = InternalAnsi.cursorLeft;
/**
 * Saves the cursor position, encoding shift state and formatting attributes.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorSavePosition = InternalAnsi.cursorSavePosition;
/**
 * Restores the cursor position, encoding shift state and formatting attributes
 * from the previous save, if any, otherwise resets these all to their defaults.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorRestorePosition = InternalAnsi.cursorRestorePosition;
/**
 * Moves cursor to beginning of the line the specified number of rows down
 * (default `1`).
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorNextLine = InternalAnsi.cursorNextLine;
/**
 * Moves cursor to beginning of the line the specified number of rows up
 * (default `1`).
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorPrevLine = InternalAnsi.cursorPrevLine;
/**
 * Hides the cursor.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorHide = InternalAnsi.cursorHide;
/**
 * Shows the cursor.
 *
 * @since 1.0.0
 * @category commands
 */
export const cursorShow = InternalAnsi.cursorShow;
/**
 * Erase from the current cursor position up the specified amount of rows.
 *
 * @since 1.0.0
 * @category commands
 */
export const eraseLines = InternalAnsi.eraseLines;
/**
 * Clears from the current cursor position to the end of the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
export const eraseEndLine = InternalAnsi.eraseEndLine;
/**
 * Clears from the current cursor position to the start of the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
export const eraseStartLine = InternalAnsi.eraseStartLine;
/**
 * Clears the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
export const eraseLine = InternalAnsi.eraseLine;
/**
 * Clears from the current cursor position to the end of the screen.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
export const eraseDown = InternalAnsi.eraseDown;
/**
 * Clears from the current cursor position to the beginning of the screen.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
export const eraseUp = InternalAnsi.eraseUp;
/**
 * Clears the entire screen and move the cursor to the upper left.
 *
 * @since 1.0.0
 * @category commands
 */
export const eraseScreen = InternalAnsi.eraseScreen;
// -----------------------------------------------------------------------------
// Destructors
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category destructors
 */
export const stringify = InternalAnsi.stringify;
// -----------------------------------------------------------------------------
// Instances
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @categrory combinators
 */
export const combine = InternalAnsi.combine;
//# sourceMappingURL=Ansi.js.map