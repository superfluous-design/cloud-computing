"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Invariant", {
  enumerable: true,
  get: function () {
    return _Doc.Invariant;
  }
});
Object.defineProperty(exports, "align", {
  enumerable: true,
  get: function () {
    return _Doc.align;
  }
});
Object.defineProperty(exports, "alterAnnotations", {
  enumerable: true,
  get: function () {
    return _Doc.alterAnnotations;
  }
});
Object.defineProperty(exports, "angleBracketed", {
  enumerable: true,
  get: function () {
    return _Doc.angleBracketed;
  }
});
Object.defineProperty(exports, "annotate", {
  enumerable: true,
  get: function () {
    return _Doc.annotate;
  }
});
Object.defineProperty(exports, "backslash", {
  enumerable: true,
  get: function () {
    return _Doc.backslash;
  }
});
exports.beep = void 0;
Object.defineProperty(exports, "cat", {
  enumerable: true,
  get: function () {
    return _Doc.cat;
  }
});
Object.defineProperty(exports, "catWithLine", {
  enumerable: true,
  get: function () {
    return _Doc.catWithLine;
  }
});
Object.defineProperty(exports, "catWithLineBreak", {
  enumerable: true,
  get: function () {
    return _Doc.catWithLineBreak;
  }
});
Object.defineProperty(exports, "catWithSoftLine", {
  enumerable: true,
  get: function () {
    return _Doc.catWithSoftLine;
  }
});
Object.defineProperty(exports, "catWithSoftLineBreak", {
  enumerable: true,
  get: function () {
    return _Doc.catWithSoftLineBreak;
  }
});
Object.defineProperty(exports, "catWithSpace", {
  enumerable: true,
  get: function () {
    return _Doc.catWithSpace;
  }
});
Object.defineProperty(exports, "cats", {
  enumerable: true,
  get: function () {
    return _Doc.cats;
  }
});
Object.defineProperty(exports, "changesUponFlattening", {
  enumerable: true,
  get: function () {
    return _Doc.changesUponFlattening;
  }
});
Object.defineProperty(exports, "char", {
  enumerable: true,
  get: function () {
    return _Doc.char;
  }
});
Object.defineProperty(exports, "colon", {
  enumerable: true,
  get: function () {
    return _Doc.colon;
  }
});
Object.defineProperty(exports, "column", {
  enumerable: true,
  get: function () {
    return _Doc.column;
  }
});
Object.defineProperty(exports, "comma", {
  enumerable: true,
  get: function () {
    return _Doc.comma;
  }
});
Object.defineProperty(exports, "concatWith", {
  enumerable: true,
  get: function () {
    return _Doc.concatWith;
  }
});
Object.defineProperty(exports, "curlyBraced", {
  enumerable: true,
  get: function () {
    return _Doc.curlyBraced;
  }
});
exports.cursorUp = exports.cursorTo = exports.cursorShow = exports.cursorSavePosition = exports.cursorRestorePosition = exports.cursorPrevLine = exports.cursorNextLine = exports.cursorMove = exports.cursorLeft = exports.cursorHide = exports.cursorForward = exports.cursorDown = exports.cursorBackward = void 0;
Object.defineProperty(exports, "dot", {
  enumerable: true,
  get: function () {
    return _Doc.dot;
  }
});
Object.defineProperty(exports, "doubleQuoted", {
  enumerable: true,
  get: function () {
    return _Doc.doubleQuoted;
  }
});
Object.defineProperty(exports, "dquote", {
  enumerable: true,
  get: function () {
    return _Doc.dquote;
  }
});
Object.defineProperty(exports, "empty", {
  enumerable: true,
  get: function () {
    return _Doc.empty;
  }
});
Object.defineProperty(exports, "encloseSep", {
  enumerable: true,
  get: function () {
    return _Doc.encloseSep;
  }
});
Object.defineProperty(exports, "equalSign", {
  enumerable: true,
  get: function () {
    return _Doc.equalSign;
  }
});
exports.eraseUp = exports.eraseStartLine = exports.eraseScreen = exports.eraseLines = exports.eraseLine = exports.eraseEndLine = exports.eraseDown = void 0;
Object.defineProperty(exports, "fail", {
  enumerable: true,
  get: function () {
    return _Doc.fail;
  }
});
Object.defineProperty(exports, "fill", {
  enumerable: true,
  get: function () {
    return _Doc.fill;
  }
});
Object.defineProperty(exports, "fillBreak", {
  enumerable: true,
  get: function () {
    return _Doc.fillBreak;
  }
});
Object.defineProperty(exports, "fillCat", {
  enumerable: true,
  get: function () {
    return _Doc.fillCat;
  }
});
Object.defineProperty(exports, "fillSep", {
  enumerable: true,
  get: function () {
    return _Doc.fillSep;
  }
});
Object.defineProperty(exports, "flatAlt", {
  enumerable: true,
  get: function () {
    return _Doc.flatAlt;
  }
});
Object.defineProperty(exports, "flatten", {
  enumerable: true,
  get: function () {
    return _Doc.flatten;
  }
});
Object.defineProperty(exports, "group", {
  enumerable: true,
  get: function () {
    return _Doc.group;
  }
});
Object.defineProperty(exports, "hang", {
  enumerable: true,
  get: function () {
    return _Doc.hang;
  }
});
Object.defineProperty(exports, "hardLine", {
  enumerable: true,
  get: function () {
    return _Doc.hardLine;
  }
});
Object.defineProperty(exports, "hcat", {
  enumerable: true,
  get: function () {
    return _Doc.hcat;
  }
});
Object.defineProperty(exports, "hsep", {
  enumerable: true,
  get: function () {
    return _Doc.hsep;
  }
});
Object.defineProperty(exports, "indent", {
  enumerable: true,
  get: function () {
    return _Doc.indent;
  }
});
Object.defineProperty(exports, "isAnnotated", {
  enumerable: true,
  get: function () {
    return _Doc.isAnnotated;
  }
});
Object.defineProperty(exports, "isCat", {
  enumerable: true,
  get: function () {
    return _Doc.isCat;
  }
});
Object.defineProperty(exports, "isChar", {
  enumerable: true,
  get: function () {
    return _Doc.isChar;
  }
});
Object.defineProperty(exports, "isColumn", {
  enumerable: true,
  get: function () {
    return _Doc.isColumn;
  }
});
Object.defineProperty(exports, "isDoc", {
  enumerable: true,
  get: function () {
    return _Doc.isDoc;
  }
});
Object.defineProperty(exports, "isEmpty", {
  enumerable: true,
  get: function () {
    return _Doc.isEmpty;
  }
});
Object.defineProperty(exports, "isFail", {
  enumerable: true,
  get: function () {
    return _Doc.isFail;
  }
});
Object.defineProperty(exports, "isFlatAlt", {
  enumerable: true,
  get: function () {
    return _Doc.isFlatAlt;
  }
});
Object.defineProperty(exports, "isLine", {
  enumerable: true,
  get: function () {
    return _Doc.isLine;
  }
});
Object.defineProperty(exports, "isNest", {
  enumerable: true,
  get: function () {
    return _Doc.isNest;
  }
});
Object.defineProperty(exports, "isNesting", {
  enumerable: true,
  get: function () {
    return _Doc.isNesting;
  }
});
Object.defineProperty(exports, "isText", {
  enumerable: true,
  get: function () {
    return _Doc.isText;
  }
});
Object.defineProperty(exports, "isUnion", {
  enumerable: true,
  get: function () {
    return _Doc.isUnion;
  }
});
Object.defineProperty(exports, "isWithPageWidth", {
  enumerable: true,
  get: function () {
    return _Doc.isWithPageWidth;
  }
});
Object.defineProperty(exports, "langle", {
  enumerable: true,
  get: function () {
    return _Doc.langle;
  }
});
Object.defineProperty(exports, "lbrace", {
  enumerable: true,
  get: function () {
    return _Doc.lbrace;
  }
});
Object.defineProperty(exports, "lbracket", {
  enumerable: true,
  get: function () {
    return _Doc.lbracket;
  }
});
Object.defineProperty(exports, "line", {
  enumerable: true,
  get: function () {
    return _Doc.line;
  }
});
Object.defineProperty(exports, "lineBreak", {
  enumerable: true,
  get: function () {
    return _Doc.lineBreak;
  }
});
Object.defineProperty(exports, "list", {
  enumerable: true,
  get: function () {
    return _Doc.list;
  }
});
Object.defineProperty(exports, "lparen", {
  enumerable: true,
  get: function () {
    return _Doc.lparen;
  }
});
Object.defineProperty(exports, "map", {
  enumerable: true,
  get: function () {
    return _Doc.map;
  }
});
Object.defineProperty(exports, "match", {
  enumerable: true,
  get: function () {
    return _Doc.match;
  }
});
Object.defineProperty(exports, "nest", {
  enumerable: true,
  get: function () {
    return _Doc.nest;
  }
});
Object.defineProperty(exports, "nesting", {
  enumerable: true,
  get: function () {
    return _Doc.nesting;
  }
});
Object.defineProperty(exports, "pageWidth", {
  enumerable: true,
  get: function () {
    return _Doc.pageWidth;
  }
});
Object.defineProperty(exports, "parenthesized", {
  enumerable: true,
  get: function () {
    return _Doc.parenthesized;
  }
});
Object.defineProperty(exports, "punctuate", {
  enumerable: true,
  get: function () {
    return _Doc.punctuate;
  }
});
Object.defineProperty(exports, "rangle", {
  enumerable: true,
  get: function () {
    return _Doc.rangle;
  }
});
Object.defineProperty(exports, "rbrace", {
  enumerable: true,
  get: function () {
    return _Doc.rbrace;
  }
});
Object.defineProperty(exports, "rbracket", {
  enumerable: true,
  get: function () {
    return _Doc.rbracket;
  }
});
Object.defineProperty(exports, "reAnnotate", {
  enumerable: true,
  get: function () {
    return _Doc.reAnnotate;
  }
});
Object.defineProperty(exports, "reflow", {
  enumerable: true,
  get: function () {
    return _Doc.reflow;
  }
});
exports.render = void 0;
Object.defineProperty(exports, "rparen", {
  enumerable: true,
  get: function () {
    return _Doc.rparen;
  }
});
Object.defineProperty(exports, "semi", {
  enumerable: true,
  get: function () {
    return _Doc.semi;
  }
});
Object.defineProperty(exports, "seps", {
  enumerable: true,
  get: function () {
    return _Doc.seps;
  }
});
Object.defineProperty(exports, "singleQuoted", {
  enumerable: true,
  get: function () {
    return _Doc.singleQuoted;
  }
});
Object.defineProperty(exports, "slash", {
  enumerable: true,
  get: function () {
    return _Doc.slash;
  }
});
Object.defineProperty(exports, "softLine", {
  enumerable: true,
  get: function () {
    return _Doc.softLine;
  }
});
Object.defineProperty(exports, "softLineBreak", {
  enumerable: true,
  get: function () {
    return _Doc.softLineBreak;
  }
});
Object.defineProperty(exports, "space", {
  enumerable: true,
  get: function () {
    return _Doc.space;
  }
});
Object.defineProperty(exports, "spaces", {
  enumerable: true,
  get: function () {
    return _Doc.spaces;
  }
});
Object.defineProperty(exports, "squareBracketed", {
  enumerable: true,
  get: function () {
    return _Doc.squareBracketed;
  }
});
Object.defineProperty(exports, "squote", {
  enumerable: true,
  get: function () {
    return _Doc.squote;
  }
});
Object.defineProperty(exports, "string", {
  enumerable: true,
  get: function () {
    return _Doc.string;
  }
});
Object.defineProperty(exports, "surround", {
  enumerable: true,
  get: function () {
    return _Doc.surround;
  }
});
Object.defineProperty(exports, "text", {
  enumerable: true,
  get: function () {
    return _Doc.text;
  }
});
Object.defineProperty(exports, "textSpaces", {
  enumerable: true,
  get: function () {
    return _Doc.textSpaces;
  }
});
Object.defineProperty(exports, "tupled", {
  enumerable: true,
  get: function () {
    return _Doc.tupled;
  }
});
Object.defineProperty(exports, "unAnnotate", {
  enumerable: true,
  get: function () {
    return _Doc.unAnnotate;
  }
});
Object.defineProperty(exports, "union", {
  enumerable: true,
  get: function () {
    return _Doc.union;
  }
});
Object.defineProperty(exports, "vbar", {
  enumerable: true,
  get: function () {
    return _Doc.vbar;
  }
});
Object.defineProperty(exports, "vcat", {
  enumerable: true,
  get: function () {
    return _Doc.vcat;
  }
});
Object.defineProperty(exports, "vsep", {
  enumerable: true,
  get: function () {
    return _Doc.vsep;
  }
});
Object.defineProperty(exports, "width", {
  enumerable: true,
  get: function () {
    return _Doc.width;
  }
});
Object.defineProperty(exports, "words", {
  enumerable: true,
  get: function () {
    return _Doc.words;
  }
});
var InternalAnsiDoc = _interopRequireWildcard(require("./internal/ansiDoc.js"));
var InternalAnsiRender = _interopRequireWildcard(require("./internal/ansiRender.js"));
var _Doc = require("@effect/printer/Doc");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// -----------------------------------------------------------------------------
// Constructors
// -----------------------------------------------------------------------------
/**
 * Play a beeping sound.
 *
 * @since 1.0.0
 * @category constructors
 */
const beep = exports.beep = InternalAnsiDoc.beep;
/**
 * Moves the cursor to the specified `row` and `column`.
 *
 * Though the ANSI Control Sequence for Cursor Position is `1`-based, this
 * method takes row and column values starting from `0` and adjusts them to `1`-
 * based values.
 *
 * @since 1.0.0
 * @category constructors
 */
const cursorTo = exports.cursorTo = InternalAnsiDoc.cursorTo;
/**
 * Move the cursor position the specified number of `rows` and `columns`
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen in either direction, then
 * additional movement will have no effect.
 *
 * @since 1.0.0
 * @category constructors
 */
const cursorMove = exports.cursorMove = InternalAnsiDoc.cursorMove;
/**
 * Moves the cursor up by the specified number of `lines` (default `1`) relative
 * to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorUp = exports.cursorUp = InternalAnsiDoc.cursorUp;
/**
 * Moves the cursor down by the specified number of `lines` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorDown = exports.cursorDown = InternalAnsiDoc.cursorDown;
/**
 * Moves the cursor forward by the specified number of `columns` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorForward = exports.cursorForward = InternalAnsiDoc.cursorForward;
/**
 * Moves the cursor backward by the specified number of `columns` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorBackward = exports.cursorBackward = InternalAnsiDoc.cursorBackward;
/**
 * Moves the cursor to the first column of the current row.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorLeft = exports.cursorLeft = InternalAnsiDoc.cursorLeft;
/**
 * Saves the cursor position, encoding shift state and formatting attributes.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorSavePosition = exports.cursorSavePosition = InternalAnsiDoc.cursorSavePosition;
/**
 * Restores the cursor position, encoding shift state and formatting attributes
 * from the previous save, if any, otherwise resets these all to their defaults.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorRestorePosition = exports.cursorRestorePosition = InternalAnsiDoc.cursorRestorePosition;
/**
 * Moves cursor to beginning of the line the specified number of rows down
 * (default `1`).
 *
 * @since 1.0.0
 * @category commands
 */
const cursorNextLine = exports.cursorNextLine = InternalAnsiDoc.cursorNextLine;
/**
 * Moves cursor to beginning of the line the specified number of rows up
 * (default `1`).
 *
 * @since 1.0.0
 * @category commands
 */
const cursorPrevLine = exports.cursorPrevLine = InternalAnsiDoc.cursorPrevLine;
/**
 * Hides the cursor.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorHide = exports.cursorHide = InternalAnsiDoc.cursorHide;
/**
 * Shows the cursor.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorShow = exports.cursorShow = InternalAnsiDoc.cursorShow;
/**
 * Erase from the current cursor position up the specified amount of rows.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseLines = exports.eraseLines = InternalAnsiDoc.eraseLines;
/**
 * Clears from the current cursor position to the end of the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseEndLine = exports.eraseEndLine = InternalAnsiDoc.eraseEndLine;
/**
 * Clears from the current cursor position to the start of the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseStartLine = exports.eraseStartLine = InternalAnsiDoc.eraseStartLine;
/**
 * Clears the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseLine = exports.eraseLine = InternalAnsiDoc.eraseLine;
/**
 * Clears from the current cursor position to the end of the screen.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseDown = exports.eraseDown = InternalAnsiDoc.eraseDown;
/**
 * Clears from the current cursor position to the beginning of the screen.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseUp = exports.eraseUp = InternalAnsiDoc.eraseUp;
/**
 * Clears the entire screen and move the cursor to the upper left.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseScreen = exports.eraseScreen = InternalAnsiDoc.eraseScreen;
// -----------------------------------------------------------------------------
// Destructors
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category destructors
 */
const render = exports.render = InternalAnsiRender.render;
//# sourceMappingURL=AnsiDoc.js.map