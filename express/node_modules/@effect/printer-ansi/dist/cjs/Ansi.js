"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.yellowBright = exports.yellow = exports.whiteBright = exports.white = exports.underlined = exports.stringify = exports.strikethrough = exports.redBright = exports.red = exports.magentaBright = exports.magenta = exports.italicized = exports.greenBright = exports.green = exports.eraseUp = exports.eraseStartLine = exports.eraseScreen = exports.eraseLines = exports.eraseLine = exports.eraseEndLine = exports.eraseDown = exports.cyanBright = exports.cyan = exports.cursorUp = exports.cursorTo = exports.cursorShow = exports.cursorSavePosition = exports.cursorRestorePosition = exports.cursorPrevLine = exports.cursorNextLine = exports.cursorMove = exports.cursorLeft = exports.cursorHide = exports.cursorForward = exports.cursorDown = exports.cursorBackward = exports.combine = exports.color = exports.brightColor = exports.bold = exports.blueBright = exports.blue = exports.blackBright = exports.black = exports.bgYellowBright = exports.bgYellow = exports.bgWhiteBright = exports.bgWhite = exports.bgRedBright = exports.bgRed = exports.bgMagentaBright = exports.bgMagenta = exports.bgGreenBright = exports.bgGreen = exports.bgCyanBright = exports.bgCyan = exports.bgColorBright = exports.bgColor = exports.bgBlueBright = exports.bgBlue = exports.bgBlackBright = exports.bgBlack = exports.beep = exports.AnsiTypeId = void 0;
var InternalAnsi = _interopRequireWildcard(require("./internal/ansi.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category symbol
 */
const AnsiTypeId = exports.AnsiTypeId = InternalAnsi.AnsiTypeId;
// -----------------------------------------------------------------------------
// Style Constructors
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category constructors
 */
const bold = exports.bold = InternalAnsi.bold;
/**
 * @since 1.0.0
 * @category constructors
 */
const italicized = exports.italicized = InternalAnsi.italicized;
/**
 * @since 1.0.0
 * @category constructors
 */
const strikethrough = exports.strikethrough = InternalAnsi.strikethrough;
/**
 * @since 1.0.0
 * @category constructors
 */
const underlined = exports.underlined = InternalAnsi.underlined;
// -----------------------------------------------------------------------------
// Color Constructors
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category constructors
 */
const color = exports.color = InternalAnsi.color;
/**
 * @since 1.0.0
 * @category constructors
 */
const brightColor = exports.brightColor = InternalAnsi.brightColor;
/**
 * @since 1.0.0
 * @category constructors
 */
const bgColor = exports.bgColor = InternalAnsi.bgColor;
/**
 * @since 1.0.0
 * @category constructors
 */
const bgColorBright = exports.bgColorBright = InternalAnsi.bgColorBright;
/**
 * @since 1.0.0
 * @category colors
 */
const black = exports.black = InternalAnsi.black;
/**
 * @since 1.0.0
 * @category colors
 */
const red = exports.red = InternalAnsi.red;
/**
 * @since 1.0.0
 * @category colors
 */
const green = exports.green = InternalAnsi.green;
/**
 * @since 1.0.0
 * @category colors
 */
const yellow = exports.yellow = InternalAnsi.yellow;
/**
 * @since 1.0.0
 * @category colors
 */
const blue = exports.blue = InternalAnsi.blue;
/**
 * @since 1.0.0
 * @category colors
 */
const magenta = exports.magenta = InternalAnsi.magenta;
/**
 * @since 1.0.0
 * @category colors
 */
const cyan = exports.cyan = InternalAnsi.cyan;
/**
 * @since 1.0.0
 * @category colors
 */
const white = exports.white = InternalAnsi.white;
/**
 * @since 1.0.0
 * @category colors
 */
const blackBright = exports.blackBright = InternalAnsi.blackBright;
/**
 * @since 1.0.0
 * @category colors
 */
const redBright = exports.redBright = InternalAnsi.redBright;
/**
 * @since 1.0.0
 * @category colors
 */
const greenBright = exports.greenBright = InternalAnsi.greenBright;
/**
 * @since 1.0.0
 * @category colors
 */
const yellowBright = exports.yellowBright = InternalAnsi.yellowBright;
/**
 * @since 1.0.0
 * @category colors
 */
const blueBright = exports.blueBright = InternalAnsi.blueBright;
/**
 * @since 1.0.0
 * @category colors
 */
const magentaBright = exports.magentaBright = InternalAnsi.magentaBright;
/**
 * @since 1.0.0
 * @category colors
 */
const cyanBright = exports.cyanBright = InternalAnsi.cyanBright;
/**
 * @since 1.0.0
 * @category colors
 */
const whiteBright = exports.whiteBright = InternalAnsi.whiteBright;
/**
 * @since 1.0.0
 * @category colors
 */
const bgBlack = exports.bgBlack = InternalAnsi.bgBlack;
/**
 * @since 1.0.0
 * @category colors
 */
const bgRed = exports.bgRed = InternalAnsi.bgRed;
/**
 * @since 1.0.0
 * @category colors
 */
const bgGreen = exports.bgGreen = InternalAnsi.bgGreen;
/**
 * @since 1.0.0
 * @category colors
 */
const bgYellow = exports.bgYellow = InternalAnsi.bgYellow;
/**
 * @since 1.0.0
 * @category colors
 */
const bgBlue = exports.bgBlue = InternalAnsi.bgBlue;
/**
 * @since 1.0.0
 * @category colors
 */
const bgMagenta = exports.bgMagenta = InternalAnsi.bgMagenta;
/**
 * @since 1.0.0
 * @category colors
 */
const bgCyan = exports.bgCyan = InternalAnsi.bgCyan;
/**
 * @since 1.0.0
 * @category colors
 */
const bgWhite = exports.bgWhite = InternalAnsi.bgWhite;
/**
 * @since 1.0.0
 * @category colors
 */
const bgBlackBright = exports.bgBlackBright = InternalAnsi.bgBlackBright;
/**
 * @since 1.0.0
 * @category colors
 */
const bgRedBright = exports.bgRedBright = InternalAnsi.bgRedBright;
/**
 * @since 1.0.0
 * @category colors
 */
const bgGreenBright = exports.bgGreenBright = InternalAnsi.bgGreenBright;
/**
 * @since 1.0.0
 * @category colors
 */
const bgYellowBright = exports.bgYellowBright = InternalAnsi.bgYellowBright;
/**
 * @since 1.0.0
 * @category colors
 */
const bgBlueBright = exports.bgBlueBright = InternalAnsi.bgBlueBright;
/**
 * @since 1.0.0
 * @category colors
 */
const bgMagentaBright = exports.bgMagentaBright = InternalAnsi.bgMagentaBright;
/**
 * @since 1.0.0
 * @category colors
 */
const bgCyanBright = exports.bgCyanBright = InternalAnsi.bgCyanBright;
/**
 * @since 1.0.0
 * @category colors
 */
const bgWhiteBright = exports.bgWhiteBright = InternalAnsi.bgWhiteBright;
// -----------------------------------------------------------------------------
// Command Constructors
// -----------------------------------------------------------------------------
/**
 * Play a beeping sound.
 *
 * @since 1.0.0
 * @category commands
 */
const beep = exports.beep = InternalAnsi.beep;
/**
 * Moves the cursor to the specified `row` and `column`.
 *
 * Though the ANSI Control Sequence for Cursor Position is `1`-based, this
 * method takes row and column values starting from `0` and adjusts them to `1`-
 * based values.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorTo = exports.cursorTo = InternalAnsi.cursorTo;
/**
 * Move the cursor position the specified number of `rows` and `columns`
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen in either direction, then
 * additional movement will have no effect.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorMove = exports.cursorMove = InternalAnsi.cursorMove;
/**
 * Moves the cursor up by the specified number of `lines` (default `1`) relative
 * to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorUp = exports.cursorUp = InternalAnsi.cursorUp;
/**
 * Moves the cursor down by the specified number of `lines` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorDown = exports.cursorDown = InternalAnsi.cursorDown;
/**
 * Moves the cursor forward by the specified number of `columns` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorForward = exports.cursorForward = InternalAnsi.cursorForward;
/**
 * Moves the cursor backward by the specified number of `columns` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorBackward = exports.cursorBackward = InternalAnsi.cursorBackward;
/**
 * Moves the cursor to the first column of the current row.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorLeft = exports.cursorLeft = InternalAnsi.cursorLeft;
/**
 * Saves the cursor position, encoding shift state and formatting attributes.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorSavePosition = exports.cursorSavePosition = InternalAnsi.cursorSavePosition;
/**
 * Restores the cursor position, encoding shift state and formatting attributes
 * from the previous save, if any, otherwise resets these all to their defaults.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorRestorePosition = exports.cursorRestorePosition = InternalAnsi.cursorRestorePosition;
/**
 * Moves cursor to beginning of the line the specified number of rows down
 * (default `1`).
 *
 * @since 1.0.0
 * @category commands
 */
const cursorNextLine = exports.cursorNextLine = InternalAnsi.cursorNextLine;
/**
 * Moves cursor to beginning of the line the specified number of rows up
 * (default `1`).
 *
 * @since 1.0.0
 * @category commands
 */
const cursorPrevLine = exports.cursorPrevLine = InternalAnsi.cursorPrevLine;
/**
 * Hides the cursor.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorHide = exports.cursorHide = InternalAnsi.cursorHide;
/**
 * Shows the cursor.
 *
 * @since 1.0.0
 * @category commands
 */
const cursorShow = exports.cursorShow = InternalAnsi.cursorShow;
/**
 * Erase from the current cursor position up the specified amount of rows.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseLines = exports.eraseLines = InternalAnsi.eraseLines;
/**
 * Clears from the current cursor position to the end of the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseEndLine = exports.eraseEndLine = InternalAnsi.eraseEndLine;
/**
 * Clears from the current cursor position to the start of the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseStartLine = exports.eraseStartLine = InternalAnsi.eraseStartLine;
/**
 * Clears the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseLine = exports.eraseLine = InternalAnsi.eraseLine;
/**
 * Clears from the current cursor position to the end of the screen.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseDown = exports.eraseDown = InternalAnsi.eraseDown;
/**
 * Clears from the current cursor position to the beginning of the screen.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseUp = exports.eraseUp = InternalAnsi.eraseUp;
/**
 * Clears the entire screen and move the cursor to the upper left.
 *
 * @since 1.0.0
 * @category commands
 */
const eraseScreen = exports.eraseScreen = InternalAnsi.eraseScreen;
// -----------------------------------------------------------------------------
// Destructors
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category destructors
 */
const stringify = exports.stringify = InternalAnsi.stringify;
// -----------------------------------------------------------------------------
// Instances
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @categrory combinators
 */
const combine = exports.combine = InternalAnsi.combine;
//# sourceMappingURL=Ansi.js.map