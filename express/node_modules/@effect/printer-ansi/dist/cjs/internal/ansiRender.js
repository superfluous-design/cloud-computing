"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderStream = exports.render = void 0;
var Layout = _interopRequireWildcard(require("@effect/printer/Layout"));
var PageWidth = _interopRequireWildcard(require("@effect/printer/PageWidth"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var _Function = require("effect/Function");
var List = _interopRequireWildcard(require("effect/List"));
var InternalAnsi = _interopRequireWildcard(require("./ansi.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// -----------------------------------------------------------------------------
// Rendering Algorithms
// -----------------------------------------------------------------------------
/** @internal */
const render = exports.render = /*#__PURE__*/(0, _Function.dual)(2, (self, config) => {
  switch (config.style) {
    case "compact":
      {
        return renderStream(Layout.compact(self));
      }
    case "pretty":
      {
        const width = Object.assign({}, PageWidth.defaultPageWidth, config.options);
        return renderStream(Layout.pretty(self, Layout.options(width)));
      }
    case "smart":
      {
        const width = Object.assign({}, PageWidth.defaultPageWidth, config.options);
        return renderStream(Layout.smart(self, Layout.options(width)));
      }
  }
});
/** @internal */
const renderStream = self => Effect.runSync(renderSafe(self, List.of(InternalAnsi.none)));
exports.renderStream = renderStream;
const unsafePeek = stack => {
  if (List.isNil(stack)) {
    throw new Error("BUG: AnsiRender.unsafePeek - peeked at an empty stack" + " - please report an issue at https://github.com/Effect-TS/printer/issues");
  }
  return stack.head;
};
const unsafePop = stack => {
  if (List.isNil(stack)) {
    throw new Error("BUG: AnsiRender.unsafePop - popped from an empty stack" + " - please report an issue at https://github.com/Effect-TS/printer/issues");
  }
  return [stack.head, stack.tail];
};
const renderSafe = (self, stack) => {
  switch (self._tag) {
    case "FailedStream":
      {
        return Effect.dieMessage("BUG: AnsiRender.renderSafe - attempted to render a failed doc stream" + " - please report an issue at https://github.com/Effect-TS/printer/issues");
      }
    case "EmptyStream":
      {
        return Effect.succeed("");
      }
    case "CharStream":
      {
        return Effect.map(Effect.suspend(() => renderSafe(self.stream, stack)), rest => self.char + rest);
      }
    case "TextStream":
      {
        return Effect.map(Effect.suspend(() => renderSafe(self.stream, stack)), rest => self.text + rest);
      }
    case "LineStream":
      {
        let indent = "\n";
        for (let i = 0; i < self.indentation; i++) {
          indent = indent += " ";
        }
        return Effect.map(Effect.suspend(() => renderSafe(self.stream, stack)), rest => indent + rest);
      }
    case "PushAnnotationStream":
      {
        const currentStyle = unsafePeek(stack);
        const nextStyle = InternalAnsi.combine(self.annotation, currentStyle);
        return Effect.map(Effect.suspend(() => renderSafe(self.stream, List.cons(self.annotation, stack))), rest => InternalAnsi.stringify(nextStyle) + rest);
      }
    case "PopAnnotationStream":
      {
        const [, styles] = unsafePop(stack);
        const nextStyle = unsafePeek(styles);
        return Effect.map(Effect.suspend(() => renderSafe(self.stream, styles)), rest => InternalAnsi.stringify(nextStyle) + rest);
      }
  }
};
//# sourceMappingURL=ansiRender.js.map