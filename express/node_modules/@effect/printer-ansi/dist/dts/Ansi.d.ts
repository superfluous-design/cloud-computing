/**
 * @since 1.0.0
 */
import type { Color } from "./Color.js";
/**
 * @since 1.0.0
 * @category symbol
 */
export declare const AnsiTypeId: unique symbol;
/**
 * @since 1.0.0
 * @category symbol
 */
export type AnsiTypeId = typeof AnsiTypeId;
/**
 * @since 1.0.0
 * @category model
 */
export interface Ansi extends Ansi.Proto {
}
/**
 * @since 1.0.0
 */
export declare namespace Ansi {
    /**
     * @since 1.0.0
     * @category model
     */
    interface Proto {
        readonly [AnsiTypeId]: AnsiTypeId;
    }
}
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const bold: Ansi;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const italicized: Ansi;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const strikethrough: Ansi;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const underlined: Ansi;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const color: (color: Color) => Ansi;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const brightColor: (color: Color) => Ansi;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const bgColor: (color: Color) => Ansi;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const bgColorBright: (color: Color) => Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const black: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const red: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const green: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const yellow: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const blue: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const magenta: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const cyan: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const white: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const blackBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const redBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const greenBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const yellowBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const blueBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const magentaBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const cyanBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const whiteBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgBlack: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgRed: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgGreen: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgYellow: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgBlue: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgMagenta: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgCyan: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgWhite: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgBlackBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgRedBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgGreenBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgYellowBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgBlueBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgMagentaBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgCyanBright: Ansi;
/**
 * @since 1.0.0
 * @category colors
 */
export declare const bgWhiteBright: Ansi;
/**
 * Play a beeping sound.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const beep: Ansi;
/**
 * Moves the cursor to the specified `row` and `column`.
 *
 * Though the ANSI Control Sequence for Cursor Position is `1`-based, this
 * method takes row and column values starting from `0` and adjusts them to `1`-
 * based values.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorTo: (column: number, row?: number) => Ansi;
/**
 * Move the cursor position the specified number of `rows` and `columns`
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen in either direction, then
 * additional movement will have no effect.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorMove: (column: number, row?: number) => Ansi;
/**
 * Moves the cursor up by the specified number of `lines` (default `1`) relative
 * to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorUp: (lines?: number) => Ansi;
/**
 * Moves the cursor down by the specified number of `lines` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorDown: (lines?: number) => Ansi;
/**
 * Moves the cursor forward by the specified number of `columns` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorForward: (columns?: number) => Ansi;
/**
 * Moves the cursor backward by the specified number of `columns` (default `1`)
 * relative to the current cursor position.
 *
 * If the cursor is already at the edge of the screen, this has no effect.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorBackward: (columns?: number) => Ansi;
/**
 * Moves the cursor to the first column of the current row.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorLeft: Ansi;
/**
 * Saves the cursor position, encoding shift state and formatting attributes.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorSavePosition: Ansi;
/**
 * Restores the cursor position, encoding shift state and formatting attributes
 * from the previous save, if any, otherwise resets these all to their defaults.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorRestorePosition: Ansi;
/**
 * Moves cursor to beginning of the line the specified number of rows down
 * (default `1`).
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorNextLine: (rows?: number) => Ansi;
/**
 * Moves cursor to beginning of the line the specified number of rows up
 * (default `1`).
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorPrevLine: (rows?: number) => Ansi;
/**
 * Hides the cursor.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorHide: Ansi;
/**
 * Shows the cursor.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const cursorShow: Ansi;
/**
 * Erase from the current cursor position up the specified amount of rows.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const eraseLines: (rows: number) => Ansi;
/**
 * Clears from the current cursor position to the end of the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const eraseEndLine: Ansi;
/**
 * Clears from the current cursor position to the start of the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const eraseStartLine: Ansi;
/**
 * Clears the current line.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const eraseLine: Ansi;
/**
 * Clears from the current cursor position to the end of the screen.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const eraseDown: Ansi;
/**
 * Clears from the current cursor position to the beginning of the screen.
 *
 * The current cursor position does not change.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const eraseUp: Ansi;
/**
 * Clears the entire screen and move the cursor to the upper left.
 *
 * @since 1.0.0
 * @category commands
 */
export declare const eraseScreen: Ansi;
/**
 * @since 1.0.0
 * @category destructors
 */
export declare const stringify: (self: Ansi) => string;
/**
 * @since 1.0.0
 * @categrory combinators
 */
export declare const combine: {
    /**
     * @since 1.0.0
     * @categrory combinators
     */
    (that: Ansi): (self: Ansi) => Ansi;
    /**
     * @since 1.0.0
     * @categrory combinators
     */
    (self: Ansi, that: Ansi): Ansi;
};
//# sourceMappingURL=Ansi.d.ts.map