"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unAnnotate = exports.treeForm = exports.text = exports.renderSimplyDecorated = exports.reAnnotate = exports.line = exports.isTextTree = exports.isLineTree = exports.isEmptyTree = exports.isDocTree = exports.isConcatTree = exports.isCharTree = exports.isAnnotationTree = exports.getSemigroup = exports.getMonoid = exports.foldMap = exports.empty = exports.concat = exports.char = exports.annotation = exports.alterAnnotations = exports.Invariant = exports.DocTreeTypeId = exports.Covariant = void 0;
var internal = _interopRequireWildcard(require("./internal/docTree.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category symbol
 */
const DocTreeTypeId = exports.DocTreeTypeId = internal.DocTreeTypeId;
// -----------------------------------------------------------------------------
// Refinements
// -----------------------------------------------------------------------------
/**
 * Returns `true` if the specified value is a `DocTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isDocTree = exports.isDocTree = internal.isDocTree;
/**
 * Returns `true` if the specified `DocTree` is an `EmptyTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isEmptyTree = exports.isEmptyTree = internal.isEmptyTree;
/**
 * Returns `true` if the specified `DocTree` is an `CharTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isCharTree = exports.isCharTree = internal.isCharTree;
/**
 * Returns `true` if the specified `DocTree` is an `TextTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isTextTree = exports.isTextTree = internal.isTextTree;
/**
 * Returns `true` if the specified `DocTree` is an `LineTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isLineTree = exports.isLineTree = internal.isLineTree;
/**
 * Returns `true` if the specified `DocTree` is an `AnnotationTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isAnnotationTree = exports.isAnnotationTree = internal.isAnnotationTree;
/**
 * Returns `true` if the specified `DocTree` is an `ConcatTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isConcatTree = exports.isConcatTree = internal.isConcatTree;
// -----------------------------------------------------------------------------
// Constructors
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category constructors
 */
const empty = exports.empty = internal.empty;
/**
 * @since 1.0.0
 * @category constructors
 */
const char = exports.char = internal.char;
/**
 * @since 1.0.0
 * @category constructors
 */
const text = exports.text = internal.text;
/**
 * @since 1.0.0
 * @category constructors
 */
const line = exports.line = internal.line;
/**
 * Annotate the specified `DocTree` with an annotation of type `A`.
 *
 * @since 1.0.0
 * @category constructors
 */
const annotation = exports.annotation = internal.annotation;
/**
 * Horizontally concatenates multiple `DocTree`s.
 *
 * @since 1.0.0
 * @category constructors
 */
const concat = exports.concat = internal.concat;
// -----------------------------------------------------------------------------
// Annotations
// -----------------------------------------------------------------------------
/**
 * Change the annotation of a document to a different annotation, or none at
 * all.
 *
 * @since 1.0.0
 * @category annotations
 */
const alterAnnotations = exports.alterAnnotations = internal.alterAnnotations;
/**
 * Change the annotation of a `DocTree`.
 *
 * @since 1.0.0
 * @category annotations
 */
const reAnnotate = exports.reAnnotate = internal.reAnnotate;
/**
 * Remove all annotations from a `DocTree`.
 *
 * @since 1.0.0
 * @category annotations
 */
const unAnnotate = exports.unAnnotate = internal.unAnnotate;
// -----------------------------------------------------------------------------
// Folding
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category folding
 */
const foldMap = exports.foldMap = internal.foldMap;
// -----------------------------------------------------------------------------
// Instances
// -----------------------------------------------------------------------------
/**
 * The simplest possible tree-based renderer.
 *
 * For example, here is a document annotated with `void` and thee behavior is
 * to surround annotated regions with »>>>« and »<<<«.
 *
 * @example
 * ```ts
 * import * as assert from "node:assert"
 * import * as Doc from "@effect/printer/Doc"
 * import * as DocTree from "@effect/printer/DocTree"
 * import * as Layout from "@effect/printer/Layout"
 * import { identity, pipe } from "effect/Function"
 * import * as String from "@effect/typeclass/data/String"
 *
 * const doc: Doc.Doc<void> = Doc.hsep([
 *   Doc.text("hello"),
 *   pipe(
 *     Doc.text("world"),
 *     Doc.annotate(undefined),
 *     Doc.cat(Doc.char("!"))
 *   )
 * ])
 *
 * const tree = DocTree.treeForm(Layout.pretty(Layout.defaultOptions)(doc))
 *
 * const rendered = pipe(
 *   tree,
 *   DocTree.renderSimplyDecorated(String.Monoid, identity, (_, x) => `>>>${x}<<<`)
 * )
 *
 * assert.strictEqual(
 *   rendered,
 *   "hello >>>world<<<!"
 * )
 * ```
 *
 * @since 1.0.0
 * @category rendering
 */
const renderSimplyDecorated = exports.renderSimplyDecorated = internal.renderSimplyDecorated;
// -----------------------------------------------------------------------------
// Conversions
// -----------------------------------------------------------------------------
/**
 * Converts a `DocStream<A>` into a `DocTree<A>`.
 *
 * @since 1.0.0
 * @category conversions
 */
const treeForm = exports.treeForm = internal.treeForm;
// -----------------------------------------------------------------------------
// Instances
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category instances
 */
const getSemigroup = exports.getSemigroup = internal.getSemigroup;
/**
 * @since 1.0.0
 * @category instances
 */
const getMonoid = exports.getMonoid = internal.getMonoid;
/**
 * @since 1.0.0
 * @category instances
 */
const Covariant = exports.Covariant = internal.Covariant;
/**
 * @since 1.0.0
 * @category instances
 */
const Invariant = exports.Invariant = internal.Invariant;
//# sourceMappingURL=DocTree.js.map