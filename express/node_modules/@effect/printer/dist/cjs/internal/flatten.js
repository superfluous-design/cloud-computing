"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.neverFlat = exports.map = exports.isNeverFlat = exports.isFlattened = exports.isFlatten = exports.isAlreadyFlat = exports.flattened = exports.alreadyFlat = exports.FlattenTypeId = void 0;
var Equal = _interopRequireWildcard(require("effect/Equal"));
var _Function = require("effect/Function");
var Hash = _interopRequireWildcard(require("effect/Hash"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------
const FlattenSymbolKey = "@effect/printer/Flatten";
/** @internal */
const FlattenTypeId = exports.FlattenTypeId = /*#__PURE__*/Symbol.for(FlattenSymbolKey);
const protoHash = {
  Flattened: self => Hash.combine(Hash.hash(self.value))(Hash.string(FlattenSymbolKey)),
  AlreadyFlat: _ => Hash.combine(Hash.string("@effect/printer/Flattened/AlreadyFlat"))(Hash.string(FlattenSymbolKey)),
  NeverFlat: _ => Hash.combine(Hash.string("@effect/printer/Flattened/NeverFlat"))(Hash.string(FlattenSymbolKey))
};
const protoEqual = {
  Flattened: (self, that) => isFlatten(that) && that._tag === "Flattened" && Equal.equals(self.value, that.value),
  AlreadyFlat: (_, that) => isFlatten(that) && that._tag === "AlreadyFlat",
  NeverFlat: (_, that) => isFlatten(that) && that._tag === "NeverFlat"
};
const proto = {
  [FlattenTypeId]: {
    _A: _ => _
  },
  [Hash.symbol]() {
    return Hash.cached(this, protoHash[this._tag](this));
  },
  [Equal.symbol](that) {
    return protoEqual[this._tag](this, that);
  }
};
// -----------------------------------------------------------------------------
// Refinements
// -----------------------------------------------------------------------------
/** @internal */
const isFlatten = u => typeof u === "object" && u != null && FlattenTypeId in u;
/** @internal */
exports.isFlatten = isFlatten;
const isFlattened = self => self._tag === "Flattened";
/** @internal */
exports.isFlattened = isFlattened;
const isAlreadyFlat = self => self._tag === "AlreadyFlat";
/** @internal */
exports.isAlreadyFlat = isAlreadyFlat;
const isNeverFlat = self => self._tag === "NeverFlat";
// -----------------------------------------------------------------------------
// Constructors
// -----------------------------------------------------------------------------
/** @internal */
exports.isNeverFlat = isNeverFlat;
const flattened = value => (() => {
  const op = Object.create(proto);
  op._tag = "Flattened";
  op.value = value;
  return op;
})();
/** @internal */
exports.flattened = flattened;
const alreadyFlat = exports.alreadyFlat = /*#__PURE__*/(() => {
  const op = /*#__PURE__*/Object.create(proto);
  op._tag = "AlreadyFlat";
  return op;
})();
/** @internal */
const neverFlat = exports.neverFlat = /*#__PURE__*/(() => {
  const op = /*#__PURE__*/Object.create(proto);
  op._tag = "NeverFlat";
  return op;
})();
// -----------------------------------------------------------------------------
// Combinators
// -----------------------------------------------------------------------------
/** @internal */
const map = exports.map = /*#__PURE__*/(0, _Function.dual)(2, (self, f) => {
  switch (self._tag) {
    case "Flattened":
      {
        return flattened(f(self.value));
      }
    case "AlreadyFlat":
      {
        return alreadyFlat;
      }
    case "NeverFlat":
      {
        return neverFlat;
      }
  }
});
//# sourceMappingURL=flatten.js.map