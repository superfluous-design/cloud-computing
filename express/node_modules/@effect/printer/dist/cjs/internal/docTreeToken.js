"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.text = exports.pushAnnotation = exports.popAnnotation = exports.line = exports.empty = exports.char = void 0;
const DocTreeTokenTypeId = /*#__PURE__*/Symbol.for("@effect/printer/DocTree/DocTreeToken");
const proto = {
  [DocTreeTokenTypeId]: {
    _A: _ => _
  }
};
/** @internal */
const empty = exports.empty = /*#__PURE__*/(() => {
  const op = /*#__PURE__*/Object.create(proto);
  op._tag = "EmptyToken";
  return op;
})();
/** @internal */
const char = char => {
  const op = Object.create(proto);
  op._tag = "CharToken";
  op.char = char;
  return op;
};
/** @internal */
exports.char = char;
const text = text => {
  const op = Object.create(proto);
  op._tag = "TextToken";
  op.text = text;
  return op;
};
/** @internal */
exports.text = text;
const line = indentation => {
  const op = Object.create(proto);
  op._tag = "LineToken";
  op.indentation = indentation;
  return op;
};
/** @internal */
exports.line = line;
const pushAnnotation = annotation => {
  const op = Object.create(proto);
  op._tag = "PushAnnotationToken";
  op.annotation = annotation;
  return op;
};
/** @internal */
exports.pushAnnotation = pushAnnotation;
const popAnnotation = exports.popAnnotation = /*#__PURE__*/(() => {
  const op = /*#__PURE__*/Object.create(proto);
  op._tag = "PopAnnotationToken";
  return op;
})();
//# sourceMappingURL=docTreeToken.js.map