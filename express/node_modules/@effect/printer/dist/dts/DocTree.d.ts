/**
 * @since 1.0.0
 */
import type * as covariant from "@effect/typeclass/Covariant";
import type * as invariant from "@effect/typeclass/Invariant";
import type * as monoid from "@effect/typeclass/Monoid";
import type * as semigroup from "@effect/typeclass/Semigroup";
import type { Equal } from "effect/Equal";
import type { TypeLambda } from "effect/HKT";
import type * as DocStream from "./DocStream.js";
/**
 * @since 1.0.0
 * @category symbol
 */
export declare const DocTreeTypeId: unique symbol;
/**
 * @since 1.0.0
 * @category symbol
 */
export type DocTreeTypeId = typeof DocTreeTypeId;
/**
 * Represents a document that has been laid out into a tree-like structure.
 *
 * A `DocStream` is a linked list of different annotated cons cells (i.e.
 * `TextStream` and then some further `DocStream`, `LineStream` and then some
 * further `DocStream`, etc.). The `DocStream` format is quite suitable as a
 * target for a layout engine, but is not suitable for rendering to a more
 * structured format, such as HTML, where we do not want to perform a lookahead
 * until the end of some pre-defined markup. These formats would benefit more
 * from a tree-like structure that explicitly marks its contents as annotated.
 * A `DocTree` is therefore much more suitable for this use case.
 *
 * @since 1.0.0
 * @category model
 */
export type DocTree<A> = EmptyTree<A> | CharTree<A> | TextTree<A> | LineTree<A> | AnnotationTree<A> | ConcatTree<A>;
/**
 * @since 1.0.0
 */
export declare namespace DocTree {
    /**
     * @since 1.0.0
     */
    interface Variance<A> extends Equal {
        readonly [DocTreeTypeId]: {
            readonly _A: (_: never) => A;
        };
    }
    /**
     * @since 1.0.0
     */
    type TypeLambda = DocTreeTypeLambda;
}
/**
 * @since 1.0.0
 * @category model
 */
export interface DocTreeTypeLambda extends TypeLambda {
    readonly type: DocTree<this["Target"]>;
}
/**
 * @since 1.0.0
 * @category model
 */
export interface EmptyTree<A> extends DocTree.Variance<A> {
    readonly _tag: "EmptyTree";
}
/**
 * @since 1.0.0
 * @category model
 */
export interface CharTree<A> extends DocTree.Variance<A> {
    readonly _tag: "CharTree";
    readonly char: string;
}
/**
 * @since 1.0.0
 * @category model
 */
export interface TextTree<A> extends DocTree.Variance<A> {
    readonly _tag: "TextTree";
    readonly text: string;
}
/**
 * @since 1.0.0
 * @category model
 */
export interface LineTree<A> extends DocTree.Variance<A> {
    readonly _tag: "LineTree";
    readonly indentation: number;
}
/**
 * @since 1.0.0
 * @category model
 */
export interface AnnotationTree<A> extends DocTree.Variance<A> {
    readonly _tag: "AnnotationTree";
    readonly annotation: A;
    readonly tree: DocTree<A>;
}
/**
 * @since 1.0.0
 * @category model
 */
export interface ConcatTree<A> extends DocTree.Variance<A> {
    readonly _tag: "ConcatTree";
    readonly trees: ReadonlyArray<DocTree<A>>;
}
/**
 * Returns `true` if the specified value is a `DocTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export declare const isDocTree: (u: unknown) => u is DocTree<unknown>;
/**
 * Returns `true` if the specified `DocTree` is an `EmptyTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export declare const isEmptyTree: <A>(self: DocTree<A>) => self is EmptyTree<A>;
/**
 * Returns `true` if the specified `DocTree` is an `CharTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export declare const isCharTree: <A>(self: DocTree<A>) => self is CharTree<A>;
/**
 * Returns `true` if the specified `DocTree` is an `TextTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export declare const isTextTree: <A>(self: DocTree<A>) => self is TextTree<A>;
/**
 * Returns `true` if the specified `DocTree` is an `LineTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export declare const isLineTree: <A>(self: DocTree<A>) => self is LineTree<A>;
/**
 * Returns `true` if the specified `DocTree` is an `AnnotationTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export declare const isAnnotationTree: <A>(self: DocTree<A>) => self is AnnotationTree<A>;
/**
 * Returns `true` if the specified `DocTree` is an `ConcatTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export declare const isConcatTree: <A>(self: DocTree<A>) => self is ConcatTree<A>;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const empty: DocTree<never>;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const char: <A>(char: string) => DocTree<A>;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const text: <A>(text: string) => DocTree<A>;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const line: <A>(indentation: number) => DocTree<A>;
/**
 * Annotate the specified `DocTree` with an annotation of type `A`.
 *
 * @since 1.0.0
 * @category constructors
 */
export declare const annotation: {
    /**
     * Annotate the specified `DocTree` with an annotation of type `A`.
     *
     * @since 1.0.0
     * @category constructors
     */
    <A>(annotation: A): <B>(self: DocTree<B>) => DocTree<A | B>;
    /**
     * Annotate the specified `DocTree` with an annotation of type `A`.
     *
     * @since 1.0.0
     * @category constructors
     */
    <A, B>(self: DocTree<A>, annotation: B): DocTree<A | B>;
};
/**
 * Horizontally concatenates multiple `DocTree`s.
 *
 * @since 1.0.0
 * @category constructors
 */
export declare const concat: <A>(trees: ReadonlyArray<DocTree<A>>) => DocTree<A>;
/**
 * Change the annotation of a document to a different annotation, or none at
 * all.
 *
 * @since 1.0.0
 * @category annotations
 */
export declare const alterAnnotations: {
    /**
     * Change the annotation of a document to a different annotation, or none at
     * all.
     *
     * @since 1.0.0
     * @category annotations
     */
    <A, B>(f: (a: A) => Iterable<B>): (self: DocTree<A>) => DocTree<B>;
    /**
     * Change the annotation of a document to a different annotation, or none at
     * all.
     *
     * @since 1.0.0
     * @category annotations
     */
    <A, B>(self: DocTree<A>, f: (a: A) => Iterable<B>): DocTree<B>;
};
/**
 * Change the annotation of a `DocTree`.
 *
 * @since 1.0.0
 * @category annotations
 */
export declare const reAnnotate: {
    /**
     * Change the annotation of a `DocTree`.
     *
     * @since 1.0.0
     * @category annotations
     */
    <A, B>(f: (a: A) => B): (self: DocTree<A>) => DocTree<B>;
    /**
     * Change the annotation of a `DocTree`.
     *
     * @since 1.0.0
     * @category annotations
     */
    <A, B>(self: DocTree<A>, f: (a: A) => B): DocTree<B>;
};
/**
 * Remove all annotations from a `DocTree`.
 *
 * @since 1.0.0
 * @category annotations
 */
export declare const unAnnotate: <A>(self: DocTree<A>) => DocTree<never>;
/**
 * @since 1.0.0
 * @category folding
 */
export declare const foldMap: {
    /**
     * @since 1.0.0
     * @category folding
     */
    <A, M>(M: monoid.Monoid<M>, f: (a: A) => M): (self: DocTree<A>) => M;
    /**
     * @since 1.0.0
     * @category folding
     */
    <A, M>(self: DocTree<A>, M: monoid.Monoid<M>, f: (a: A) => M): M;
};
/**
 * The simplest possible tree-based renderer.
 *
 * For example, here is a document annotated with `void` and thee behavior is
 * to surround annotated regions with »>>>« and »<<<«.
 *
 * @example
 * ```ts
 * import * as assert from "node:assert"
 * import * as Doc from "@effect/printer/Doc"
 * import * as DocTree from "@effect/printer/DocTree"
 * import * as Layout from "@effect/printer/Layout"
 * import { identity, pipe } from "effect/Function"
 * import * as String from "@effect/typeclass/data/String"
 *
 * const doc: Doc.Doc<void> = Doc.hsep([
 *   Doc.text("hello"),
 *   pipe(
 *     Doc.text("world"),
 *     Doc.annotate(undefined),
 *     Doc.cat(Doc.char("!"))
 *   )
 * ])
 *
 * const tree = DocTree.treeForm(Layout.pretty(Layout.defaultOptions)(doc))
 *
 * const rendered = pipe(
 *   tree,
 *   DocTree.renderSimplyDecorated(String.Monoid, identity, (_, x) => `>>>${x}<<<`)
 * )
 *
 * assert.strictEqual(
 *   rendered,
 *   "hello >>>world<<<!"
 * )
 * ```
 *
 * @since 1.0.0
 * @category rendering
 */
export declare const renderSimplyDecorated: {
    /**
     * The simplest possible tree-based renderer.
     *
     * For example, here is a document annotated with `void` and thee behavior is
     * to surround annotated regions with »>>>« and »<<<«.
     *
     * @example
     * ```ts
     * import * as assert from "node:assert"
     * import * as Doc from "@effect/printer/Doc"
     * import * as DocTree from "@effect/printer/DocTree"
     * import * as Layout from "@effect/printer/Layout"
     * import { identity, pipe } from "effect/Function"
     * import * as String from "@effect/typeclass/data/String"
     *
     * const doc: Doc.Doc<void> = Doc.hsep([
     *   Doc.text("hello"),
     *   pipe(
     *     Doc.text("world"),
     *     Doc.annotate(undefined),
     *     Doc.cat(Doc.char("!"))
     *   )
     * ])
     *
     * const tree = DocTree.treeForm(Layout.pretty(Layout.defaultOptions)(doc))
     *
     * const rendered = pipe(
     *   tree,
     *   DocTree.renderSimplyDecorated(String.Monoid, identity, (_, x) => `>>>${x}<<<`)
     * )
     *
     * assert.strictEqual(
     *   rendered,
     *   "hello >>>world<<<!"
     * )
     * ```
     *
     * @since 1.0.0
     * @category rendering
     */
    <A, M>(M: monoid.Monoid<M>, renderText: (text: string) => M, renderAnnotation: (annotation: A, out: M) => M): (self: DocTree<A>) => M;
    /**
     * The simplest possible tree-based renderer.
     *
     * For example, here is a document annotated with `void` and thee behavior is
     * to surround annotated regions with »>>>« and »<<<«.
     *
     * @example
     * ```ts
     * import * as assert from "node:assert"
     * import * as Doc from "@effect/printer/Doc"
     * import * as DocTree from "@effect/printer/DocTree"
     * import * as Layout from "@effect/printer/Layout"
     * import { identity, pipe } from "effect/Function"
     * import * as String from "@effect/typeclass/data/String"
     *
     * const doc: Doc.Doc<void> = Doc.hsep([
     *   Doc.text("hello"),
     *   pipe(
     *     Doc.text("world"),
     *     Doc.annotate(undefined),
     *     Doc.cat(Doc.char("!"))
     *   )
     * ])
     *
     * const tree = DocTree.treeForm(Layout.pretty(Layout.defaultOptions)(doc))
     *
     * const rendered = pipe(
     *   tree,
     *   DocTree.renderSimplyDecorated(String.Monoid, identity, (_, x) => `>>>${x}<<<`)
     * )
     *
     * assert.strictEqual(
     *   rendered,
     *   "hello >>>world<<<!"
     * )
     * ```
     *
     * @since 1.0.0
     * @category rendering
     */
    <A, M>(self: DocTree<A>, M: monoid.Monoid<M>, renderText: (text: string) => M, renderAnnotation: (annotation: A, out: M) => M): M;
};
/**
 * Converts a `DocStream<A>` into a `DocTree<A>`.
 *
 * @since 1.0.0
 * @category conversions
 */
export declare const treeForm: <A>(stream: DocStream.DocStream<A>) => DocTree<A>;
/**
 * @since 1.0.0
 * @category instances
 */
export declare const getSemigroup: <A>(_: void) => semigroup.Semigroup<DocTree<A>>;
/**
 * @since 1.0.0
 * @category instances
 */
export declare const getMonoid: <A>(_: void) => monoid.Monoid<DocTree<A>>;
/**
 * @since 1.0.0
 * @category instances
 */
export declare const Covariant: covariant.Covariant<DocTree.TypeLambda>;
/**
 * @since 1.0.0
 * @category instances
 */
export declare const Invariant: invariant.Invariant<DocTree.TypeLambda>;
//# sourceMappingURL=DocTree.d.ts.map