/**
 * @since 1.0.0
 */
import * as internal from "./internal/pageWidth.js";
// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category symbol
 */
export const PageWidthTypeId = internal.PageWidthTypeId;
// -----------------------------------------------------------------------------
// Refinements
// -----------------------------------------------------------------------------
/**
 * Returns `true` if the specified value is a `PageWidth`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isPageWidth = internal.isPageWidth;
/**
 * Returns `true` if the specified `PageWidth` is an `AvailablePerLine`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isAvailablePerLine = internal.isAvailablePerLine;
/**
 * Returns `true` if the specified `PageWidth` is an `Unbounded`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isUnbounded = internal.isUnbounded;
// -----------------------------------------------------------------------------
// Constructors
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category constructors
 */
export const availablePerLine = internal.availablePerLine;
/**
 * @since 1.0.0
 * @category constructors
 */
export const unbounded = internal.unbounded;
/**
 * @since 1.0.0
 * @category constructors
 */
export const defaultPageWidth = internal.defaultPageWidth;
// -----------------------------------------------------------------------------
// Utilities
// -----------------------------------------------------------------------------
/**
 * Calculates the remaining width on the current line.
 *
 * @since 1.0.0
 * @category utilities
 */
export const remainingWidth = internal.remainingWidth;
//# sourceMappingURL=PageWidth.js.map