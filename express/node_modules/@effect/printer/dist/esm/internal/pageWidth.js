import * as Equal from "effect/Equal";
import { pipe } from "effect/Function";
import * as Hash from "effect/Hash";
// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------
const PageWidthSymbolKey = "@effect/printer/PageWidth";
/** @internal */
export const PageWidthTypeId = /*#__PURE__*/Symbol.for(PageWidthSymbolKey);
const protoHash = {
  AvailablePerLine: self => pipe(Hash.hash("@effect/printer/PageWidth/AvailablePerLine"), Hash.combine(Hash.hash(PageWidthSymbolKey)), Hash.combine(Hash.hash(self.lineWidth)), Hash.combine(Hash.hash(self.ribbonFraction))),
  Unbounded: _ => pipe(Hash.hash("@effect/printer/PageWidth/Unbounded"), Hash.combine(Hash.hash(PageWidthSymbolKey)))
};
const protoEqual = {
  AvailablePerLine: (self, that) => isPageWidth(that) && that._tag === "AvailablePerLine" && self.lineWidth === that.lineWidth && self.ribbonFraction === that.ribbonFraction,
  Unbounded: (self, that) => isPageWidth(that) && that._tag === "Unbounded"
};
const proto = {
  [PageWidthTypeId]: PageWidthTypeId,
  [Hash.symbol]() {
    return Hash.cached(this, protoHash[this._tag](this));
  },
  [Equal.symbol](that) {
    return protoEqual[this._tag](this, that);
  }
};
// -----------------------------------------------------------------------------
// Refinements
// -----------------------------------------------------------------------------
/** @internal */
export const isPageWidth = u => typeof u === "object" && u != null && PageWidthTypeId in u;
/** @internal */
export const isAvailablePerLine = self => self._tag === "AvailablePerLine";
/** @internal */
export const isUnbounded = self => self._tag === "AvailablePerLine";
// -----------------------------------------------------------------------------
// Constructors
// -----------------------------------------------------------------------------
/** @internal */
export const availablePerLine = (lineWidth, ribbonFraction) => {
  const op = Object.create(proto);
  op._tag = "AvailablePerLine";
  op.lineWidth = lineWidth;
  op.ribbonFraction = ribbonFraction;
  return op;
};
/** @internal */
export const unbounded = /*#__PURE__*/(() => {
  const op = /*#__PURE__*/Object.create(proto);
  op._tag = "Unbounded";
  return op;
})();
/** @internal */
export const defaultPageWidth = /*#__PURE__*/availablePerLine(80, 1);
// -----------------------------------------------------------------------------
// Utilities
// -----------------------------------------------------------------------------
/** @internal */
export const remainingWidth = (pageWidth, ribbonFraction, indentation, currentColumn) => {
  const columnsLeftInLine = pageWidth - currentColumn;
  const ribbonWidth = Math.max(0, Math.min(pageWidth, Math.floor(pageWidth * ribbonFraction)));
  const columnsLeftInRibbon = indentation + ribbonWidth - currentColumn;
  return Math.min(columnsLeftInLine, columnsLeftInRibbon);
};
//# sourceMappingURL=pageWidth.js.map