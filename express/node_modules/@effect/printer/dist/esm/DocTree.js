import * as internal from "./internal/docTree.js";
// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category symbol
 */
export const DocTreeTypeId = internal.DocTreeTypeId;
// -----------------------------------------------------------------------------
// Refinements
// -----------------------------------------------------------------------------
/**
 * Returns `true` if the specified value is a `DocTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isDocTree = internal.isDocTree;
/**
 * Returns `true` if the specified `DocTree` is an `EmptyTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isEmptyTree = internal.isEmptyTree;
/**
 * Returns `true` if the specified `DocTree` is an `CharTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isCharTree = internal.isCharTree;
/**
 * Returns `true` if the specified `DocTree` is an `TextTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isTextTree = internal.isTextTree;
/**
 * Returns `true` if the specified `DocTree` is an `LineTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isLineTree = internal.isLineTree;
/**
 * Returns `true` if the specified `DocTree` is an `AnnotationTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isAnnotationTree = internal.isAnnotationTree;
/**
 * Returns `true` if the specified `DocTree` is an `ConcatTree`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isConcatTree = internal.isConcatTree;
// -----------------------------------------------------------------------------
// Constructors
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category constructors
 */
export const empty = internal.empty;
/**
 * @since 1.0.0
 * @category constructors
 */
export const char = internal.char;
/**
 * @since 1.0.0
 * @category constructors
 */
export const text = internal.text;
/**
 * @since 1.0.0
 * @category constructors
 */
export const line = internal.line;
/**
 * Annotate the specified `DocTree` with an annotation of type `A`.
 *
 * @since 1.0.0
 * @category constructors
 */
export const annotation = internal.annotation;
/**
 * Horizontally concatenates multiple `DocTree`s.
 *
 * @since 1.0.0
 * @category constructors
 */
export const concat = internal.concat;
// -----------------------------------------------------------------------------
// Annotations
// -----------------------------------------------------------------------------
/**
 * Change the annotation of a document to a different annotation, or none at
 * all.
 *
 * @since 1.0.0
 * @category annotations
 */
export const alterAnnotations = internal.alterAnnotations;
/**
 * Change the annotation of a `DocTree`.
 *
 * @since 1.0.0
 * @category annotations
 */
export const reAnnotate = internal.reAnnotate;
/**
 * Remove all annotations from a `DocTree`.
 *
 * @since 1.0.0
 * @category annotations
 */
export const unAnnotate = internal.unAnnotate;
// -----------------------------------------------------------------------------
// Folding
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category folding
 */
export const foldMap = internal.foldMap;
// -----------------------------------------------------------------------------
// Instances
// -----------------------------------------------------------------------------
/**
 * The simplest possible tree-based renderer.
 *
 * For example, here is a document annotated with `void` and thee behavior is
 * to surround annotated regions with »>>>« and »<<<«.
 *
 * @example
 * ```ts
 * import * as assert from "node:assert"
 * import * as Doc from "@effect/printer/Doc"
 * import * as DocTree from "@effect/printer/DocTree"
 * import * as Layout from "@effect/printer/Layout"
 * import { identity, pipe } from "effect/Function"
 * import * as String from "@effect/typeclass/data/String"
 *
 * const doc: Doc.Doc<void> = Doc.hsep([
 *   Doc.text("hello"),
 *   pipe(
 *     Doc.text("world"),
 *     Doc.annotate(undefined),
 *     Doc.cat(Doc.char("!"))
 *   )
 * ])
 *
 * const tree = DocTree.treeForm(Layout.pretty(Layout.defaultOptions)(doc))
 *
 * const rendered = pipe(
 *   tree,
 *   DocTree.renderSimplyDecorated(String.Monoid, identity, (_, x) => `>>>${x}<<<`)
 * )
 *
 * assert.strictEqual(
 *   rendered,
 *   "hello >>>world<<<!"
 * )
 * ```
 *
 * @since 1.0.0
 * @category rendering
 */
export const renderSimplyDecorated = internal.renderSimplyDecorated;
// -----------------------------------------------------------------------------
// Conversions
// -----------------------------------------------------------------------------
/**
 * Converts a `DocStream<A>` into a `DocTree<A>`.
 *
 * @since 1.0.0
 * @category conversions
 */
export const treeForm = internal.treeForm;
// -----------------------------------------------------------------------------
// Instances
// -----------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category instances
 */
export const getSemigroup = internal.getSemigroup;
/**
 * @since 1.0.0
 * @category instances
 */
export const getMonoid = internal.getMonoid;
/**
 * @since 1.0.0
 * @category instances
 */
export const Covariant = internal.Covariant;
/**
 * @since 1.0.0
 * @category instances
 */
export const Invariant = internal.Invariant;
//# sourceMappingURL=DocTree.js.map