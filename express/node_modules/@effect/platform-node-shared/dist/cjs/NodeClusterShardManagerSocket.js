"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layerSocketServer = exports.layer = void 0;
var RunnerHealth = _interopRequireWildcard(require("@effect/cluster/RunnerHealth"));
var ShardingConfig = _interopRequireWildcard(require("@effect/cluster/ShardingConfig"));
var ShardManager = _interopRequireWildcard(require("@effect/cluster/ShardManager"));
var ShardStorage = _interopRequireWildcard(require("@effect/cluster/ShardStorage"));
var SocketShardManager = _interopRequireWildcard(require("@effect/cluster/SocketShardManager"));
var SqlShardStorage = _interopRequireWildcard(require("@effect/cluster/SqlShardStorage"));
var RpcSerialization = _interopRequireWildcard(require("@effect/rpc/RpcSerialization"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var _NodeClusterSocketCommon = require("./NodeClusterSocketCommon.js");
var NodeSocketServer = _interopRequireWildcard(require("./NodeSocketServer.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category Layers
 */
const layerSocketServer = exports.layerSocketServer = /*#__PURE__*/Effect.gen(function* () {
  const config = yield* ShardingConfig.ShardingConfig;
  return NodeSocketServer.layer(config.shardManagerAddress);
}).pipe(Layer.unwrapEffect);
/**
 * @since 1.0.0
 * @category Layers
 */
const layer = options => SocketShardManager.layer.pipe(Layer.provide([RunnerHealth.layerRpc, layerSocketServer, ShardManager.layerConfigFromEnv]), Layer.provide(_NodeClusterSocketCommon.layerClientProtocol), Layer.provide(options?.storage === "sql" ? SqlShardStorage.layer : ShardStorage.layerNoop), Layer.provide([options?.serialization === "ndjson" ? RpcSerialization.layerNdjson : RpcSerialization.layerMsgPack, ShardingConfig.layerFromEnv(options?.shardingConfig)]));
exports.layer = layer;
//# sourceMappingURL=NodeClusterShardManagerSocket.js.map