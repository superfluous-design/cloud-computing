/**
 * @since 1.0.0
 */
import * as RunnerHealth from "@effect/cluster/RunnerHealth";
import * as ShardingConfig from "@effect/cluster/ShardingConfig";
import * as ShardManager from "@effect/cluster/ShardManager";
import * as ShardStorage from "@effect/cluster/ShardStorage";
import * as SocketShardManager from "@effect/cluster/SocketShardManager";
import * as SqlShardStorage from "@effect/cluster/SqlShardStorage";
import * as RpcSerialization from "@effect/rpc/RpcSerialization";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import { layerClientProtocol } from "./NodeClusterSocketCommon.js";
import * as NodeSocketServer from "./NodeSocketServer.js";
/**
 * @since 1.0.0
 * @category Layers
 */
export const layerSocketServer = /*#__PURE__*/Effect.gen(function* () {
  const config = yield* ShardingConfig.ShardingConfig;
  return NodeSocketServer.layer(config.shardManagerAddress);
}).pipe(Layer.unwrapEffect);
/**
 * @since 1.0.0
 * @category Layers
 */
export const layer = options => SocketShardManager.layer.pipe(Layer.provide([RunnerHealth.layerRpc, layerSocketServer, ShardManager.layerConfigFromEnv]), Layer.provide(layerClientProtocol), Layer.provide(options?.storage === "sql" ? SqlShardStorage.layer : ShardStorage.layerNoop), Layer.provide([options?.serialization === "ndjson" ? RpcSerialization.layerNdjson : RpcSerialization.layerMsgPack, ShardingConfig.layerFromEnv(options?.shardingConfig)]));
//# sourceMappingURL=NodeClusterShardManagerSocket.js.map