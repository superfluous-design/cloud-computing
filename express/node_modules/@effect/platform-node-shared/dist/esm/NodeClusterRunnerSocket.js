/**
 * @since 1.0.0
 */
import * as MessageStorage from "@effect/cluster/MessageStorage";
import * as ShardingConfig from "@effect/cluster/ShardingConfig";
import * as ShardStorage from "@effect/cluster/ShardStorage";
import * as SocketRunner from "@effect/cluster/SocketRunner";
import * as SqlMessageStorage from "@effect/cluster/SqlMessageStorage";
import * as SqlShardStorage from "@effect/cluster/SqlShardStorage";
import * as RpcSerialization from "@effect/rpc/RpcSerialization";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import * as Option from "effect/Option";
import { layerClientProtocol } from "./NodeClusterSocketCommon.js";
import * as NodeSocketServer from "./NodeSocketServer.js";
/**
 * @since 1.0.0
 * @category Layers
 */
export const layerSocketServer = /*#__PURE__*/Effect.gen(function* () {
  const config = yield* ShardingConfig.ShardingConfig;
  if (Option.isNone(config.runnerAddress)) {
    return yield* Effect.dieMessage("layerSocketServer: ShardingConfig.runnerAddress is None");
  }
  return NodeSocketServer.layer(config.runnerAddress.value);
}).pipe(Layer.unwrapEffect);
/**
 * @since 1.0.0
 * @category Layers
 */
export const layer = options => {
  const layer = options?.clientOnly
  // client only
  ? Layer.provide(SocketRunner.layerClientOnly, layerClientProtocol)
  // with server
  : Layer.provide(SocketRunner.layer, [layerSocketServer, layerClientProtocol]);
  return layer.pipe(Layer.provide(options?.storage === "sql" ? options.clientOnly ? [SqlMessageStorage.layer] : [SqlMessageStorage.layer, SqlShardStorage.layer] : [MessageStorage.layerNoop, ShardStorage.layerNoop]), Layer.provide(ShardingConfig.layerFromEnv(options?.shardingConfig)), Layer.provide(options?.serialization === "ndjson" ? RpcSerialization.layerNdjson : RpcSerialization.layerMsgPack));
};
//# sourceMappingURL=NodeClusterRunnerSocket.js.map