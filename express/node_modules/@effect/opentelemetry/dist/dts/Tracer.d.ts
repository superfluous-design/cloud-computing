/**
 * @since 1.0.0
 */
import type * as Otel from "@opentelemetry/api";
import type { NoSuchElementException } from "effect/Cause";
import type { Tag } from "effect/Context";
import type { Effect } from "effect/Effect";
import type { Layer } from "effect/Layer";
import type { ExternalSpan, ParentSpan, Tracer as EffectTracer } from "effect/Tracer";
import type { Resource } from "./Resource.js";
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const make: Effect<EffectTracer, never, OtelTracer>;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const makeExternalSpan: (options: {
    readonly traceId: string;
    readonly spanId: string;
    readonly traceFlags?: number | undefined;
    readonly traceState?: string | Otel.TraceState | undefined;
}) => ExternalSpan;
/**
 * @since 1.0.0
 * @category accessors
 */
export declare const currentOtelSpan: Effect<Otel.Span, NoSuchElementException>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerWithoutOtelTracer: Layer<never, never, OtelTracer>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layer: Layer<OtelTracer, never, Resource | OtelTracerProvider>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerGlobal: Layer<OtelTracer, never, Resource>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerTracer: Layer<OtelTracer, never, Resource | OtelTracerProvider>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerGlobalTracer: Layer<OtelTracer, never, Resource>;
/**
 * @since 1.0.0
 * @category tags
 */
export interface OtelTracerProvider {
    readonly _: unique symbol;
}
/**
 * @since 1.0.0
 * @category tags
 */
export declare const OtelTracerProvider: Tag<OtelTracerProvider, Otel.TracerProvider>;
/**
 * @since 1.0.0
 * @category tags
 */
export interface OtelTracer {
    readonly _: unique symbol;
}
/**
 * @since 1.0.0
 * @category tags
 */
export declare const OtelTracer: Tag<OtelTracer, Otel.Tracer>;
/**
 * @since 1.0.0
 * @category tags
 */
export interface OtelTraceFlags {
    readonly _: unique symbol;
}
/**
 * @since 1.0.0
 * @category tags
 */
export declare const OtelTraceFlags: Tag<OtelTraceFlags, Otel.TraceFlags>;
/**
 * @since 1.0.0
 * @category tags
 */
export interface OtelTraceState {
    readonly _: unique symbol;
}
/**
 * @since 1.0.0
 * @category tags
 */
export declare const OtelTraceState: Tag<OtelTraceState, Otel.TraceState>;
/**
 * Set the effect's parent span from the given opentelemetry `SpanContext`.
 *
 * This is handy when you set up OpenTelemetry outside of Effect and want to
 * attach to a parent span.
 *
 * @since 1.0.0
 * @category propagation
 */
export declare const withSpanContext: {
    /**
     * Set the effect's parent span from the given opentelemetry `SpanContext`.
     *
     * This is handy when you set up OpenTelemetry outside of Effect and want to
     * attach to a parent span.
     *
     * @since 1.0.0
     * @category propagation
     */
    (spanContext: Otel.SpanContext): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, Exclude<R, ParentSpan>>;
    /**
     * Set the effect's parent span from the given opentelemetry `SpanContext`.
     *
     * This is handy when you set up OpenTelemetry outside of Effect and want to
     * attach to a parent span.
     *
     * @since 1.0.0
     * @category propagation
     */
    <A, E, R>(effect: Effect<A, E, R>, spanContext: Otel.SpanContext): Effect<A, E, Exclude<R, ParentSpan>>;
};
//# sourceMappingURL=Tracer.d.ts.map