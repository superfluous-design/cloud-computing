/**
 * @since 1.0.0
 */
import type * as OtelApi from "@opentelemetry/api";
import * as Resources from "@opentelemetry/resources";
import * as Layer from "effect/Layer";
/**
 * @since 1.0.0
 * @category identifier
 */
export interface Resource {
    readonly _: unique symbol;
}
/**
 * @since 1.0.0
 * @category tag
 */
export declare const Resource: import("effect/Context").Tag<Resource, Resources.Resource>;
/**
 * @since 1.0.0
 * @category layer
 */
export declare const layer: (config: {
    readonly serviceName: string;
    readonly serviceVersion?: string;
    readonly attributes?: OtelApi.Attributes;
}) => Layer.Layer<Resource, never, never>;
/**
 * @since 1.0.0
 * @category config
 */
export declare const configToAttributes: (options: {
    readonly serviceName: string;
    readonly serviceVersion?: string;
    readonly attributes?: OtelApi.Attributes;
}) => Record<string, string>;
/**
 * @since 1.0.0
 * @category layer
 */
export declare const layerFromEnv: (additionalAttributes?: OtelApi.Attributes | undefined) => Layer.Layer<Resource>;
/**
 * @since 2.0.0
 * @category layer
 */
export declare const layerEmpty: Layer.Layer<Resource, never, never>;
//# sourceMappingURL=Resource.d.ts.map