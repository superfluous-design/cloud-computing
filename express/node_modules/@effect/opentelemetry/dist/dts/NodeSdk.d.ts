/**
 * @since 1.0.0
 */
import type * as OtelApi from "@opentelemetry/api";
import type { LoggerProviderConfig, LogRecordProcessor } from "@opentelemetry/sdk-logs";
import type { MetricReader } from "@opentelemetry/sdk-metrics";
import type { SpanProcessor, TracerConfig } from "@opentelemetry/sdk-trace-base";
import type { NonEmptyReadonlyArray } from "effect/Array";
import type { DurationInput } from "effect/Duration";
import * as Effect from "effect/Effect";
import { type LazyArg } from "effect/Function";
import * as Layer from "effect/Layer";
import * as Resource from "./Resource.js";
import * as Tracer from "./Tracer.js";
/**
 * @since 1.0.0
 * @category model
 */
export interface Configuration {
    readonly spanProcessor?: SpanProcessor | ReadonlyArray<SpanProcessor> | undefined;
    readonly tracerConfig?: Omit<TracerConfig, "resource"> | undefined;
    readonly metricReader?: MetricReader | ReadonlyArray<MetricReader> | undefined;
    readonly logRecordProcessor?: LogRecordProcessor | ReadonlyArray<LogRecordProcessor> | undefined;
    readonly loggerProviderConfig?: Omit<LoggerProviderConfig, "resource"> | undefined;
    readonly resource?: {
        readonly serviceName: string;
        readonly serviceVersion?: string;
        readonly attributes?: OtelApi.Attributes;
    } | undefined;
    readonly shutdownTimeout?: DurationInput | undefined;
}
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerTracerProvider: (processor: SpanProcessor | NonEmptyReadonlyArray<SpanProcessor>, config?: Omit<TracerConfig, "resource"> & {
    readonly shutdownTimeout?: DurationInput | undefined;
}) => Layer.Layer<Tracer.OtelTracerProvider, never, Resource.Resource>;
/**
 * @since 1.0.0
 * @category layer
 */
export declare const layer: {
    /**
     * @since 1.0.0
     * @category layer
     */
    (evaluate: LazyArg<Configuration>): Layer.Layer<Resource.Resource>;
    /**
     * @since 1.0.0
     * @category layer
     */
    <R, E>(evaluate: Effect.Effect<Configuration, E, R>): Layer.Layer<Resource.Resource, E, R>;
};
/**
 * @since 2.0.0
 * @category layer
 */
export declare const layerEmpty: Layer.Layer<Resource.Resource>;
//# sourceMappingURL=NodeSdk.d.ts.map