/**
 * @since 1.0.0
 */
import type { MetricProducer, MetricReader } from "@opentelemetry/sdk-metrics";
import type { NonEmptyReadonlyArray } from "effect/Array";
import type { DurationInput } from "effect/Duration";
import type * as Effect from "effect/Effect";
import type { LazyArg } from "effect/Function";
import type { Layer } from "effect/Layer";
import type * as Scope from "effect/Scope";
import type { Resource } from "./Resource.js";
/**
 * @since 1.0.0
 * @category producer
 */
export declare const makeProducer: Effect.Effect<MetricProducer, never, Resource>;
/**
 * @since 1.0.0
 * @category producer
 */
export declare const registerProducer: (self: MetricProducer, metricReader: LazyArg<MetricReader | NonEmptyReadonlyArray<MetricReader>>) => Effect.Effect<Array<any>, never, Scope.Scope>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layer: (evaluate: LazyArg<MetricReader | NonEmptyReadonlyArray<MetricReader>>, options?: {
    readonly shutdownTimeout?: DurationInput | undefined;
}) => Layer<never, never, Resource>;
//# sourceMappingURL=Metrics.d.ts.map