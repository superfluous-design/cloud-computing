/**
 * @since 1.0.0
 */
import * as Otel from "@opentelemetry/sdk-logs";
import type { NonEmptyReadonlyArray } from "effect/Array";
import * as Context from "effect/Context";
import type { DurationInput } from "effect/Duration";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import * as Logger from "effect/Logger";
import { Resource } from "./Resource.js";
declare const OtelLoggerProvider_base: Context.TagClass<OtelLoggerProvider, "@effect/opentelemetry/Logger/OtelLoggerProvider", Otel.LoggerProvider>;
/**
 * @since 1.0.0
 * @category tags
 */
export declare class OtelLoggerProvider extends OtelLoggerProvider_base {
}
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const make: Effect.Effect<Logger.Logger<unknown, void>, never, OtelLoggerProvider>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerLoggerAdd: Layer.Layer<never, never, OtelLoggerProvider>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerLoggerReplace: Layer.Layer<never, never, OtelLoggerProvider>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerLoggerProvider: (processor: Otel.LogRecordProcessor | NonEmptyReadonlyArray<Otel.LogRecordProcessor>, config?: Omit<Otel.LoggerProviderConfig, "resource"> & {
    readonly shutdownTimeout?: DurationInput | undefined;
}) => Layer.Layer<OtelLoggerProvider, never, Resource>;
export {};
//# sourceMappingURL=Logger.d.ts.map