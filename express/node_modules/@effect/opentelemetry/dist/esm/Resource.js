import * as Resources from "@opentelemetry/resources";
import { SEMRESATTRS_SERVICE_NAME, SEMRESATTRS_SERVICE_VERSION, SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, SEMRESATTRS_TELEMETRY_SDK_NAME, TELEMETRYSDKLANGUAGEVALUES_NODEJS, TELEMETRYSDKLANGUAGEVALUES_WEBJS } from "@opentelemetry/semantic-conventions";
import * as Arr from "effect/Array";
import * as Config from "effect/Config";
import { GenericTag } from "effect/Context";
import * as Effect from "effect/Effect";
import { pipe } from "effect/Function";
import * as Layer from "effect/Layer";
/**
 * @since 1.0.0
 * @category tag
 */
export const Resource = /*#__PURE__*/GenericTag("@effect/opentelemetry/Resource");
/**
 * @since 1.0.0
 * @category layer
 */
export const layer = config => Layer.succeed(Resource, Resources.resourceFromAttributes(configToAttributes(config)));
/**
 * @since 1.0.0
 * @category config
 */
export const configToAttributes = options => {
  const attributes = {
    ...(options.attributes ?? undefined),
    [SEMRESATTRS_SERVICE_NAME]: options.serviceName,
    [SEMRESATTRS_TELEMETRY_SDK_NAME]: "@effect/opentelemetry",
    [SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]: typeof globalThis.document === "undefined" ? TELEMETRYSDKLANGUAGEVALUES_NODEJS : TELEMETRYSDKLANGUAGEVALUES_WEBJS
  };
  if (options.serviceVersion) {
    attributes[SEMRESATTRS_SERVICE_VERSION] = options.serviceVersion;
  }
  return attributes;
};
/**
 * @since 1.0.0
 * @category layer
 */
export const layerFromEnv = additionalAttributes => Layer.effect(Resource, Effect.gen(function* () {
  const serviceName = yield* pipe(Config.string("OTEL_SERVICE_NAME"), Config.option, Effect.orDie);
  const attributes = yield* pipe(Config.string("OTEL_RESOURCE_ATTRIBUTES"), Config.withDefault(""), Config.map(s => {
    const attrs = s.split(",");
    return Arr.reduce(attrs, {}, (acc, attr) => {
      const parts = attr.split("=");
      if (parts.length !== 2) {
        return acc;
      }
      acc[parts[0].trim()] = parts[1].trim();
      return acc;
    });
  }), Effect.orDie);
  if (serviceName._tag === "Some") {
    attributes[SEMRESATTRS_SERVICE_NAME] = serviceName.value;
  }
  if (additionalAttributes) {
    Object.assign(attributes, additionalAttributes);
  }
  return Resources.resourceFromAttributes(attributes);
}));
/**
 * @since 2.0.0
 * @category layer
 */
export const layerEmpty = /*#__PURE__*/Layer.succeed(Resource, /*#__PURE__*/Resources.emptyResource());
//# sourceMappingURL=Resource.js.map