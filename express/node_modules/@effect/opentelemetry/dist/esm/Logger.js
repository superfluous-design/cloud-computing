/**
 * @since 1.0.0
 */
import * as Otel from "@opentelemetry/sdk-logs";
import * as Arr from "effect/Array";
import * as Context from "effect/Context";
import * as Effect from "effect/Effect";
import * as FiberId from "effect/FiberId";
import * as Layer from "effect/Layer";
import * as Logger from "effect/Logger";
import { unknownToAttributeValue } from "./internal/utils.js";
import { Resource } from "./Resource.js";
/**
 * @since 1.0.0
 * @category tags
 */
export class OtelLoggerProvider extends /*#__PURE__*/Context.Tag("@effect/opentelemetry/Logger/OtelLoggerProvider")() {}
/**
 * @since 1.0.0
 * @category constructors
 */
export const make = /*#__PURE__*/Effect.gen(function* () {
  const loggerProvider = yield* OtelLoggerProvider;
  const clock = yield* Effect.clock;
  const otelLogger = loggerProvider.getLogger("@effect/opentelemetry");
  return Logger.make(options => {
    const now = options.date.getTime();
    const attributes = {
      fiberId: FiberId.threadName(options.fiberId)
    };
    for (const [key, value] of options.annotations) {
      attributes[key] = unknownToAttributeValue(value);
    }
    for (const span of options.spans) {
      attributes[`logSpan.${span.label}`] = `${now - span.startTime}ms`;
    }
    const message = Arr.ensure(options.message).map(unknownToAttributeValue);
    otelLogger.emit({
      body: message.length === 1 ? message[0] : message,
      severityText: options.logLevel.label,
      severityNumber: options.logLevel.ordinal,
      timestamp: options.date,
      observedTimestamp: clock.unsafeCurrentTimeMillis(),
      attributes
    });
  });
});
/**
 * @since 1.0.0
 * @category layers
 */
export const layerLoggerAdd = /*#__PURE__*/Logger.addEffect(make);
/**
 * @since 1.0.0
 * @category layers
 */
export const layerLoggerReplace = /*#__PURE__*/Logger.replaceEffect(Logger.defaultLogger, make);
/**
 * @since 1.0.0
 * @category layers
 */
export const layerLoggerProvider = (processor, config) => Layer.scoped(OtelLoggerProvider, Effect.flatMap(Resource, resource => Effect.acquireRelease(Effect.sync(() => {
  const provider = new Otel.LoggerProvider({
    ...(config ?? undefined),
    resource
  });
  if (Array.isArray(processor)) {
    processor.forEach(p => provider.addLogRecordProcessor(p));
  } else {
    provider.addLogRecordProcessor(processor);
  }
  return provider;
}), provider => Effect.promise(() => provider.forceFlush().then(() => provider.shutdown())).pipe(Effect.ignoreLogged, Effect.interruptible, Effect.timeoutOption(config?.shutdownTimeout ?? 3000)))));
//# sourceMappingURL=Logger.js.map