import * as internal from "./internal/tracer.js";
/**
 * @since 1.0.0
 * @category constructors
 */
export const make = internal.make;
/**
 * @since 1.0.0
 * @category constructors
 */
export const makeExternalSpan = internal.makeExternalSpan;
/**
 * @since 1.0.0
 * @category accessors
 */
export const currentOtelSpan = internal.currentOtelSpan;
/**
 * @since 1.0.0
 * @category layers
 */
export const layerWithoutOtelTracer = internal.layerWithoutOtelTracer;
/**
 * @since 1.0.0
 * @category layers
 */
export const layer = internal.layer;
/**
 * @since 1.0.0
 * @category layers
 */
export const layerGlobal = internal.layerGlobal;
/**
 * @since 1.0.0
 * @category layers
 */
export const layerTracer = internal.layerTracer;
/**
 * @since 1.0.0
 * @category layers
 */
export const layerGlobalTracer = internal.layerGlobalTracer;
/**
 * @since 1.0.0
 * @category tags
 */
export const OtelTracerProvider = internal.TracerProvider;
/**
 * @since 1.0.0
 * @category tags
 */
export const OtelTracer = internal.Tracer;
/**
 * @since 1.0.0
 * @category tags
 */
export const OtelTraceFlags = internal.traceFlagsTag;
/**
 * @since 1.0.0
 * @category tags
 */
export const OtelTraceState = internal.traceStateTag;
/**
 * Set the effect's parent span from the given opentelemetry `SpanContext`.
 *
 * This is handy when you set up OpenTelemetry outside of Effect and want to
 * attach to a parent span.
 *
 * @since 1.0.0
 * @category propagation
 */
export const withSpanContext = internal.withSpanContext;
//# sourceMappingURL=Tracer.js.map