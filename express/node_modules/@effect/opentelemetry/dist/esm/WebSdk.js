import { WebTracerProvider } from "@opentelemetry/sdk-trace-web";
import * as Effect from "effect/Effect";
import { constant } from "effect/Function";
import * as Layer from "effect/Layer";
import { isNonEmpty } from "./internal/utils.js";
import * as Logger from "./Logger.js";
import * as Metrics from "./Metrics.js";
import * as Resource from "./Resource.js";
import * as Tracer from "./Tracer.js";
/**
 * @since 1.0.0
 * @category layers
 */
export const layerTracerProvider = (processor, config) => Layer.scoped(Tracer.OtelTracerProvider, Effect.flatMap(Resource.Resource, resource => Effect.acquireRelease(Effect.sync(() => {
  const provider = new WebTracerProvider({
    ...(config ?? undefined),
    resource,
    spanProcessors: Array.isArray(processor) ? processor : [processor]
  });
  return provider;
}), provider => Effect.ignoreLogged(Effect.promise(() => provider.forceFlush().then(() => provider.shutdown()))))));
/**
 * @since 1.0.0
 * @category layer
 */
export const layer = evaluate => Layer.unwrapEffect(Effect.map(Effect.isEffect(evaluate) ? evaluate : Effect.sync(evaluate), config => {
  const ResourceLive = Resource.layer(config.resource);
  const TracerLive = isNonEmpty(config.spanProcessor) ? Layer.provide(Tracer.layer, layerTracerProvider(config.spanProcessor, config.tracerConfig)) : Layer.empty;
  const LoggerLive = isNonEmpty(config.logRecordProcessor) ? Layer.provide(Logger.layerLoggerAdd, Logger.layerLoggerProvider(config.logRecordProcessor, config.loggerProviderConfig)) : Layer.empty;
  const MetricsLive = isNonEmpty(config.metricReader) ? Metrics.layer(constant(config.metricReader)) : Layer.empty;
  return Layer.mergeAll(TracerLive, MetricsLive, LoggerLive).pipe(Layer.provideMerge(ResourceLive));
}));
//# sourceMappingURL=WebSdk.js.map