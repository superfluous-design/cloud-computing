"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layer = void 0;
var Layer = _interopRequireWildcard(require("effect/Layer"));
var OtlpLogger = _interopRequireWildcard(require("./OtlpLogger.js"));
var OtlpMetrics = _interopRequireWildcard(require("./OtlpMetrics.js"));
var OtlpTracer = _interopRequireWildcard(require("./OtlpTracer.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 * @category Layers
 */
const layer = options => Layer.mergeAll(OtlpLogger.layer({
  replaceLogger: options.replaceLogger,
  url: `${options.baseUrl}/v1/logs`,
  resource: options.resource,
  headers: options.headers,
  exportInterval: options.loggerExportInterval,
  maxBatchSize: options.maxBatchSize,
  shutdownTimeout: options.shutdownTimeout
}), OtlpMetrics.layer({
  url: `${options.baseUrl}/v1/metrics`,
  resource: options.resource,
  headers: options.headers,
  exportInterval: options.metricsExportInterval,
  shutdownTimeout: options.shutdownTimeout
}), OtlpTracer.layer({
  url: `${options.baseUrl}/v1/traces`,
  resource: options.resource,
  headers: options.headers,
  exportInterval: options.tracerExportInterval,
  maxBatchSize: options.maxBatchSize,
  context: options.tracerContext,
  shutdownTimeout: options.shutdownTimeout
}));
exports.layer = layer;
//# sourceMappingURL=Otlp.js.map