"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make = void 0;
var Headers = _interopRequireWildcard(require("@effect/platform/Headers"));
var HttpClient = _interopRequireWildcard(require("@effect/platform/HttpClient"));
var HttpClientError = _interopRequireWildcard(require("@effect/platform/HttpClientError"));
var HttpClientRequest = _interopRequireWildcard(require("@effect/platform/HttpClientRequest"));
var Duration = _interopRequireWildcard(require("effect/Duration"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var FiberSet = _interopRequireWildcard(require("effect/FiberSet"));
var Num = _interopRequireWildcard(require("effect/Number"));
var Option = _interopRequireWildcard(require("effect/Option"));
var Schedule = _interopRequireWildcard(require("effect/Schedule"));
var Scope = _interopRequireWildcard(require("effect/Scope"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const policy = /*#__PURE__*/Schedule.forever.pipe(Schedule.passthrough, /*#__PURE__*/Schedule.addDelay(error => {
  if (HttpClientError.isHttpClientError(error) && error._tag === "ResponseError" && error.response.status === 429) {
    const retryAfter = Option.fromNullable(error.response.headers["retry-after"]).pipe(Option.flatMap(Num.parse), Option.getOrElse(() => 5));
    return Duration.seconds(retryAfter);
  }
  return Duration.seconds(1);
}));
/** @internal */
const make = exports.make = /*#__PURE__*/Effect.fnUntraced(function* (options) {
  const scope = yield* Effect.scope;
  const exportInterval = Duration.decode(options.exportInterval);
  const client = HttpClient.filterStatusOk(yield* HttpClient.HttpClient).pipe(HttpClient.tapError(error => {
    if (error._tag !== "ResponseError" || error.response.status !== 429) {
      return Effect.void;
    }
    const retryAfter = error.response.headers["retry-after"];
    const retryAfterSeconds = retryAfter ? parseInt(retryAfter, 10) : 5;
    return Effect.sleep(Duration.seconds(retryAfterSeconds));
  }), HttpClient.retryTransient({
    schedule: policy
  }));
  let headers = Headers.unsafeFromRecord({
    "user-agent": `effect-opentelemetry-${options.label}/0.0.0`
  });
  if (options.headers) {
    headers = Headers.merge(Headers.fromInput(options.headers), headers);
  }
  const request = HttpClientRequest.post(options.url, {
    headers
  });
  let buffer = [];
  const runExport = Effect.suspend(() => {
    const items = buffer;
    if (options.maxBatchSize !== "disabled") {
      if (buffer.length === 0) {
        return Effect.void;
      }
      buffer = [];
    }
    return client.execute(HttpClientRequest.bodyUnsafeJson(request, options.body(items))).pipe(Effect.asVoid, Effect.withTracerEnabled(false));
  });
  yield* Scope.addFinalizer(scope, runExport.pipe(Effect.ignore, Effect.interruptible, Effect.timeoutOption(options.shutdownTimeout)));
  let disabled = false;
  yield* Effect.sleep(exportInterval).pipe(Effect.zipRight(runExport), Effect.forever, Effect.catchAllCause(cause => {
    disabled = true;
    return Effect.logDebug("Failed to export", cause);
  }), Effect.annotateLogs({
    package: "@effect/opentelemetry",
    module: options.label
  }), Effect.forkIn(scope), Effect.interruptible);
  const runFork = yield* FiberSet.makeRuntime().pipe(Effect.interruptible);
  return {
    push(data) {
      if (disabled) return;
      buffer.push(data);
      if (options.maxBatchSize !== "disabled" && buffer.length >= options.maxBatchSize) {
        runFork(runExport);
      }
    }
  };
});
//# sourceMappingURL=otlpExporter.js.map