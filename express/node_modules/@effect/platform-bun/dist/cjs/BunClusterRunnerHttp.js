"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layerHttpServer = exports.layer = void 0;
var HttpRunner = _interopRequireWildcard(require("@effect/cluster/HttpRunner"));
var MessageStorage = _interopRequireWildcard(require("@effect/cluster/MessageStorage"));
var ShardingConfig = _interopRequireWildcard(require("@effect/cluster/ShardingConfig"));
var ShardStorage = _interopRequireWildcard(require("@effect/cluster/ShardStorage"));
var SqlMessageStorage = _interopRequireWildcard(require("@effect/cluster/SqlMessageStorage"));
var SqlShardStorage = _interopRequireWildcard(require("@effect/cluster/SqlShardStorage"));
var FetchHttpClient = _interopRequireWildcard(require("@effect/platform/FetchHttpClient"));
var RpcSerialization = _interopRequireWildcard(require("@effect/rpc/RpcSerialization"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var Option = _interopRequireWildcard(require("effect/Option"));
var BunHttpServer = _interopRequireWildcard(require("./BunHttpServer.js"));
var BunSocket = _interopRequireWildcard(require("./BunSocket.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category Layers
 */
const layerHttpServer = exports.layerHttpServer = /*#__PURE__*/Effect.gen(function* () {
  const config = yield* ShardingConfig.ShardingConfig;
  if (Option.isNone(config.runnerAddress)) {
    return yield* Effect.dieMessage("BunClusterHttpRunners.layerHttpServer: ShardingConfig.runnerAddress is None");
  }
  return BunHttpServer.layer(config.runnerAddress.value);
}).pipe(Layer.unwrapEffect);
/**
 * @since 1.0.0
 * @category Layers
 */
const layer = options => {
  const layer = options.clientOnly
  // client only
  ? options.transport === "http" ? Layer.provide(HttpRunner.layerHttpClientOnly, FetchHttpClient.layer) : Layer.provide(HttpRunner.layerWebsocketClientOnly, BunSocket.layerWebSocketConstructor)
  // with server
  : options.transport === "http" ? Layer.provide(HttpRunner.layerHttp, [layerHttpServer, FetchHttpClient.layer]) : Layer.provide(HttpRunner.layerWebsocket, [layerHttpServer, BunSocket.layerWebSocketConstructor]);
  return layer.pipe(Layer.provide(options?.storage === "sql" ? options.clientOnly ? [SqlMessageStorage.layer] : [SqlMessageStorage.layer, SqlShardStorage.layer] : [MessageStorage.layerNoop, ShardStorage.layerNoop]), Layer.provide(ShardingConfig.layerFromEnv(options?.shardingConfig)), Layer.provide(options?.serialization === "ndjson" ? RpcSerialization.layerNdjson : RpcSerialization.layerMsgPack));
};
exports.layer = layer;
//# sourceMappingURL=BunClusterRunnerHttp.js.map