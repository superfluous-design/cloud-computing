"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requestSource = exports.make = exports.layerTest = exports.layerServer = exports.layerContext = exports.layerConfig = exports.layer = void 0;
var Cookies = _interopRequireWildcard(require("@effect/platform/Cookies"));
var Etag = _interopRequireWildcard(require("@effect/platform/Etag"));
var FetchHttpClient = _interopRequireWildcard(require("@effect/platform/FetchHttpClient"));
var Headers = _interopRequireWildcard(require("@effect/platform/Headers"));
var App = _interopRequireWildcard(require("@effect/platform/HttpApp"));
var IncomingMessage = _interopRequireWildcard(require("@effect/platform/HttpIncomingMessage"));
var Server = _interopRequireWildcard(require("@effect/platform/HttpServer"));
var Error = _interopRequireWildcard(require("@effect/platform/HttpServerError"));
var ServerRequest = _interopRequireWildcard(require("@effect/platform/HttpServerRequest"));
var Socket = _interopRequireWildcard(require("@effect/platform/Socket"));
var UrlParams = _interopRequireWildcard(require("@effect/platform/UrlParams"));
var Config = _interopRequireWildcard(require("effect/Config"));
var Deferred = _interopRequireWildcard(require("effect/Deferred"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Exit = _interopRequireWildcard(require("effect/Exit"));
var FiberSet = _interopRequireWildcard(require("effect/FiberSet"));
var Inspectable = _interopRequireWildcard(require("effect/Inspectable"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var Option = _interopRequireWildcard(require("effect/Option"));
var Stream = _interopRequireWildcard(require("effect/Stream"));
var BunContext = _interopRequireWildcard(require("../BunContext.js"));
var Platform = _interopRequireWildcard(require("../BunHttpPlatform.js"));
var MultipartBun = _interopRequireWildcard(require("./multipart.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/** @internal */
const make = options => Effect.gen(function* () {
  const handlerStack = [function (_request, _server) {
    return new Response("not found", {
      status: 404
    });
  }];
  const server = Bun.serve({
    ...options,
    fetch: handlerStack[0],
    websocket: {
      open(ws) {
        Deferred.unsafeDone(ws.data.deferred, Exit.succeed(ws));
      },
      message(ws, message) {
        ws.data.run(message);
      },
      close(ws, code, closeReason) {
        Deferred.unsafeDone(ws.data.closeDeferred, Socket.defaultCloseCodeIsError(code) ? Exit.fail(new Socket.SocketCloseError({
          reason: "Close",
          code,
          closeReason
        })) : Exit.void);
      }
    }
  });
  yield* Effect.addFinalizer(() => Effect.sync(() => {
    server.stop();
  }));
  return Server.make({
    address: {
      _tag: "TcpAddress",
      port: server.port,
      hostname: server.hostname
    },
    serve(httpApp, middleware) {
      return Effect.gen(function* () {
        const runFork = yield* FiberSet.makeRuntime();
        const runtime = yield* Effect.runtime();
        const app = App.toHandled(httpApp, (request, response) => Effect.sync(() => {
          ;
          request.resolve(makeResponse(request, response, runtime));
        }), middleware);
        function handler(request, server) {
          return new Promise((resolve, _reject) => {
            const fiber = runFork(Effect.provideService(app, ServerRequest.HttpServerRequest, new ServerRequestImpl(request, resolve, removeHost(request.url), server)));
            request.signal.addEventListener("abort", () => {
              runFork(fiber.interruptAsFork(Error.clientAbortFiberId));
            }, {
              once: true
            });
          });
        }
        yield* Effect.acquireRelease(Effect.sync(() => {
          handlerStack.push(handler);
          server.reload({
            fetch: handler
          });
        }), () => Effect.sync(() => {
          handlerStack.pop();
          server.reload({
            fetch: handlerStack[handlerStack.length - 1]
          });
        }));
      });
    }
  });
});
exports.make = make;
const makeResponse = (request, response, runtime) => {
  const fields = {
    headers: new globalThis.Headers(response.headers),
    status: response.status
  };
  if (!Cookies.isEmpty(response.cookies)) {
    for (const header of Cookies.toSetCookieHeaders(response.cookies)) {
      fields.headers.append("set-cookie", header);
    }
  }
  if (response.statusText !== undefined) {
    fields.statusText = response.statusText;
  }
  if (request.method === "HEAD") {
    return new Response(undefined, fields);
  }
  const body = response.body;
  switch (body._tag) {
    case "Empty":
      {
        return new Response(undefined, fields);
      }
    case "Uint8Array":
    case "Raw":
      {
        return new Response(body.body, fields);
      }
    case "FormData":
      {
        return new Response(body.formData, fields);
      }
    case "Stream":
      {
        return new Response(Stream.toReadableStreamRuntime(body.stream, runtime), fields);
      }
  }
};
/** @internal */
const layerServer = options => Layer.scoped(Server.HttpServer, make(options));
/** @internal */
exports.layerServer = layerServer;
const layerContext = exports.layerContext = /*#__PURE__*/Layer.mergeAll(Platform.layer, Etag.layerWeak, BunContext.layer);
/** @internal */
const layer = options => Layer.mergeAll(Layer.scoped(Server.HttpServer, make(options)), layerContext);
/** @internal */
exports.layer = layer;
const layerTest = exports.layerTest = /*#__PURE__*/Server.layerTestClient.pipe(/*#__PURE__*/Layer.provide(/*#__PURE__*/FetchHttpClient.layer.pipe(/*#__PURE__*/Layer.provide(/*#__PURE__*/Layer.succeed(FetchHttpClient.RequestInit, {
  keepalive: false
})))), /*#__PURE__*/Layer.provideMerge(/*#__PURE__*/layer({
  port: 0
})));
/** @internal */
const layerConfig = options => Layer.mergeAll(Layer.scoped(Server.HttpServer, Effect.flatMap(Config.unwrap(options), make)), layerContext);
exports.layerConfig = layerConfig;
function wsDefaultRun(_) {
  this.buffer.push(_);
}
class ServerRequestImpl extends Inspectable.Class {
  source;
  resolve;
  url;
  bunServer;
  headersOverride;
  remoteAddressOverride;
  [ServerRequest.TypeId];
  [IncomingMessage.TypeId];
  constructor(source, resolve, url, bunServer, headersOverride, remoteAddressOverride) {
    super();
    this.source = source;
    this.resolve = resolve;
    this.url = url;
    this.bunServer = bunServer;
    this.headersOverride = headersOverride;
    this.remoteAddressOverride = remoteAddressOverride;
    this[ServerRequest.TypeId] = ServerRequest.TypeId;
    this[IncomingMessage.TypeId] = IncomingMessage.TypeId;
  }
  toJSON() {
    return IncomingMessage.inspect(this, {
      _id: "@effect/platform/HttpServerRequest",
      method: this.method,
      url: this.originalUrl
    });
  }
  modify(options) {
    return new ServerRequestImpl(this.source, this.resolve, options.url ?? this.url, this.bunServer, options.headers ?? this.headersOverride, options.remoteAddress ?? this.remoteAddressOverride);
  }
  get method() {
    return this.source.method.toUpperCase();
  }
  get originalUrl() {
    return this.source.url;
  }
  get remoteAddress() {
    return this.remoteAddressOverride ? Option.some(this.remoteAddressOverride) : Option.fromNullable(this.bunServer.requestIP(this.source)?.address);
  }
  get headers() {
    this.headersOverride ??= Headers.fromInput(this.source.headers);
    return this.headersOverride;
  }
  cachedCookies;
  get cookies() {
    if (this.cachedCookies) {
      return this.cachedCookies;
    }
    return this.cachedCookies = Cookies.parseHeader(this.headers.cookie ?? "");
  }
  get stream() {
    return this.source.body ? Stream.fromReadableStream(() => this.source.body, cause => new Error.RequestError({
      request: this,
      reason: "Decode",
      cause
    })) : Stream.fail(new Error.RequestError({
      request: this,
      reason: "Decode",
      description: "can not create stream from empty body"
    }));
  }
  textEffect;
  get text() {
    if (this.textEffect) {
      return this.textEffect;
    }
    this.textEffect = Effect.runSync(Effect.cached(Effect.tryPromise({
      try: () => this.source.text(),
      catch: cause => new Error.RequestError({
        request: this,
        reason: "Decode",
        cause
      })
    })));
    return this.textEffect;
  }
  get json() {
    return Effect.tryMap(this.text, {
      try: _ => JSON.parse(_),
      catch: cause => new Error.RequestError({
        request: this,
        reason: "Decode",
        cause
      })
    });
  }
  get urlParamsBody() {
    return Effect.flatMap(this.text, _ => Effect.try({
      try: () => UrlParams.fromInput(new URLSearchParams(_)),
      catch: cause => new Error.RequestError({
        request: this,
        reason: "Decode",
        cause
      })
    }));
  }
  multipartEffect;
  get multipart() {
    if (this.multipartEffect) {
      return this.multipartEffect;
    }
    this.multipartEffect = Effect.runSync(Effect.cached(MultipartBun.persisted(this.source)));
    return this.multipartEffect;
  }
  get multipartStream() {
    return MultipartBun.stream(this.source);
  }
  arrayBufferEffect;
  get arrayBuffer() {
    if (this.arrayBufferEffect) {
      return this.arrayBufferEffect;
    }
    this.arrayBufferEffect = Effect.runSync(Effect.cached(Effect.tryPromise({
      try: () => this.source.arrayBuffer(),
      catch: cause => new Error.RequestError({
        request: this,
        reason: "Decode",
        cause
      })
    })));
    return this.arrayBufferEffect;
  }
  get upgrade() {
    return Effect.flatMap(Effect.all([Deferred.make(), Deferred.make(), Effect.makeSemaphore(1)]), ([deferred, closeDeferred, semaphore]) => Effect.async(resume => {
      const success = this.bunServer.upgrade(this.source, {
        data: {
          deferred,
          closeDeferred,
          buffer: [],
          run: wsDefaultRun
        }
      });
      if (!success) {
        resume(Effect.fail(new Error.RequestError({
          request: this,
          reason: "Decode",
          description: "Not an upgradeable ServerRequest"
        })));
        return;
      }
      resume(Effect.map(Deferred.await(deferred), ws => {
        const write = chunk => Effect.sync(() => {
          if (typeof chunk === "string") {
            ws.sendText(chunk);
          } else if (Socket.isCloseEvent(chunk)) {
            ws.close(chunk.code, chunk.reason);
          } else {
            ws.sendBinary(chunk);
          }
          return true;
        });
        const writer = Effect.succeed(write);
        const runRaw = handler => FiberSet.make().pipe(Effect.flatMap(set => FiberSet.runtime(set)().pipe(Effect.flatMap(run => {
          function runRaw(data) {
            const result = handler(data);
            if (Effect.isEffect(result)) {
              run(result);
            }
          }
          ws.data.run = runRaw;
          ws.data.buffer.forEach(runRaw);
          ws.data.buffer.length = 0;
          return FiberSet.join(set);
        }))), Effect.scoped, Effect.onExit(exit => Effect.sync(() => ws.close(exit._tag === "Success" ? 1000 : 1011))), Effect.raceFirst(Deferred.await(closeDeferred)), semaphore.withPermits(1));
        const encoder = new TextEncoder();
        const run = handler => runRaw(data => typeof data === "string" ? handler(encoder.encode(data)) : handler(data));
        return Socket.Socket.of({
          [Socket.TypeId]: Socket.TypeId,
          run,
          runRaw,
          writer
        });
      }));
    }));
  }
}
const removeHost = url => {
  if (url[0] === "/") {
    return url;
  }
  const index = url.indexOf("/", url.indexOf("//") + 2);
  return index === -1 ? "/" : url.slice(index);
};
/** @internal */
const requestSource = self => self.source;
exports.requestSource = requestSource;
//# sourceMappingURL=httpServer.js.map