import * as ShardingConfig from "@effect/cluster/ShardingConfig";
import * as ShardManager from "@effect/cluster/ShardManager";
import type * as Etag from "@effect/platform/Etag";
import type { HttpPlatform } from "@effect/platform/HttpPlatform";
import type { HttpServer } from "@effect/platform/HttpServer";
import type { ServeError } from "@effect/platform/HttpServerError";
import type { SqlClient } from "@effect/sql/SqlClient";
import type { SqlError } from "@effect/sql/SqlError";
import type { ConfigError } from "effect/ConfigError";
import * as Layer from "effect/Layer";
import type { BunContext } from "./BunContext.js";
/**
 * @since 1.0.0
 * @category Layers
 */
export declare const layerHttpServer: Layer.Layer<HttpPlatform | Etag.Generator | BunContext | HttpServer, ServeError, ShardingConfig.ShardingConfig>;
/**
 * @since 1.0.0
 * @category Layers
 */
export declare const layer: <const Storage extends "sql" | "noop" = "noop">(options: {
    readonly transport: "http" | "websocket";
    readonly serialization?: "msgpack" | "ndjson" | undefined;
    readonly shardingConfig?: Partial<ShardingConfig.ShardingConfig["Type"]> | undefined;
    readonly storage?: Storage | undefined;
}) => Layer.Layer<ShardManager.ShardManager, ServeError | ConfigError | (Storage extends "sql" ? SqlError : never), Storage extends "sql" ? SqlClient : never>;
//# sourceMappingURL=BunClusterShardManagerHttp.d.ts.map