/**
 * @since 1.0.0
 */
import * as HttpShardManager from "@effect/cluster/HttpShardManager";
import * as ShardingConfig from "@effect/cluster/ShardingConfig";
import * as ShardManager from "@effect/cluster/ShardManager";
import * as ShardStorage from "@effect/cluster/ShardStorage";
import * as SqlShardStorage from "@effect/cluster/SqlShardStorage";
import * as FetchHttpClient from "@effect/platform/FetchHttpClient";
import * as RpcSerialization from "@effect/rpc/RpcSerialization";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import * as BunHttpServer from "./BunHttpServer.js";
import * as BunSocket from "./BunSocket.js";
/**
 * @since 1.0.0
 * @category Layers
 */
export const layerHttpServer = /*#__PURE__*/Effect.gen(function* () {
  const config = yield* ShardingConfig.ShardingConfig;
  return BunHttpServer.layer(config.shardManagerAddress);
}).pipe(Layer.unwrapEffect);
/**
 * @since 1.0.0
 * @category Layers
 */
export const layer = options => {
  const layer = options.transport === "http" ? HttpShardManager.layerHttp.pipe(Layer.provide([HttpShardManager.layerRunnerHealthHttp, layerHttpServer]), Layer.provide(FetchHttpClient.layer)) : HttpShardManager.layerWebsocket.pipe(Layer.provide([HttpShardManager.layerRunnerHealthWebsocket, layerHttpServer]), Layer.provide(BunSocket.layerWebSocketConstructor));
  return layer.pipe(Layer.provide(options?.storage === "sql" ? SqlShardStorage.layer : ShardStorage.layerNoop), Layer.provide([ShardingConfig.layerFromEnv(options.shardingConfig), ShardManager.layerConfigFromEnv, options?.serialization === "ndjson" ? RpcSerialization.layerNdjson : RpcSerialization.layerMsgPack]));
};
//# sourceMappingURL=BunClusterShardManagerHttp.js.map