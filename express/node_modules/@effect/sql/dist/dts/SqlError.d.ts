/**
 * @since 1.0.0
 */
export declare const SqlErrorTypeId: unique symbol;
/**
 * @since 1.0.0
 */
export type SqlErrorTypeId = typeof SqlErrorTypeId;
declare const SqlError_base: new <A extends Record<string, any>>(args: import("effect/Types").Simplify<A>) => import("effect/Cause").YieldableError & Record<typeof SqlErrorTypeId, typeof SqlErrorTypeId> & {
    readonly _tag: "SqlError";
} & Readonly<A>;
/**
 * @since 1.0.0
 */
export declare class SqlError extends SqlError_base<{
    cause: unknown;
    message?: string;
}> {
}
declare const ResultLengthMismatch_base: new <A extends Record<string, any>>(args: import("effect/Types").Simplify<A>) => import("effect/Cause").YieldableError & Record<typeof SqlErrorTypeId, typeof SqlErrorTypeId> & {
    readonly _tag: "ResultLengthMismatch";
} & Readonly<A>;
/**
 * @since 1.0.0
 */
export declare class ResultLengthMismatch extends ResultLengthMismatch_base<{
    readonly expected: number;
    readonly actual: number;
}> {
    get message(): string;
}
export {};
//# sourceMappingURL=SqlError.d.ts.map