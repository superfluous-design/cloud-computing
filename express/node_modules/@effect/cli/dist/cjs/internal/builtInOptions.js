"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wizardOptions = exports.versionOptions = exports.showWizard = exports.showVersion = exports.showHelp = exports.showCompletions = exports.setLogLevel = exports.logLevelOptions = exports.isShowWizard = exports.isShowVersion = exports.isShowHelp = exports.isShowCompletions = exports.helpOptions = exports.completionsOptions = exports.builtIns = exports.builtInOptions = void 0;
var LogLevel = _interopRequireWildcard(require("effect/LogLevel"));
var Option = _interopRequireWildcard(require("effect/Option"));
var InternalOptions = _interopRequireWildcard(require("./options.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/** @internal */
const setLogLevel = level => ({
  _tag: "SetLogLevel",
  level
});
/** @internal */
exports.setLogLevel = setLogLevel;
const showCompletions = shellType => ({
  _tag: "ShowCompletions",
  shellType
});
/** @internal */
exports.showCompletions = showCompletions;
const showHelp = (usage, helpDoc) => ({
  _tag: "ShowHelp",
  usage,
  helpDoc
});
/** @internal */
exports.showHelp = showHelp;
const showWizard = command => ({
  _tag: "ShowWizard",
  command
});
/** @internal */
exports.showWizard = showWizard;
const showVersion = exports.showVersion = {
  _tag: "ShowVersion"
};
/** @internal */
const isShowCompletions = self => self._tag === "ShowCompletions";
/** @internal */
exports.isShowCompletions = isShowCompletions;
const isShowHelp = self => self._tag === "ShowHelp";
/** @internal */
exports.isShowHelp = isShowHelp;
const isShowWizard = self => self._tag === "ShowWizard";
/** @internal */
exports.isShowWizard = isShowWizard;
const isShowVersion = self => self._tag === "ShowVersion";
/** @internal */
exports.isShowVersion = isShowVersion;
const completionsOptions = exports.completionsOptions = /*#__PURE__*/InternalOptions.choiceWithValue("completions", [["sh", "bash"], ["bash", "bash"], ["fish", "fish"], ["zsh", "zsh"]]).pipe(InternalOptions.optional, /*#__PURE__*/InternalOptions.withDescription("Generate a completion script for a specific shell."));
/** @internal */
const logLevelOptions = exports.logLevelOptions = /*#__PURE__*/InternalOptions.choiceWithValue("log-level", LogLevel.allLevels.map(level => [level._tag.toLowerCase(), level])).pipe(InternalOptions.optional, /*#__PURE__*/InternalOptions.withDescription("Sets the minimum log level for a command."));
/** @internal */
const helpOptions = exports.helpOptions = /*#__PURE__*/InternalOptions.boolean("help").pipe(/*#__PURE__*/InternalOptions.withAlias("h"), /*#__PURE__*/InternalOptions.withDescription("Show the help documentation for a command."));
/** @internal */
const versionOptions = exports.versionOptions = /*#__PURE__*/InternalOptions.boolean("version").pipe(/*#__PURE__*/InternalOptions.withDescription("Show the version of the application."));
/** @internal */
const wizardOptions = exports.wizardOptions = /*#__PURE__*/InternalOptions.boolean("wizard").pipe(/*#__PURE__*/InternalOptions.withDescription("Start wizard mode for a command."));
/** @internal */
const builtIns = exports.builtIns = /*#__PURE__*/InternalOptions.all({
  completions: completionsOptions,
  logLevel: logLevelOptions,
  help: helpOptions,
  wizard: wizardOptions,
  version: versionOptions
});
/** @internal */
const builtInOptions = (command, usage, helpDoc) => InternalOptions.map(builtIns, builtIn => {
  if (Option.isSome(builtIn.completions)) {
    return Option.some(showCompletions(builtIn.completions.value));
  }
  if (Option.isSome(builtIn.logLevel)) {
    return Option.some(setLogLevel(builtIn.logLevel.value));
  }
  if (builtIn.help) {
    return Option.some(showHelp(usage, helpDoc));
  }
  if (builtIn.wizard) {
    return Option.some(showWizard(command));
  }
  if (builtIn.version) {
    return Option.some(showVersion);
  }
  return Option.none();
});
exports.builtInOptions = builtInOptions;
//# sourceMappingURL=builtInOptions.js.map