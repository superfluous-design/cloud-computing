"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wizard = exports.withSchema = exports.withFallbackConfig = exports.withDescription = exports.withDefault = exports.validate = exports.text = exports.secret = exports.repeated = exports.redacted = exports.path = exports.optional = exports.none = exports.mapTryCatch = exports.mapEffect = exports.map = exports.isArgs = exports.integer = exports.getUsage = exports.getMinSize = exports.getMaxSize = exports.getIdentifier = exports.getHelp = exports.float = exports.fileText = exports.fileSchema = exports.fileParse = exports.fileContent = exports.file = exports.directory = exports.date = exports.choice = exports.boolean = exports.between = exports.atMost = exports.atLeast = exports.all = exports.ArgsTypeId = void 0;
var InternalArgs = _interopRequireWildcard(require("./internal/args.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 * @category symbols
 */
const ArgsTypeId = exports.ArgsTypeId = InternalArgs.ArgsTypeId;
/**
 * @since 1.0.0
 * @category refinements
 */
const isArgs = exports.isArgs = InternalArgs.isArgs;
/**
 * @since 1.0.0
 * @category constructors
 */
const all = exports.all = InternalArgs.all;
/**
 * @since 1.0.0
 * @category combinators
 */
const atLeast = exports.atLeast = InternalArgs.atLeast;
/**
 * @since 1.0.0
 * @category combinators
 */
const atMost = exports.atMost = InternalArgs.atMost;
/**
 * @since 1.0.0
 * @category combinators
 */
const between = exports.between = InternalArgs.between;
/**
 * Creates a boolean argument.
 *
 * Can optionally provide a custom argument name (defaults to `"boolean"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const boolean = exports.boolean = InternalArgs.boolean;
/**
 * Creates a choice argument.
 *
 * Can optionally provide a custom argument name (defaults to `"choice"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const choice = exports.choice = InternalArgs.choice;
/**
 * Creates a date argument.
 *
 * Can optionally provide a custom argument name (defaults to `"date"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const date = exports.date = InternalArgs.date;
/**
 * Creates a directory argument.
 *
 * Can optionally provide a custom argument name (defaults to `"directory"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const directory = exports.directory = InternalArgs.directory;
/**
 * Creates a file argument.
 *
 * Can optionally provide a custom argument name (defaults to `"file"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const file = exports.file = InternalArgs.file;
/**
 * Creates a file argument that reads its contents.
 *
 * Can optionally provide a custom argument name (defaults to `"file"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const fileContent = exports.fileContent = InternalArgs.fileContent;
/**
 * Creates a file argument that reads and parses its contents.
 *
 * Can optionally provide a custom argument name (defaults to `"file"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const fileParse = exports.fileParse = InternalArgs.fileParse;
/**
 * Creates a file argument that reads, parses and validates its contents.
 *
 * Can optionally provide a custom argument name (defaults to `"file"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const fileSchema = exports.fileSchema = InternalArgs.fileSchema;
/**
 * Creates a file argument that reads it's contents.
 *
 * Can optionally provide a custom argument name (defaults to `"file"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const fileText = exports.fileText = InternalArgs.fileText;
/**
 * Creates a floating point number argument.
 *
 * Can optionally provide a custom argument name (defaults to `"float"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const float = exports.float = InternalArgs.float;
/**
 * @since 1.0.0
 * @category combinators
 */
const getHelp = exports.getHelp = InternalArgs.getHelp;
/**
 * @since 1.0.0
 * @category combinators
 */
const getIdentifier = exports.getIdentifier = InternalArgs.getIdentifier;
/**
 * @since 1.0.0
 * @category combinators
 */
const getMinSize = exports.getMinSize = InternalArgs.getMinSize;
/**
 * @since 1.0.0
 * @category combinators
 */
const getMaxSize = exports.getMaxSize = InternalArgs.getMaxSize;
/**
 * @since 1.0.0
 * @category combinators
 */
const getUsage = exports.getUsage = InternalArgs.getUsage;
/**
 * Creates an integer argument.
 *
 * Can optionally provide a custom argument name (defaults to `"integer"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const integer = exports.integer = InternalArgs.integer;
/**
 * @since 1.0.0
 * @category mapping
 */
const map = exports.map = InternalArgs.map;
/**
 * @since 1.0.0
 * @category mapping
 */
const mapEffect = exports.mapEffect = InternalArgs.mapEffect;
/**
 * @since 1.0.0
 * @category mapping
 */
const mapTryCatch = exports.mapTryCatch = InternalArgs.mapTryCatch;
/**
 * @since 1.0.0
 * @category combinators
 */
const optional = exports.optional = InternalArgs.optional;
/**
 *  Creates an empty argument.
 *
 * @since 1.0.0
 * @category constructors
 */
const none = exports.none = InternalArgs.none;
/**
 * Creates a path argument.
 *
 * Can optionally provide a custom argument name (defaults to `"path"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const path = exports.path = InternalArgs.path;
/**
 * @since 1.0.0
 * @category combinators
 */
const repeated = exports.repeated = InternalArgs.repeated;
/**
 * Creates a text argument.
 *
 * Can optionally provide a custom argument name (defaults to `"redacted"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const redacted = exports.redacted = InternalArgs.redacted;
/**
 * Creates a text argument.
 *
 * Can optionally provide a custom argument name (defaults to `"secret"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const secret = exports.secret = InternalArgs.secret;
/**
 * Creates a text argument.
 *
 * Can optionally provide a custom argument name (defaults to `"text"`).
 *
 * @since 1.0.0
 * @category constructors
 */
const text = exports.text = InternalArgs.text;
/**
 * @since 1.0.0
 * @category combinators
 */
const validate = exports.validate = InternalArgs.validate;
/**
 * @since 1.0.0
 * @category combinators
 */
const withDefault = exports.withDefault = InternalArgs.withDefault;
/**
 * @since 1.0.0
 * @category combinators
 */
const withFallbackConfig = exports.withFallbackConfig = InternalArgs.withFallbackConfig;
/**
 * @since 1.0.0
 * @category combinators
 */
const withDescription = exports.withDescription = InternalArgs.withDescription;
/**
 * @since 1.0.0
 * @category combinators
 */
const withSchema = exports.withSchema = InternalArgs.withSchema;
/**
 * @since 1.0.0
 * @category combinators
 */
const wizard = exports.wizard = InternalArgs.wizard;
//# sourceMappingURL=Args.js.map