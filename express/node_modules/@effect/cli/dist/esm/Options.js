import * as InternalOptions from "./internal/options.js";
/**
 * @since 1.0.0
 * @category symbols
 */
export const OptionsTypeId = InternalOptions.OptionsTypeId;
// =============================================================================
// Refinements
// =============================================================================
/**
 * @since 1.0.0
 * @category refinements
 */
export const isOptions = InternalOptions.isOptions;
// =============================================================================
// Constructors
// =============================================================================
/**
 * @since 1.0.0
 * @category constructors
 */
export const all = InternalOptions.all;
/**
 * @since 1.0.0
 * @category constructors
 */
export const boolean = InternalOptions.boolean;
/**
 * Constructs command-line `Options` that represent a choice between several
 * inputs. The input will be mapped to it's associated value during parsing.
 *
 * **Example**
 *
 * ```ts
 * import * as Options from "@effect/cli/Options"
 *
 * export const animal: Options.Options<"dog" | "cat"> = Options.choice(
 *   "animal",
 *   ["dog", "cat"]
 * )
 * ```
 *
 * @since 1.0.0
 * @category constructors
 */
export const choice = InternalOptions.choice;
/**
 * Constructs command-line `Options` that represent a choice between several
 * inputs. The input will be mapped to it's associated value during parsing.
 *
 * **Example**
 *
 * ```ts
 * import * as Options from "@effect/cli/Options"
 * import * as Data from "effect/Data"
 *
 * export type Animal = Dog | Cat
 *
 * export interface Dog {
 *   readonly _tag: "Dog"
 * }
 *
 * export const Dog = Data.tagged<Dog>("Dog")
 *
 * export interface Cat {
 *   readonly _tag: "Cat"
 * }
 *
 * export const Cat = Data.tagged<Cat>("Cat")
 *
 * export const animal: Options.Options<Animal> = Options.choiceWithValue("animal", [
 *   ["dog", Dog()],
 *   ["cat", Cat()],
 * ])
 * ```
 *
 * @since 1.0.0
 * @category constructors
 */
export const choiceWithValue = InternalOptions.choiceWithValue;
/**
 * @since 1.0.0
 * @category constructors
 */
export const date = InternalOptions.date;
/**
 * Creates a parameter expecting path to a directory.
 *
 * @since 1.0.0
 * @category constructors
 */
export const directory = InternalOptions.directory;
/**
 * Creates a parameter expecting path to a file.
 *
 * @since 1.0.0
 * @category constructors
 */
export const file = InternalOptions.file;
/**
 * Creates a parameter expecting path to a file and reads its contents.
 *
 * @since 1.0.0
 * @category constructors
 */
export const fileContent = InternalOptions.fileContent;
/**
 * Creates a parameter expecting path to a file and parse its contents.
 *
 * @since 1.0.0
 * @category constructors
 */
export const fileParse = InternalOptions.fileParse;
/**
 * Creates a parameter expecting path to a file, parse its contents and validate
 * it with a Schema.
 *
 * @since 1.0.0
 * @category constructors
 */
export const fileSchema = InternalOptions.fileSchema;
/**
 * Creates a parameter expecting path to a file and reads its contents.
 *
 * @since 1.0.0
 * @category constructors
 */
export const fileText = InternalOptions.fileText;
/**
 * @since 1.0.0
 * @category constructors
 */
export const float = InternalOptions.float;
/**
 * @since 1.0.0
 * @category combinators
 */
export const getHelp = InternalOptions.getHelp;
/**
 * @since 1.0.0
 * @category combinators
 */
export const getIdentifier = InternalOptions.getIdentifier;
/**
 * @since 1.0.0
 * @category combinators
 */
export const getUsage = InternalOptions.getUsage;
/**
 * @since 1.0.0
 * @category constructors
 */
export const integer = InternalOptions.integer;
/**
 * @since 1.0.0
 * @category constructors
 */
export const keyValueMap = InternalOptions.keyValueMap;
/**
 * @since 1.0.0
 * @category constructors
 */
export const none = InternalOptions.none;
/**
 * @since 1.0.0
 * @category constructors
 */
export const redacted = InternalOptions.redacted;
/**
 * @since 1.0.0
 * @category constructors
 * @deprecated
 */
export const secret = InternalOptions.secret;
/**
 * @since 1.0.0
 * @category constructors
 */
export const text = InternalOptions.text;
// =============================================================================
// Combinators
// =============================================================================
/**
 * @since 1.0.0
 * @category combinators
 */
export const atMost = InternalOptions.atMost;
/**
 * @since 1.0.0
 * @category combinators
 */
export const atLeast = InternalOptions.atLeast;
/**
 * @since 1.0.0
 * @category combinators
 */
export const between = InternalOptions.between;
/**
 * @since 1.0.0
 * @category combinators
 */
export const filterMap = InternalOptions.filterMap;
/**
 * Returns `true` if the specified `Options` is a boolean flag, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category combinators
 */
export const isBool = InternalOptions.isBool;
/**
 * @since 1.0.0
 * @category combinators
 */
export const map = InternalOptions.map;
/**
 * @since 1.0.0
 * @category combinators
 */
export const mapEffect = InternalOptions.mapEffect;
/**
 * @since 1.0.0
 * @category combinators
 */
export const mapTryCatch = InternalOptions.mapTryCatch;
/**
 * @since 1.0.0
 * @category combinators
 */
export const optional = InternalOptions.optional;
/**
 * @since 1.0.0
 * @category combinators
 */
export const orElse = InternalOptions.orElse;
/**
 * @since 1.0.0
 * @category combinators
 */
export const orElseEither = InternalOptions.orElseEither;
/**
 * @since 1.0.0
 * @category combinators
 */
export const parse = InternalOptions.parse;
/**
 * Indicates that the specified command-line option can be repeated `0` or more
 * times.
 *
 * **NOTE**: if the command-line option is not provided, and empty array will be
 * returned as the value for said option.
 *
 * @since 1.0.0
 * @category combinators
 */
export const repeated = InternalOptions.repeated;
/**
 * Processes the provided command-line arguments, searching for the specified
 * `Options`.
 *
 * Returns an `Option<ValidationError>`, any leftover arguments, and the
 * constructed value of type `A`. The possible error inside
 * `Option<ValidationError>` would only be triggered if there is an error when
 * parsing the command-line arguments. This is because `ValidationError`s are
 * also used internally to control the end of the command-line arguments (i.e.
 * the command-line symbol `--`) corresponding to options.
 *
 * @since 1.0.0
 * @category combinators
 */
export const processCommandLine = InternalOptions.processCommandLine;
/**
 * @since 1.0.0
 * @category combinators
 */
export const withAlias = InternalOptions.withAlias;
/**
 * @since 1.0.0
 * @category combinators
 */
export const withDefault = InternalOptions.withDefault;
/**
 * @since 1.0.0
 * @category combinators
 */
export const withFallbackConfig = InternalOptions.withFallbackConfig;
/**
 * @since 1.0.0
 * @category combinators
 */
export const withFallbackPrompt = InternalOptions.withFallbackPrompt;
/**
 * @since 1.0.0
 * @category combinators
 */
export const withDescription = InternalOptions.withDescription;
/**
 * @since 1.0.0
 * @category combinators
 */
export const withPseudoName = InternalOptions.withPseudoName;
/**
 * @since 1.0.0
 * @category combinators
 */
export const withSchema = InternalOptions.withSchema;
/**
 * @since 1.0.0
 * @category combinators
 */
export const wizard = InternalOptions.wizard;
//# sourceMappingURL=Options.js.map