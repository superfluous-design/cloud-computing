import * as InternalPrompt from "./internal/prompt.js";
import * as InternalConfirmPrompt from "./internal/prompt/confirm.js";
import * as InternalDatePrompt from "./internal/prompt/date.js";
import * as InternalFilePrompt from "./internal/prompt/file.js";
import * as InternalListPrompt from "./internal/prompt/list.js";
import * as InternalMultiSelectPrompt from "./internal/prompt/multi-select.js";
import * as InternalNumberPrompt from "./internal/prompt/number.js";
import * as InternalSelectPrompt from "./internal/prompt/select.js";
import * as InternalTextPrompt from "./internal/prompt/text.js";
import * as InternalTogglePrompt from "./internal/prompt/toggle.js";
/**
 * @since 1.0.0
 * @category symbols
 */
export const PromptTypeId = InternalPrompt.PromptTypeId;
/**
 * Runs all the provided prompts in sequence respecting the structure provided
 * in input.
 *
 * Supports either a tuple / iterable of prompts or a record / struct of prompts
 * as an argument.
 *
 * **Example**
 *
 * ```ts
 * import * as Prompt from "@effect/cli/Prompt"
 * import * as Effect from "effect/Effect"
 *
 * const username = Prompt.text({
 *   message: "Enter your username: "
 * })
 *
 * const password = Prompt.password({
 *   message: "Enter your password: ",
 *   validate: (value) =>
 *     value.length === 0
 *       ? Effect.fail("Password cannot be empty")
 *       : Effect.succeed(value)
 * })
 *
 * const allWithTuple = Prompt.all([username, password])
 *
 * const allWithRecord = Prompt.all({ username, password })
 * ```
 *
 * @since 1.0.0
 * @category collecting & elements
 */
export const all = InternalPrompt.all;
/**
 * @since 1.0.0
 * @category constructors
 */
export const confirm = InternalConfirmPrompt.confirm;
/**
 * Creates a custom `Prompt` from the specified initial state and handlers.
 *
 * The initial state can either be a pure value or an `Effect`. This is
 * particularly useful when the initial state of the `Prompt` must be computed
 * by performing some effectful computation, such as reading data from the file
 * system.
 *
 * A `Prompt` is essentially a render loop where user input triggers a new frame
 * to be rendered to the `Terminal`. The `handlers` of a custom prompt are used
 * to control what is rendered to the `Terminal` each frame. During each frame,
 * the following occurs:
 *
 *   1. The `render` handler is called with this frame's prompt state and prompt
 *      action and returns an ANSI escape string to be rendered to the
 *      `Terminal`
 *   2. The `Terminal` obtains input from the user
 *   3. The `process` handler is called with the input obtained from the user
 *      and this frame's prompt state and returns the next prompt action that
 *      should be performed
 *   4. The `clear` handler is called with this frame's prompt state and prompt
 *      action and returns an ANSI escape string used to clear the screen of
 *      the `Terminal`
 *
 * @since 1.0.0
 * @category constructors
 */
export const custom = InternalPrompt.custom;
/**
 * @since 1.0.0
 * @category constructors
 */
export const date = InternalDatePrompt.date;
/**
 * @since 1.0.0
 * @category constructors
 */
export const file = InternalFilePrompt.file;
/**
 * @since 1.0.0
 * @category combinators
 */
export const flatMap = InternalPrompt.flatMap;
/**
 * @since 1.0.0
 * @category constructors
 */
export const float = InternalNumberPrompt.float;
/**
 * @since 1.0.0
 * @category constructors
 */
export const hidden = InternalTextPrompt.hidden;
/**
 * @since 1.0.0
 * @category constructors
 */
export const integer = InternalNumberPrompt.integer;
/**
 * @since 1.0.0
 * @category constructors
 */
export const list = InternalListPrompt.list;
/**
 * @since 1.0.0
 * @category combinators
 */
export const map = InternalPrompt.map;
/**
 * @since 1.0.0
 * @category constructors
 */
export const password = InternalTextPrompt.password;
/**
 * Executes the specified `Prompt`.
 *
 * @since 1.0.0
 * @category execution
 */
export const run = InternalPrompt.run;
/**
 * @since 1.0.0
 * @category constructors
 */
export const select = InternalSelectPrompt.select;
/**
 * @since 1.0.0
 * @category constructors
 */
export const multiSelect = InternalMultiSelectPrompt.multiSelect;
/**
 * Creates a `Prompt` which immediately succeeds with the specified value.
 *
 * **NOTE**: This method will not attempt to obtain user input or render
 * anything to the screen.
 *
 * @since 1.0.0
 * @category constructors
 */
export const succeed = InternalPrompt.succeed;
/**
 * @since 1.0.0
 * @category constructors
 */
export const text = InternalTextPrompt.text;
/**
 * @since 1.0.0
 * @category constructors
 */
export const toggle = InternalTogglePrompt.toggle;
//# sourceMappingURL=Prompt.js.map