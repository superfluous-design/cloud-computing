import * as LogLevel from "effect/LogLevel";
import * as Option from "effect/Option";
import * as InternalOptions from "./options.js";
/** @internal */
export const setLogLevel = level => ({
  _tag: "SetLogLevel",
  level
});
/** @internal */
export const showCompletions = shellType => ({
  _tag: "ShowCompletions",
  shellType
});
/** @internal */
export const showHelp = (usage, helpDoc) => ({
  _tag: "ShowHelp",
  usage,
  helpDoc
});
/** @internal */
export const showWizard = command => ({
  _tag: "ShowWizard",
  command
});
/** @internal */
export const showVersion = {
  _tag: "ShowVersion"
};
/** @internal */
export const isShowCompletions = self => self._tag === "ShowCompletions";
/** @internal */
export const isShowHelp = self => self._tag === "ShowHelp";
/** @internal */
export const isShowWizard = self => self._tag === "ShowWizard";
/** @internal */
export const isShowVersion = self => self._tag === "ShowVersion";
/** @internal */
export const completionsOptions = /*#__PURE__*/InternalOptions.choiceWithValue("completions", [["sh", "bash"], ["bash", "bash"], ["fish", "fish"], ["zsh", "zsh"]]).pipe(InternalOptions.optional, /*#__PURE__*/InternalOptions.withDescription("Generate a completion script for a specific shell."));
/** @internal */
export const logLevelOptions = /*#__PURE__*/InternalOptions.choiceWithValue("log-level", LogLevel.allLevels.map(level => [level._tag.toLowerCase(), level])).pipe(InternalOptions.optional, /*#__PURE__*/InternalOptions.withDescription("Sets the minimum log level for a command."));
/** @internal */
export const helpOptions = /*#__PURE__*/InternalOptions.boolean("help").pipe(/*#__PURE__*/InternalOptions.withAlias("h"), /*#__PURE__*/InternalOptions.withDescription("Show the help documentation for a command."));
/** @internal */
export const versionOptions = /*#__PURE__*/InternalOptions.boolean("version").pipe(/*#__PURE__*/InternalOptions.withDescription("Show the version of the application."));
/** @internal */
export const wizardOptions = /*#__PURE__*/InternalOptions.boolean("wizard").pipe(/*#__PURE__*/InternalOptions.withDescription("Start wizard mode for a command."));
/** @internal */
export const builtIns = /*#__PURE__*/InternalOptions.all({
  completions: completionsOptions,
  logLevel: logLevelOptions,
  help: helpOptions,
  wizard: wizardOptions,
  version: versionOptions
});
/** @internal */
export const builtInOptions = (command, usage, helpDoc) => InternalOptions.map(builtIns, builtIn => {
  if (Option.isSome(builtIn.completions)) {
    return Option.some(showCompletions(builtIn.completions.value));
  }
  if (Option.isSome(builtIn.logLevel)) {
    return Option.some(setLogLevel(builtIn.logLevel.value));
  }
  if (builtIn.help) {
    return Option.some(showHelp(usage, helpDoc));
  }
  if (builtIn.wizard) {
    return Option.some(showWizard(command));
  }
  if (builtIn.version) {
    return Option.some(showVersion);
  }
  return Option.none();
});
//# sourceMappingURL=builtInOptions.js.map