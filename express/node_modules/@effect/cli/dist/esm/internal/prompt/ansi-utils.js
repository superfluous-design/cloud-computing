import * as Doc from "@effect/printer-ansi/AnsiDoc";
import * as Arr from "effect/Array";
import * as Effect from "effect/Effect";
import { pipe } from "effect/Function";
const defaultFigures = {
  arrowUp: /*#__PURE__*/Doc.text("↑"),
  arrowDown: /*#__PURE__*/Doc.text("↓"),
  arrowLeft: /*#__PURE__*/Doc.text("←"),
  arrowRight: /*#__PURE__*/Doc.text("→"),
  radioOn: /*#__PURE__*/Doc.text("◉"),
  radioOff: /*#__PURE__*/Doc.text("◯"),
  checkboxOn: /*#__PURE__*/Doc.text("☒"),
  checkboxOff: /*#__PURE__*/Doc.text("☐"),
  tick: /*#__PURE__*/Doc.text("✔"),
  cross: /*#__PURE__*/Doc.text("✖"),
  ellipsis: /*#__PURE__*/Doc.text("…"),
  pointerSmall: /*#__PURE__*/Doc.text("›"),
  line: /*#__PURE__*/Doc.text("─"),
  pointer: /*#__PURE__*/Doc.text("❯")
};
const windowsFigures = {
  arrowUp: defaultFigures.arrowUp,
  arrowDown: defaultFigures.arrowDown,
  arrowLeft: defaultFigures.arrowLeft,
  arrowRight: defaultFigures.arrowRight,
  radioOn: /*#__PURE__*/Doc.text("(*)"),
  radioOff: /*#__PURE__*/Doc.text("( )"),
  checkboxOn: /*#__PURE__*/Doc.text("[*]"),
  checkboxOff: /*#__PURE__*/Doc.text("[ ]"),
  tick: /*#__PURE__*/Doc.text("√"),
  cross: /*#__PURE__*/Doc.text("×"),
  ellipsis: /*#__PURE__*/Doc.text("..."),
  pointerSmall: /*#__PURE__*/Doc.text("»"),
  line: /*#__PURE__*/Doc.text("─"),
  pointer: /*#__PURE__*/Doc.text(">")
};
/** @internal */
export const figures = /*#__PURE__*/Effect.map(/*#__PURE__*/Effect.sync(() => process.platform === "win32"), isWindows => isWindows ? windowsFigures : defaultFigures);
/**
 * Clears all lines taken up by the specified `text`.
 *
 * @internal
 */
export function eraseText(text, columns) {
  if (columns === 0) {
    return Doc.cat(Doc.eraseLine, Doc.cursorTo(0));
  }
  let rows = 0;
  const lines = text.split(/\r?\n/);
  for (const line of lines) {
    rows += 1 + Math.floor(Math.max(line.length - 1, 0) / columns);
  }
  return Doc.eraseLines(rows);
}
/** @internal */
export function lines(prompt, columns) {
  const lines = prompt.split(/\r?\n/);
  return columns === 0 ? lines.length : pipe(Arr.map(lines, line => Math.ceil(line.length / columns)), Arr.reduce(0, (left, right) => left + right));
}
//# sourceMappingURL=ansi-utils.js.map