/**
 * @since 1.0.0
 */
import type { FileSystem } from "@effect/platform/FileSystem";
import type { Effect } from "effect/Effect";
import type { Option } from "effect/Option";
import type { Pipeable } from "effect/Pipeable";
import type { CliConfig } from "./CliConfig.js";
import type { HelpDoc } from "./HelpDoc.js";
import type { Span } from "./HelpDoc/Span.js";
import type { Prompt } from "./Prompt.js";
/**
 * @since 1.0.0
 * @category symbol
 */
export declare const PrimitiveTypeId: unique symbol;
/**
 * @since 1.0.0
 * @category symbol
 */
export type PrimitiveTypeId = typeof PrimitiveTypeId;
/**
 * A `Primitive` represents the primitive types supported by Effect CLI.
 *
 * Each primitive type has a way to parse and validate from a string.
 *
 * @since 1.0.0
 * @category models
 */
export interface Primitive<A> extends Primitive.Variance<A> {
}
/**
 * @since 1.0.0
 */
export declare namespace Primitive {
    /**
     * @since 1.0.0
     * @category models
     */
    interface Variance<A> extends Pipeable {
        readonly [PrimitiveTypeId]: {
            readonly _A: (_: never) => A;
        };
    }
    /**
     * @since 1.0.0
     * @category models
     */
    type PathExists = "yes" | "no" | "either";
    /**
     * @since 1.0.0
     * @category models
     */
    type PathType = "file" | "directory" | "either";
    /**
     * @since 1.0.0
     * @category models
     */
    type ValueType<P> = [P] extends [
        {
            readonly [PrimitiveTypeId]: {
                readonly _A: (_: never) => infer A;
            };
        }
    ] ? A : never;
}
/**
 * @since 1.0.0
 * @category Predicates
 */
export declare const isBool: <A>(self: Primitive<A>) => boolean;
/**
 * Represents a boolean value.
 *
 * True values can be passed as one of: `["true", "1", "y", "yes" or "on"]`.
 * False value can be passed as one of: `["false", "o", "n", "no" or "off"]`.
 *
 * @since 1.0.0
 * @category constructors
 */
export declare const boolean: (defaultValue: Option<boolean>) => Primitive<boolean>;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const choice: <A>(alternatives: ReadonlyArray<[string, A]>) => Primitive<A>;
/**
 * Represents a date in ISO-8601 format, such as `2007-12-03T10:15:30`.
 *
 * @since 1.0.0
 * @category constructors
 */
export declare const date: Primitive<globalThis.Date>;
/**
 * Represents a floating point number.
 *
 * @since 1.0.0
 * @category constructors
 */
export declare const float: Primitive<number>;
/**
 * Returns a text representation of the valid choices for a primitive type, if
 * any.
 *
 * @since 1.0.0
 * @category combinators
 */
export declare const getChoices: <A>(self: Primitive<A>) => Option<string>;
/**
 * Returns help documentation for a primitive type.
 *
 * @since 1.0.0
 * @category combinators
 */
export declare const getHelp: <A>(self: Primitive<A>) => Span;
/**
 * Returns a string representation of the primitive type.
 *
 * @since 1.0.0
 * @category combinators
 */
export declare const getTypeName: <A>(self: Primitive<A>) => string;
/**
 * Represents an integer.
 *
 * @since 1.0.0
 * @category constructors
 */
export declare const integer: Primitive<number>;
/**
 * Represents a user-defined piece of text.
 *
 * @since 1.0.0
 * @category constructors
 */
export declare const text: Primitive<string>;
/**
 * Validates that the specified value, if any, matches the specified primitive
 * type.
 *
 * @since 1.0.0
 * @category combinators
 */
export declare const validate: {
    /**
     * Validates that the specified value, if any, matches the specified primitive
     * type.
     *
     * @since 1.0.0
     * @category combinators
     */
    (value: Option<string>, config: CliConfig): <A>(self: Primitive<A>) => Effect<A, string, FileSystem>;
    /**
     * Validates that the specified value, if any, matches the specified primitive
     * type.
     *
     * @since 1.0.0
     * @category combinators
     */
    <A>(self: Primitive<A>, value: Option<string>, config: CliConfig): Effect<A, string, FileSystem>;
};
/**
 * Runs a wizard that will prompt the user for input matching the specified
 * primitive type.
 *
 * @since 1.0.0
 * @category combinators
 */
export declare const wizard: {
    /**
     * Runs a wizard that will prompt the user for input matching the specified
     * primitive type.
     *
     * @since 1.0.0
     * @category combinators
     */
    (help: HelpDoc): <A>(self: Primitive<A>) => Prompt<A>;
    /**
     * Runs a wizard that will prompt the user for input matching the specified
     * primitive type.
     *
     * @since 1.0.0
     * @category combinators
     */
    <A>(self: Primitive<A>, help: HelpDoc): Prompt<A>;
};
//# sourceMappingURL=Primitive.d.ts.map