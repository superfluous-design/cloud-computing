/**
 * @since 1.0.0
 */
import type { AnsiDoc } from "@effect/printer-ansi/AnsiDoc";
import type { NonEmptyReadonlyArray } from "effect/Array";
import type { Span } from "./HelpDoc/Span.js";
/**
 * A `HelpDoc` models the full documentation for a command-line application.
 *
 * `HelpDoc` is composed of optional header and footers, and in-between, a
 * list of HelpDoc-level content items.
 *
 * HelpDoc-level content items, in turn, can be headers, paragraphs, description
 * lists, and enumerations.
 *
 * A `HelpDoc` can be converted into plaintext, JSON, and HTML.
 *
 * @since 1.0.0
 * @category models
 */
export type HelpDoc = Empty | Header | Paragraph | DescriptionList | Enumeration | Sequence;
/**
 * @since 1.0.0
 * @category models
 */
export interface Empty {
    readonly _tag: "Empty";
}
/**
 * @since 1.0.0
 * @category models
 */
export interface Header {
    readonly _tag: "Header";
    readonly value: Span;
    readonly level: number;
}
/**
 * @since 1.0.0
 * @category models
 */
export interface Paragraph {
    readonly _tag: "Paragraph";
    readonly value: Span;
}
/**
 * @since 1.0.0
 * @category models
 */
export interface DescriptionList {
    readonly _tag: "DescriptionList";
    readonly definitions: NonEmptyReadonlyArray<readonly [Span, HelpDoc]>;
}
/**
 * @since 1.0.0
 * @category models
 */
export interface Enumeration {
    readonly _tag: "Enumeration";
    readonly elements: NonEmptyReadonlyArray<HelpDoc>;
}
/**
 * @since 1.0.0
 * @category models
 */
export interface Sequence {
    readonly _tag: "Sequence";
    readonly left: HelpDoc;
    readonly right: HelpDoc;
}
/**
 * @since 1.0.0
 * @category refinements
 */
export declare const isEmpty: (helpDoc: HelpDoc) => helpDoc is Empty;
/**
 * @since 1.0.0
 * @category refinements
 */
export declare const isHeader: (helpDoc: HelpDoc) => helpDoc is Header;
/**
 * @since 1.0.0
 * @category refinements
 */
export declare const isParagraph: (helpDoc: HelpDoc) => helpDoc is Paragraph;
/**
 * @since 1.0.0
 * @category refinements
 */
export declare const isDescriptionList: (helpDoc: HelpDoc) => helpDoc is DescriptionList;
/**
 * @since 1.0.0
 * @category refinements
 */
export declare const isEnumeration: (helpDoc: HelpDoc) => helpDoc is Enumeration;
/**
 * @since 1.0.0
 * @category refinements
 */
export declare const isSequence: (helpDoc: HelpDoc) => helpDoc is Sequence;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const empty: HelpDoc;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const blocks: (helpDocs: Iterable<HelpDoc>) => HelpDoc;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const h1: (value: string | Span) => HelpDoc;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const h2: (value: string | Span) => HelpDoc;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const h3: (value: string | Span) => HelpDoc;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const p: (value: string | Span) => HelpDoc;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const descriptionList: (definitions: NonEmptyReadonlyArray<[Span, HelpDoc]>) => HelpDoc;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const enumeration: (elements: NonEmptyReadonlyArray<HelpDoc>) => HelpDoc;
/**
 * @since 1.0.0
 * @category getters
 */
export declare const getSpan: (self: HelpDoc) => Span;
/**
 * @since 1.0.0
 * @category combinators
 */
export declare const sequence: {
    /**
     * @since 1.0.0
     * @category combinators
     */
    (that: HelpDoc): (self: HelpDoc) => HelpDoc;
    /**
     * @since 1.0.0
     * @category combinators
     */
    (self: HelpDoc, that: HelpDoc): HelpDoc;
};
/**
 * @since 1.0.0
 * @category combinators
 */
export declare const orElse: {
    /**
     * @since 1.0.0
     * @category combinators
     */
    (that: HelpDoc): (self: HelpDoc) => HelpDoc;
    /**
     * @since 1.0.0
     * @category combinators
     */
    (self: HelpDoc, that: HelpDoc): HelpDoc;
};
/**
 * @since 1.0.0
 * @category mapping
 */
export declare const mapDescriptionList: {
    /**
     * @since 1.0.0
     * @category mapping
     */
    (f: (span: Span, helpDoc: HelpDoc) => [Span, HelpDoc]): (self: HelpDoc) => HelpDoc;
    /**
     * @since 1.0.0
     * @category mapping
     */
    (self: HelpDoc, f: (span: Span, helpDoc: HelpDoc) => [Span, HelpDoc]): HelpDoc;
};
/**
 * @since 1.0.0
 * @category rendering
 */
export declare const toAnsiDoc: (self: HelpDoc) => AnsiDoc;
/**
 * @since 1.0.0
 * @category rendering
 */
export declare const toAnsiText: (self: HelpDoc) => string;
//# sourceMappingURL=HelpDoc.d.ts.map