/**
 * @since 1.0.0
 */
import type { BuiltInOptions } from "./BuiltInOptions.js";
/**
 * @since 1.0.0
 * @category models
 */
export type CommandDirective<A> = BuiltIn | UserDefined<A>;
/**
 * @since 1.0.0
 * @category models
 */
export interface BuiltIn {
    readonly _tag: "BuiltIn";
    readonly option: BuiltInOptions;
}
/**
 * @since 1.0.0
 * @category models
 */
export interface UserDefined<A> {
    readonly _tag: "UserDefined";
    readonly leftover: ReadonlyArray<string>;
    readonly value: A;
}
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const builtIn: (option: BuiltInOptions) => CommandDirective<never>;
/**
 * @since 1.0.0
 * @category refinements
 */
export declare const isBuiltIn: <A>(self: CommandDirective<A>) => self is BuiltIn;
/**
 * @since 1.0.0
 * @category refinements
 */
export declare const isUserDefined: <A>(self: CommandDirective<A>) => self is UserDefined<A>;
/**
 * @since 1.0.0
 * @category mapping
 */
export declare const map: {
    /**
     * @since 1.0.0
     * @category mapping
     */
    <A, B>(f: (a: A) => B): (self: CommandDirective<A>) => CommandDirective<B>;
    /**
     * @since 1.0.0
     * @category mapping
     */
    <A, B>(self: CommandDirective<A>, f: (a: A) => B): CommandDirective<B>;
};
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const userDefined: <A>(leftover: ReadonlyArray<string>, value: A) => CommandDirective<A>;
//# sourceMappingURL=CommandDirective.d.ts.map