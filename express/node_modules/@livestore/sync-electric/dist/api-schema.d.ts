import { Schema } from '@livestore/utils/effect';
export declare const PushPayload: Schema.Struct<{
    _tag: Schema.tag<"@livestore/sync-electric.Push">;
} & {
    storeId: typeof Schema.String;
    batch: Schema.Array$<Schema.Struct<{
        name: typeof Schema.String;
        args: typeof Schema.Any;
        seqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        parentSeqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        clientId: typeof Schema.String;
        sessionId: typeof Schema.String;
    }>>;
}>;
export declare const PullPayload: Schema.Struct<{
    _tag: Schema.tag<"@livestore/sync-electric.Pull">;
} & {
    storeId: typeof Schema.String;
    payload: Schema.UndefinedOr<Schema.Schema<Schema.JsonValue, Schema.JsonValue, never>>;
    handle: Schema.Option<Schema.Struct<{
        offset: typeof Schema.String;
        handle: typeof Schema.String;
    }>>;
}>;
export declare const ApiPayload: Schema.Union<[Schema.Struct<{
    _tag: Schema.tag<"@livestore/sync-electric.Pull">;
} & {
    storeId: typeof Schema.String;
    payload: Schema.UndefinedOr<Schema.Schema<Schema.JsonValue, Schema.JsonValue, never>>;
    handle: Schema.Option<Schema.Struct<{
        offset: typeof Schema.String;
        handle: typeof Schema.String;
    }>>;
}>, Schema.Struct<{
    _tag: Schema.tag<"@livestore/sync-electric.Push">;
} & {
    storeId: typeof Schema.String;
    batch: Schema.Array$<Schema.Struct<{
        name: typeof Schema.String;
        args: typeof Schema.Any;
        seqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        parentSeqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        clientId: typeof Schema.String;
        sessionId: typeof Schema.String;
    }>>;
}>]>;
//# sourceMappingURL=api-schema.d.ts.map