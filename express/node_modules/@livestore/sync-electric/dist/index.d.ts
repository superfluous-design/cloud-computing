import type { SyncBackendConstructor } from '@livestore/common';
import { Schema } from '@livestore/utils/effect';
export * as ApiSchema from './api-schema.js';
export declare const syncBackend: any;
export declare const syncBackendOptions: <TOptions extends SyncBackendOptions>(options: TOptions) => TOptions;
/**
 * This function should be called in a trusted environment (e.g. a proxy server) as it
 * requires access to senstive information (e.g. `apiSecret` / `sourceSecret`).
 */
export declare const makeElectricUrl: ({ electricHost, searchParams: providedSearchParams, sourceId, sourceSecret, apiSecret, }: {
    electricHost: string;
    /**
     * Needed to extract information from the search params which the `@livestore/sync-electric`
     * client implementation automatically adds:
     * - `handle`: the ElectricSQL handle
     * - `storeId`: the Livestore storeId
     */
    searchParams: URLSearchParams;
    /** Needed for Electric Cloud */
    sourceId?: string;
    /** Needed for Electric Cloud */
    sourceSecret?: string;
    /** For self-hosted ElectricSQL */
    apiSecret?: string;
}) => {
    url: string;
    storeId: string;
    needsInit: boolean;
    payload: Schema.JsonValue | undefined;
};
export interface SyncBackendOptions {
    /**
     * The endpoint to pull/push events. Pull is a `GET` request, push is a `POST` request.
     * Usually this endpoint is part of your API layer to proxy requests to the Electric server
     * e.g. to implement auth, rate limiting, etc.
     *
     * @example "/api/electric"
     * @example { push: "/api/push-event", pull: "/api/pull-event" }
     */
    endpoint: string | {
        push: string;
        pull: string;
    };
}
export declare const SyncMetadata: Schema.Struct<{
    offset: typeof Schema.String;
    handle: typeof Schema.String;
}>;
type SyncMetadata = {
    offset: string;
    handle: string;
};
export declare const makeSyncBackend: ({ endpoint }: SyncBackendOptions) => SyncBackendConstructor<SyncMetadata>;
/**
 * Needs to be bumped when the storage format changes (e.g. eventlogTable schema changes)
 *
 * Changing this version number will lead to a "soft reset".
 */
export declare const PERSISTENCE_FORMAT_VERSION = 6;
export declare const toTableName: (storeId: string) => string;
//# sourceMappingURL=index.d.ts.map