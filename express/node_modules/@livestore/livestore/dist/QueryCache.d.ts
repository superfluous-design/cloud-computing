import type { Bindable } from '@livestore/common';
type Opaque<BaseType, BrandType = unknown> = BaseType & {
    readonly [Symbols.base]: BaseType;
    readonly [Symbols.brand]: BrandType;
};
declare namespace Symbols {
    const base: unique symbol;
    const brand: unique symbol;
}
export type CacheKey = Opaque<string, string>;
export default class QueryCache {
    #private;
    getKey: (sql: string, bindValues?: Bindable) => CacheKey;
    get: (key: CacheKey) => any;
    set: (queriedTables: Iterable<string>, key: CacheKey, results: any) => void;
    ignoreQuery: (query: string) => boolean;
    invalidate: (queriedTables: Iterable<string>) => void;
}
export {};
//# sourceMappingURL=QueryCache.d.ts.map