import { nanoid } from '@livestore/utils/nanoid';
import { LiveStoreQueryBase, withRCMap } from './base-class.js';
export const signal = (defaultValue, options) => {
    const id = nanoid();
    const def = {
        _tag: 'signal-def',
        defaultValue,
        hash: id,
        label: options?.label ?? 'Signal',
        make: withRCMap(id, (ctx) => new Signal({
            defaultValue,
            reactivityGraph: ctx.reactivityGraph.deref(),
            label: options?.label ?? 'Signal',
            def,
        })),
    };
    return def;
};
export class Signal extends LiveStoreQueryBase {
    _tag = 'signal';
    ref;
    label;
    reactivityGraph;
    results$;
    def;
    constructor(
    // private defaultValue: T,
    // readonly reactivityGraph: ReactivityGraph,
    // private options?: {
    //   label?: string
    // },
    { defaultValue, reactivityGraph, label, def, }) {
        super();
        this.ref = reactivityGraph.makeRef(defaultValue, { label });
        this.label = label;
        this.reactivityGraph = reactivityGraph;
        this.def = def;
        this.results$ = this.ref;
    }
    set = (value) => {
        this.reactivityGraph.setRef(this.ref, value);
    };
    get = () => {
        return this.ref.computeResult();
    };
    destroy = () => {
        this.reactivityGraph.destroyNode(this.ref);
    };
}
//# sourceMappingURL=signal.js.map