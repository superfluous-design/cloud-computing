import { SessionIdSymbol } from '@livestore/common';
import { State } from '@livestore/common/schema';
import { shouldNeverHappen } from '@livestore/utils';
export const rowQueryLabel = (table, id) => `${table.sqliteDef.name}.get:${id === undefined ? table.default.id : id === SessionIdSymbol ? 'sessionId' : id}`;
export const makeExecBeforeFirstRun = ({ id, explicitDefaultValues, table, otelContext: otelContext_, }) => ({ store }) => {
    if (State.SQLite.tableIsClientDocumentTable(table) === false) {
        return shouldNeverHappen(`Cannot insert row for table "${table.sqliteDef.name}" which does not have 'deriveEvents: true' set`);
    }
    const otelContext = otelContext_ ?? store.otel.queriesSpanContext;
    const idVal = id === SessionIdSymbol ? store.sessionId : id;
    const rowExists = store.sqliteDbWrapper.cachedSelect(`SELECT 1 FROM '${table.sqliteDef.name}' WHERE id = ?`, [idVal], { otelContext }).length === 1;
    if (rowExists)
        return;
    // It's important that we only commit and don't refresh here, as this function might be called during a render
    // and otherwise we might end up in a "reactive loop"
    store.commit({ otelContext, skipRefresh: true, label: `${table.sqliteDef.name}.set:${idVal}` }, table.set(explicitDefaultValues, idVal));
};
//# sourceMappingURL=client-document-get-query.js.map