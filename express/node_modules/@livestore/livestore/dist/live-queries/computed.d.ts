import type { Thunk } from '../reactive.js';
import type { RefreshReason } from '../store/store-types.js';
import type { DepKey, GetAtomResult, LiveQueryDef, ReactivityGraph, ReactivityGraphContext } from './base-class.js';
import { LiveStoreQueryBase } from './base-class.js';
export declare const computed: <TResult>(fn: (get: GetAtomResult) => TResult, options?: {
    label?: string;
    deps?: DepKey;
}) => LiveQueryDef<TResult>;
export declare class LiveStoreComputedQuery<TResult> extends LiveStoreQueryBase<TResult> {
    _tag: "computed";
    /** A reactive thunk representing the query results */
    results$: Thunk<TResult, ReactivityGraphContext, RefreshReason>;
    label: string;
    reactivityGraph: ReactivityGraph;
    def: LiveQueryDef<TResult>;
    constructor({ fn, label, reactivityGraph, def, }: {
        label: string;
        fn: (get: GetAtomResult) => TResult;
        reactivityGraph: ReactivityGraph;
        def: LiveQueryDef<TResult>;
    });
    destroy: () => void;
}
//# sourceMappingURL=computed.d.ts.map