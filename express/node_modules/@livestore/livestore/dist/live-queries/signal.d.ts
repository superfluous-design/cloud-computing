import type * as RG from '../reactive.js';
import type { RefreshReason } from '../store/store-types.js';
import type { ISignal, ReactivityGraph, ReactivityGraphContext, SignalDef } from './base-class.js';
import { LiveStoreQueryBase } from './base-class.js';
export declare const signal: <T>(defaultValue: T, options?: {
    label?: string;
}) => SignalDef<T>;
export declare class Signal<T> extends LiveStoreQueryBase<T> implements ISignal<T> {
    _tag: "signal";
    readonly ref: RG.Ref<T, ReactivityGraphContext, RefreshReason>;
    label: string;
    reactivityGraph: ReactivityGraph;
    results$: RG.Ref<T, ReactivityGraphContext, RefreshReason>;
    def: SignalDef<T>;
    constructor({ defaultValue, reactivityGraph, label, def, }: {
        defaultValue: T;
        reactivityGraph: ReactivityGraph;
        label: string;
        def: SignalDef<T>;
    });
    set: (value: T) => void;
    get: () => T;
    destroy: () => void;
}
//# sourceMappingURL=signal.d.ts.map