import type { UnexpectedError } from '@livestore/common';
import type { LiveStoreSchema } from '@livestore/common/schema';
import type { Cause, OtelTracer, Scope } from '@livestore/utils/effect';
import { Effect, Layer } from '@livestore/utils/effect';
import type { LiveStoreContextProps } from '../store/create-store.js';
import { DeferredStoreContext, LiveStoreContextRunning } from '../store/create-store.js';
export declare const makeLiveStoreContext: <TSchema extends LiveStoreSchema, TContext = {}>({ schema, storeId, context, boot, adapter, disableDevtools, onBootStatus, batchUpdates, }: LiveStoreContextProps<TSchema, TContext>) => Effect.Effect<LiveStoreContextRunning["Type"], UnexpectedError | Cause.TimeoutException, DeferredStoreContext | Scope.Scope | OtelTracer.OtelTracer>;
export declare const LiveStoreContextLayer: <TSchema extends LiveStoreSchema, TContext = {}>(props: LiveStoreContextProps<TSchema, TContext>) => Layer.Layer<LiveStoreContextRunning, UnexpectedError | Cause.TimeoutException, OtelTracer.OtelTracer>;
export declare const LiveStoreContextDeferred: Layer.Layer<DeferredStoreContext, never, never>;
//# sourceMappingURL=LiveStore.d.ts.map