import type { ClientSession, ClientSessionSyncProcessor } from '@livestore/common';
import { Devtools, UnexpectedError } from '@livestore/common';
import type { WebChannel } from '@livestore/utils/effect';
import { Effect } from '@livestore/utils/effect';
import type { LiveQuery, ReactivityGraph } from '../live-queries/base-class.js';
import type { SqliteDbWrapper } from '../SqliteDbWrapper.js';
import type { ReferenceCountedSet } from '../utils/data-structures.js';
type IStore = {
    clientSession: ClientSession;
    reactivityGraph: ReactivityGraph;
    sqliteDbWrapper: SqliteDbWrapper;
    activeQueries: ReferenceCountedSet<LiveQuery<any>>;
    syncProcessor: ClientSessionSyncProcessor;
};
export declare const connectDevtoolsToStore: ({ storeDevtoolsChannel, store, }: {
    storeDevtoolsChannel: WebChannel.WebChannel<Devtools.ClientSession.MessageToApp, Devtools.ClientSession.MessageFromApp>;
    store: IStore;
}) => Effect.Effect<void, UnexpectedError, import("effect/Scope").Scope>;
export {};
//# sourceMappingURL=devtools.d.ts.map