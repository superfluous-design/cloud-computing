import { type DebugInfo, type MutableDebugInfo, type PreparedBindValues, type PreparedStatement, type SqliteDb, type SqliteDbChangeset, type SqliteDbSession } from '@livestore/common';
import type * as otel from '@opentelemetry/api';
export declare const emptyDebugInfo: () => DebugInfo;
/**
 * This class is mostly adding result caching around a SqliteDb which is used to speed up
 * SQLite queries when used through the reactivity graph.
 */
export declare class SqliteDbWrapper implements SqliteDb {
    _tag: "SqliteDb";
    private cachedStmts;
    private tablesUsedCache;
    private resultCache;
    private db;
    private otelTracer;
    private otelRootSpanContext;
    private tablesUsedStmt;
    debugInfo: MutableDebugInfo;
    constructor({ db, otel, }: {
        db: SqliteDb;
        otel: {
            tracer: otel.Tracer;
            rootSpanContext: otel.Context;
        };
    });
    metadata: any;
    prepare(queryStr: string): PreparedStatement;
    import(data: Uint8Array<ArrayBufferLike> | SqliteDb<any, any>): void;
    close(): void;
    destroy(): void;
    session(): SqliteDbSession;
    makeChangeset(data: Uint8Array): SqliteDbChangeset;
    txn<TRes>(callback: () => TRes): TRes;
    withChangeset<TRes>(callback: () => TRes): {
        result: TRes;
        changeset: {
            _tag: 'sessionChangeset';
            data: Uint8Array;
            debug: any;
        } | {
            _tag: 'no-op';
        };
    };
    rollback(changeset: Uint8Array): void;
    getTablesUsed(query: string): Set<string>;
    cachedExecute(queryStr: string, bindValues?: PreparedBindValues | undefined, options?: {
        hasNoEffects?: boolean;
        otelContext?: otel.Context;
        writeTables?: ReadonlySet<string>;
        onRowsChanged?: (rowsChanged: number) => void;
    }): {
        durationMs: number;
    };
    execute: {
        (queryStr: string, bindValues?: PreparedBindValues | undefined, options?: {
            onRowsChanged?: (rowsChanged: number) => void;
        }): void;
        (queryBuilder: import("@livestore/common").QueryBuilder.Any, options?: {
            onRowsChanged?: (rowsChanged: number) => void;
        }): void;
    };
    select: {
        <T>(queryStr: string, bindValues?: PreparedBindValues | undefined): ReadonlyArray<T>;
        <T>(queryBuilder: import("@livestore/common").QueryBuilder<T, any, any>): ReadonlyArray<T>;
    };
    cachedSelect<T = any>(queryStr: string, bindValues?: PreparedBindValues | undefined, options?: {
        queriedTables?: ReadonlySet<string>;
        skipCache?: boolean;
        otelContext?: otel.Context;
    }): ReadonlyArray<T>;
    export(): Uint8Array<ArrayBufferLike>;
}
//# sourceMappingURL=SqliteDbWrapper.d.ts.map