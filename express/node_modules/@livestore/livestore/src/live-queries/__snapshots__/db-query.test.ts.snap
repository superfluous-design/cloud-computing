// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`otel > otel 3`] = `
{
  "_name": "createStore",
  "attributes": {
    "debugInstanceId": "test",
    "storeId": "default",
  },
  "children": [
    {
      "_name": "livestore.in-memory-db:execute",
      "attributes": {
        "sql.query": "
      PRAGMA page_size=32768;
      PRAGMA cache_size=10000;
      PRAGMA synchronous='OFF';
      PRAGMA temp_store='MEMORY';
      PRAGMA foreign_keys='ON'; -- we want foreign key constraints to be enforced
    ",
      },
    },
    {
      "_name": "@livestore/common:LeaderSyncProcessor:push",
      "attributes": {
        "batch": "undefined",
        "batchSize": 1,
      },
    },
    {
      "_name": "client-session-sync-processor:pull",
      "attributes": {
        "code.stacktrace": "<STACKTRACE>",
        "span.label": "⚠︎ Interrupted",
        "status.interrupted": true,
      },
    },
    {
      "_name": "LiveStore:sync",
    },
    {
      "_name": "LiveStore:commits",
      "children": [
        {
          "_name": "LiveStore:commit",
          "attributes": {
            "livestore.eventTags": [
              "livestore.RawSql",
            ],
            "livestore.eventsCount": 1,
          },
          "children": [
            {
              "_name": "livestore.in-memory-db:execute",
              "attributes": {
                "sql.query": "INSERT INTO todos (id, text, completed) VALUES ('t1', 'buy milk', 0)",
              },
            },
          ],
        },
      ],
    },
    {
      "_name": "LiveStore:queries",
      "children": [
        {
          "_name": "db:select * from todos",
          "attributes": {
            "sql.query": "select * from todos",
            "sql.rowsCount": 0,
          },
          "children": [
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "select * from todos",
                "sql.rowsCount": 0,
              },
            },
          ],
        },
        {
          "_name": "db:select * from todos",
          "attributes": {
            "sql.query": "select * from todos",
            "sql.rowsCount": 1,
          },
          "children": [
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "select * from todos",
                "sql.rowsCount": 1,
              },
            },
          ],
        },
      ],
    },
  ],
}
`;

exports[`otel > with thunks 1`] = `
{
  "atoms": [
    {
      "_tag": "ref",
      "id": "node-1",
      "isDestroyed": false,
      "isDirty": false,
      "label": "tableRef:todos",
      "meta": {
        "liveStoreRefType": "table",
      },
      "previousResult": {
        "_tag": "Some",
        "value": "null",
      },
      "refreshes": 0,
      "sub": [],
      "super": [],
    },
    {
      "_tag": "ref",
      "id": "node-2",
      "isDestroyed": false,
      "isDirty": false,
      "label": "tableRef:app",
      "meta": {
        "liveStoreRefType": "table",
      },
      "previousResult": {
        "_tag": "Some",
        "value": "null",
      },
      "refreshes": 0,
      "sub": [],
      "super": [],
    },
  ],
  "deferredEffects": [],
  "effects": [],
}
`;

exports[`otel > with thunks 3`] = `
{
  "atoms": [
    {
      "_tag": "ref",
      "id": "node-1",
      "isDestroyed": false,
      "isDirty": false,
      "label": "tableRef:todos",
      "meta": {
        "liveStoreRefType": "table",
      },
      "previousResult": {
        "_tag": "Some",
        "value": "null",
      },
      "refreshes": 0,
      "sub": [],
      "super": [],
    },
    {
      "_tag": "ref",
      "id": "node-2",
      "isDestroyed": false,
      "isDirty": false,
      "label": "tableRef:app",
      "meta": {
        "liveStoreRefType": "table",
      },
      "previousResult": {
        "_tag": "Some",
        "value": "null",
      },
      "refreshes": 0,
      "sub": [],
      "super": [],
    },
  ],
  "deferredEffects": [],
  "effects": [],
}
`;

exports[`otel > with thunks 4`] = `
{
  "atoms": [
    {
      "_tag": "ref",
      "id": "node-1",
      "isDestroyed": false,
      "isDirty": false,
      "label": "tableRef:todos",
      "meta": {
        "liveStoreRefType": "table",
      },
      "previousResult": {
        "_tag": "Some",
        "value": "null",
      },
      "refreshes": 1,
      "sub": [],
      "super": [],
    },
    {
      "_tag": "ref",
      "id": "node-2",
      "isDestroyed": false,
      "isDirty": false,
      "label": "tableRef:app",
      "meta": {
        "liveStoreRefType": "table",
      },
      "previousResult": {
        "_tag": "Some",
        "value": "null",
      },
      "refreshes": 0,
      "sub": [],
      "super": [],
    },
  ],
  "deferredEffects": [],
  "effects": [],
}
`;

exports[`otel > with thunks 6`] = `
{
  "atoms": [
    {
      "_tag": "ref",
      "id": "node-1",
      "isDestroyed": false,
      "isDirty": false,
      "label": "tableRef:todos",
      "meta": {
        "liveStoreRefType": "table",
      },
      "previousResult": {
        "_tag": "Some",
        "value": "null",
      },
      "refreshes": 1,
      "sub": [],
      "super": [],
    },
    {
      "_tag": "ref",
      "id": "node-2",
      "isDestroyed": false,
      "isDirty": false,
      "label": "tableRef:app",
      "meta": {
        "liveStoreRefType": "table",
      },
      "previousResult": {
        "_tag": "Some",
        "value": "null",
      },
      "refreshes": 0,
      "sub": [],
      "super": [],
    },
  ],
  "deferredEffects": [],
  "effects": [],
}
`;

exports[`otel > with thunks 7`] = `
{
  "_name": "createStore",
  "attributes": {
    "debugInstanceId": "test",
    "storeId": "default",
  },
  "children": [
    {
      "_name": "livestore.in-memory-db:execute",
      "attributes": {
        "sql.query": "
      PRAGMA page_size=32768;
      PRAGMA cache_size=10000;
      PRAGMA synchronous='OFF';
      PRAGMA temp_store='MEMORY';
      PRAGMA foreign_keys='ON'; -- we want foreign key constraints to be enforced
    ",
      },
    },
    {
      "_name": "@livestore/common:LeaderSyncProcessor:push",
      "attributes": {
        "batch": "undefined",
        "batchSize": 1,
      },
    },
    {
      "_name": "client-session-sync-processor:pull",
      "attributes": {
        "code.stacktrace": "<STACKTRACE>",
        "span.label": "⚠︎ Interrupted",
        "status.interrupted": true,
      },
    },
    {
      "_name": "LiveStore:sync",
    },
    {
      "_name": "LiveStore:commits",
      "children": [
        {
          "_name": "LiveStore:commit",
          "attributes": {
            "livestore.eventTags": [
              "livestore.RawSql",
            ],
            "livestore.eventsCount": 1,
          },
          "children": [
            {
              "_name": "livestore.in-memory-db:execute",
              "attributes": {
                "sql.query": "INSERT INTO todos (id, text, completed) VALUES ('t1', 'buy milk', 0)",
              },
            },
          ],
        },
      ],
    },
    {
      "_name": "LiveStore:queries",
      "children": [
        {
          "_name": "db:select * from todos where completed = 0",
          "attributes": {
            "sql.query": "select * from todos where completed = 0",
            "sql.rowsCount": 0,
          },
          "children": [
            {
              "_name": "js:where-filter",
            },
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "select * from todos where completed = 0",
                "sql.rowsCount": 0,
              },
            },
          ],
        },
        {
          "_name": "db:select * from todos where completed = 0",
          "attributes": {
            "sql.query": "select * from todos where completed = 0",
            "sql.rowsCount": 1,
          },
          "children": [
            {
              "_name": "js:where-filter",
            },
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "select * from todos where completed = 0",
                "sql.rowsCount": 1,
              },
            },
          ],
        },
      ],
    },
  ],
}
`;

exports[`otel > with thunks with query builder and without labels 3`] = `
{
  "_name": "createStore",
  "attributes": {
    "debugInstanceId": "test",
    "storeId": "default",
  },
  "children": [
    {
      "_name": "livestore.in-memory-db:execute",
      "attributes": {
        "sql.query": "
      PRAGMA page_size=32768;
      PRAGMA cache_size=10000;
      PRAGMA synchronous='OFF';
      PRAGMA temp_store='MEMORY';
      PRAGMA foreign_keys='ON'; -- we want foreign key constraints to be enforced
    ",
      },
    },
    {
      "_name": "@livestore/common:LeaderSyncProcessor:push",
      "attributes": {
        "batch": "undefined",
        "batchSize": 1,
      },
    },
    {
      "_name": "client-session-sync-processor:pull",
      "attributes": {
        "code.stacktrace": "<STACKTRACE>",
        "span.label": "⚠︎ Interrupted",
        "status.interrupted": true,
      },
    },
    {
      "_name": "LiveStore:sync",
    },
    {
      "_name": "LiveStore:commits",
      "children": [
        {
          "_name": "LiveStore:commit",
          "attributes": {
            "livestore.eventTags": [
              "livestore.RawSql",
            ],
            "livestore.eventsCount": 1,
          },
          "children": [
            {
              "_name": "livestore.in-memory-db:execute",
              "attributes": {
                "sql.query": "INSERT INTO todos (id, text, completed) VALUES ('t1', 'buy milk', 0)",
              },
            },
          ],
        },
      ],
    },
    {
      "_name": "LiveStore:queries",
      "children": [
        {
          "_name": "db:SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
          "attributes": {
            "sql.query": "SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
            "sql.rowsCount": 0,
          },
          "children": [
            {
              "_name": "js:() => ({ completed: false })",
            },
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
                "sql.rowsCount": 0,
              },
            },
          ],
        },
        {
          "_name": "db:SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
          "attributes": {
            "sql.query": "SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
            "sql.rowsCount": 1,
          },
          "children": [
            {
              "_name": "js:() => ({ completed: false })",
            },
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
                "sql.rowsCount": 1,
              },
            },
          ],
        },
      ],
    },
  ],
}
`;
