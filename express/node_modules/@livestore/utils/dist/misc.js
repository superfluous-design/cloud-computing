export const isDevEnv = () => {
    if (typeof process !== 'undefined' && process.env !== undefined) {
        return process.env.NODE_ENV !== 'production';
    }
    // TODO re-enable the full guard code once `import.meta` is supported in Expo
    // if (import.meta !== undefined && import.meta.env !== undefined) {
    if (import.meta.env !== undefined) {
        return import.meta.env.DEV;
    }
    // @ts-expect-error Only exists in Expo / RN
    if (typeof globalThis !== 'undefined' && globalThis.__DEV__) {
        return true;
    }
    return false;
};
export const objectToString = (error) => {
    const str = error?.toString();
    if (str !== '[object Object]')
        return str;
    try {
        return JSON.stringify(error, null, 2);
    }
    catch (e) {
        console.log(error);
        return 'Error while printing error: ' + e;
    }
};
export const tryAsFunctionAndNew = (fnOrConstructor, arg) => {
    try {
        // @ts-expect-error try out as constructor
        return new fnOrConstructor(arg);
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
    }
    catch (e) {
        // @ts-expect-error try out as function
        return fnOrConstructor(arg);
    }
};
export const envTruish = (env) => env !== undefined && env.toLowerCase() !== 'false' && env.toLowerCase() !== '0';
export const shouldNeverHappen = (msg, ...args) => {
    console.error(msg, ...args);
    if (isDevEnv()) {
        debugger;
    }
    throw new Error(`This should never happen: ${msg}`);
};
//# sourceMappingURL=misc.js.map