export * from 'effect/Stream';
import { Effect, Option, pipe, Ref, Stream } from 'effect';
export const tapLog = (stream) => tapChunk(Effect.forEach((_) => Effect.succeed(console.log(_))))(stream);
export const tapSync = (tapFn) => (stream) => Stream.tap(stream, (a) => Effect.sync(() => tapFn(a)));
export const tapLogWithLabel = (label) => (stream) => tapChunk(Effect.forEach((_) => Effect.succeed(console.log(label, _))))(stream);
export const tapChunk = (f) => (self) => Stream.mapChunksEffect(self, (chunks) => pipe(f(chunks), Effect.map(() => chunks)));
const isIdentity = (a1, a2) => a1 === a2;
export const skipRepeated = (isEqual = isIdentity) => (stream) => skipRepeated_(stream, isEqual);
export const skipRepeated_ = (stream, isEqual = isIdentity) => pipe(Ref.make(Option.none()), Stream.fromEffect, Stream.flatMap((ref) => pipe(stream, Stream.filterEffect((el) => pipe(Ref.get(ref), Effect.flatMap((prevEl) => {
    if (prevEl._tag === 'None' || isEqual(prevEl.value, el) === false) {
        return pipe(Ref.set(ref, Option.some(el)), Effect.map(() => true));
    }
    else {
        return Effect.succeed(false);
    }
}))))));
//# sourceMappingURL=Stream.js.map