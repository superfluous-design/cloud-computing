import type { Deferred, Either, ParseResult } from 'effect';
import { Effect, Schema, Stream } from 'effect';
export declare const WebChannelSymbol: unique symbol;
export type WebChannelSymbol = typeof WebChannelSymbol;
export declare const isWebChannel: <MsgListen, MsgSend>(value: unknown) => value is WebChannel<MsgListen, MsgSend>;
export interface WebChannel<MsgListen, MsgSend, E = never> {
    readonly [WebChannelSymbol]: unknown;
    send: (a: MsgSend) => Effect.Effect<void, ParseResult.ParseError | E>;
    listen: Stream.Stream<Either.Either<MsgListen, ParseResult.ParseError>, E>;
    supportsTransferables: boolean;
    closedDeferred: Deferred.Deferred<void>;
    shutdown: Effect.Effect<void>;
    schema: {
        listen: Schema.Schema<MsgListen, any>;
        send: Schema.Schema<MsgSend, any>;
    };
    debugInfo?: Record<string, any>;
}
export declare const DebugPingMessage: Schema.TaggedStruct<"WebChannel.DebugPing", {
    message: typeof Schema.String;
    payload: Schema.optional<typeof Schema.String>;
}>;
export declare const WebChannelPing: Schema.TaggedStruct<"WebChannel.Ping", {
    requestId: typeof Schema.String;
}>;
export declare const WebChannelPong: Schema.TaggedStruct<"WebChannel.Pong", {
    requestId: typeof Schema.String;
}>;
export declare const WebChannelHeartbeat: Schema.Union<[Schema.TaggedStruct<"WebChannel.Ping", {
    requestId: typeof Schema.String;
}>, Schema.TaggedStruct<"WebChannel.Pong", {
    requestId: typeof Schema.String;
}>]>;
type WebChannelMessages = typeof DebugPingMessage.Type | typeof WebChannelPing.Type | typeof WebChannelPong.Type;
export declare const schemaWithWebChannelMessages: <MsgListen, MsgSend>(schema: OutputSchema<MsgListen, MsgSend, any, any>) => OutputSchema<MsgListen | WebChannelMessages, MsgSend | WebChannelMessages, any, any>;
export type InputSchema<MsgListen, MsgSend, MsgListenEncoded, MsgSendEncoded> = Schema.Schema<MsgListen | MsgSend, MsgListenEncoded | MsgSendEncoded> | OutputSchema<MsgListen, MsgSend, MsgListenEncoded, MsgSendEncoded>;
export type OutputSchema<MsgListen, MsgSend, MsgListenEncoded, MsgSendEncoded> = {
    listen: Schema.Schema<MsgListen, MsgListenEncoded>;
    send: Schema.Schema<MsgSend, MsgSendEncoded>;
};
export declare const mapSchema: <MsgListen, MsgSend, MsgListenEncoded, MsgSendEncoded>(schema: InputSchema<MsgListen, MsgSend, MsgListenEncoded, MsgSendEncoded>) => OutputSchema<MsgListen, MsgSend, MsgListenEncoded, MsgSendEncoded>;
export declare const listenToDebugPing: (channelName: string) => <MsgListen>(stream: Stream.Stream<Either.Either<MsgListen, ParseResult.ParseError>, never>) => Stream.Stream<Either.Either<MsgListen, ParseResult.ParseError>, never>;
export {};
//# sourceMappingURL=common.d.ts.map