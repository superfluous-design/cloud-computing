import { Effect, Predicate, Schema, Stream } from 'effect';
export const WebChannelSymbol = Symbol('WebChannel');
export const isWebChannel = (value) => typeof value === 'object' && value !== null && Predicate.hasProperty(value, WebChannelSymbol);
export const DebugPingMessage = Schema.TaggedStruct('WebChannel.DebugPing', {
    message: Schema.String,
    payload: Schema.optional(Schema.String),
});
export const WebChannelPing = Schema.TaggedStruct('WebChannel.Ping', {
    requestId: Schema.String,
});
export const WebChannelPong = Schema.TaggedStruct('WebChannel.Pong', {
    requestId: Schema.String,
});
export const WebChannelHeartbeat = Schema.Union(WebChannelPing, WebChannelPong);
export const schemaWithWebChannelMessages = (schema) => ({
    send: Schema.Union(schema.send, DebugPingMessage, WebChannelPing, WebChannelPong),
    listen: Schema.Union(schema.listen, DebugPingMessage, WebChannelPing, WebChannelPong),
});
export const mapSchema = (schema) => Predicate.hasProperty(schema, 'send') && Predicate.hasProperty(schema, 'listen')
    ? schemaWithWebChannelMessages(schema)
    : schemaWithWebChannelMessages({ send: schema, listen: schema });
export const listenToDebugPing = (channelName) => (stream) => stream.pipe(Stream.filterEffect(Effect.fn(function* (msg) {
    if (msg._tag === 'Right' && Schema.is(DebugPingMessage)(msg.right)) {
        yield* Effect.logDebug(`WebChannel:ping [${channelName}] ${msg.right.message}`, msg.right.payload);
        return false;
    }
    return true;
})));
//# sourceMappingURL=common.js.map