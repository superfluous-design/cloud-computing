import { Deferred, Effect } from 'effect';
export declare const withLock: <E2>({ lockName, onTaken, options, }: {
    lockName: string;
    onTaken?: Effect.Effect<void, E2>;
    options?: Omit<LockOptions, "signal">;
}) => <Ctx, E, A>(eff: Effect.Effect<A, E, Ctx>) => Effect.Effect<A | void, E | E2, Ctx>;
export declare const waitForDeferredLock: (deferred: Deferred.Deferred<void>, lockName: string) => Effect.Effect<void, never, never>;
export declare const tryGetDeferredLock: (deferred: Deferred.Deferred<void>, lockName: string) => Effect.Effect<boolean, never, never>;
export declare const stealDeferredLock: (deferred: Deferred.Deferred<void>, lockName: string) => Effect.Effect<boolean, never, never>;
export declare const waitForLock: (lockName: string) => Effect.Effect<void, never, never>;
/** Attempts to get the lock if available and waits for it to be stolen */
export declare const getLockAndWaitForSteal: (lockName: string) => Effect.Effect<void, never, never>;
//# sourceMappingURL=WebLock.d.ts.map