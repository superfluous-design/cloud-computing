import { HttpClient } from '@effect/platform';
import type { Schedule, Scope } from 'effect';
import { Effect, Schema } from 'effect';
declare const WebSocketError_base: Schema.TaggedErrorClass<WebSocketError, "WebSocketError", {
    readonly _tag: Schema.tag<"WebSocketError">;
} & {
    cause: typeof Schema.Defect;
}>;
export declare class WebSocketError extends WebSocketError_base {
}
/**
 * Creates a WebSocket connection and waits for the connection to be established.
 * Automatically closes the connection when the scope is closed.
 */
export declare const makeWebSocket: ({ url, reconnect, }: {
    url: string;
    reconnect?: Schedule.Schedule<unknown> | false;
}) => Effect.Effect<globalThis.WebSocket, WebSocketError, Scope.Scope | HttpClient.HttpClient>;
export {};
//# sourceMappingURL=WebSocket.d.ts.map