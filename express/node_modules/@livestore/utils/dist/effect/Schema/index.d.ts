import type { SchemaAST } from 'effect';
import { Effect, Schema } from 'effect';
import type { ParseError } from 'effect/ParseResult';
import type { ParseOptions } from 'effect/SchemaAST';
export * from 'effect/Schema';
export * from './debug-diff.js';
export * from './msgpack.js';
export declare const hash: (schema: Schema.Schema<any>) => number;
export declare const encodeWithTransferables: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (a: A, overrideOptions?: ParseOptions | undefined) => Effect.Effect<[I, Transferable[]], ParseError, R>;
export declare const decodeSyncDebug: <A, I>(schema: Schema.Schema<A, I, never>, options?: SchemaAST.ParseOptions) => (i: I, overrideOptions?: SchemaAST.ParseOptions) => A;
export declare const encodeSyncDebug: <A, I>(schema: Schema.Schema<A, I, never>, options?: SchemaAST.ParseOptions) => (a: A, overrideOptions?: SchemaAST.ParseOptions) => I;
export declare const swap: <A, I, R>(schema: Schema.Schema<A, I, R>) => Schema.Schema<I, A, R>;
export declare const Base64FromUint8Array: Schema.Schema<string, Uint8Array>;
export interface JsonArray extends ReadonlyArray<JsonValue> {
}
export interface JsonObject {
    [key: string]: JsonValue;
}
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray;
export declare const JsonValue: Schema.Schema<JsonValue>;
//# sourceMappingURL=index.d.ts.map