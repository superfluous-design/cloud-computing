import type { SubscriptionRef } from 'effect';
import { Effect } from 'effect';
import type { Predicate, Refinement } from 'effect/Predicate';
export * from 'effect/SubscriptionRef';
export declare const waitUntil: {
    <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (sref: SubscriptionRef.SubscriptionRef<A>) => Effect.Effect<B, never, never>;
    <A, B extends A>(predicate: Predicate<B>): (sref: SubscriptionRef.SubscriptionRef<A>) => Effect.Effect<A, never, never>;
    <A, B extends A>(sref: SubscriptionRef.SubscriptionRef<A>, refinement: Refinement<NoInfer<A>, B>): Effect.Effect<B, never, never>;
    <A, B extends A>(sref: SubscriptionRef.SubscriptionRef<A>, predicate: Predicate<B>): Effect.Effect<A, never, never>;
};
//# sourceMappingURL=SubscriptionRef.d.ts.map