export * from './pick.js';
export * from './omit.js';
type ValueOfRecord<R extends Record<any, any>> = R extends Record<any, infer V> ? V : never;
export declare const mapObjectValues: <O_In extends Record<string, any>, V_Out>(obj: O_In, mapValue: (key: keyof O_In, val: ValueOfRecord<O_In>) => V_Out) => { [K in keyof O_In]: V_Out; };
export type Entries<T> = {
    [K in keyof T]: [K, T[K]];
}[keyof T][];
export declare const objectEntries: <T extends Record<string, any>>(obj: T) => Entries<T>;
export declare const keyObjectFromObject: <TObj extends Record<string, any>>(obj: TObj) => { [K in keyof TObj]: K; };
//# sourceMappingURL=index.d.ts.map