import * as Schema from 'effect/Schema';
declare const User_base: Schema.Class<User, {
    id: typeof Schema.Number;
    name: typeof Schema.String;
}, Schema.Struct.Encoded<{
    id: typeof Schema.Number;
    name: typeof Schema.String;
}>, never, {
    readonly name: string;
} & {
    readonly id: number;
}, {}, {}>;
export declare class User extends User_base {
}
declare const GetUserById_base: Schema.TaggedRequestClass<GetUserById, "GetUserById", {
    readonly _tag: Schema.tag<"GetUserById">;
} & {
    id: typeof Schema.Number;
}, typeof User, typeof Schema.Never>;
export declare class GetUserById extends GetUserById_base {
}
declare const Person_base: Schema.Class<Person, {
    id: typeof Schema.Number;
    name: typeof Schema.String;
    data: typeof Schema.Uint8Array;
}, Schema.Struct.Encoded<{
    id: typeof Schema.Number;
    name: typeof Schema.String;
    data: typeof Schema.Uint8Array;
}>, never, {
    readonly name: string;
} & {
    readonly id: number;
} & {
    readonly data: Uint8Array<ArrayBufferLike>;
}, {}, {}>;
export declare class Person extends Person_base {
}
declare const GetPersonById_base: Schema.TaggedRequestClass<GetPersonById, "GetPersonById", {
    readonly _tag: Schema.tag<"GetPersonById">;
} & {
    id: typeof Schema.Number;
}, typeof Person, typeof Schema.Never>;
export declare class GetPersonById extends GetPersonById_base {
}
declare const RunnerInterrupt_base: Schema.TaggedRequestClass<RunnerInterrupt, "RunnerInterrupt", {
    readonly _tag: Schema.tag<"RunnerInterrupt">;
}, typeof Schema.Void, typeof Schema.Never>;
export declare class RunnerInterrupt extends RunnerInterrupt_base {
}
declare const InitialMessage_base: Schema.TaggedRequestClass<InitialMessage, "InitialMessage", {
    readonly _tag: Schema.tag<"InitialMessage">;
} & {
    name: typeof Schema.String;
    data: typeof Schema.Uint8Array;
}, typeof Schema.Void, typeof Schema.Never>;
export declare class InitialMessage extends InitialMessage_base {
}
declare const GetSpan_base: Schema.TaggedRequestClass<GetSpan, "GetSpan", {
    readonly _tag: Schema.tag<"GetSpan">;
}, Schema.Struct<{
    name: typeof Schema.String;
    traceId: typeof Schema.String;
    spanId: typeof Schema.String;
    parent: Schema.Option<Schema.Struct<{
        traceId: typeof Schema.String;
        spanId: typeof Schema.String;
    }>>;
}>, typeof Schema.Never>;
export declare class GetSpan extends GetSpan_base {
}
export declare const WorkerMessage: Schema.Union<[typeof GetUserById, typeof GetPersonById, typeof InitialMessage, typeof GetSpan, typeof RunnerInterrupt]>;
export type WorkerMessage = Schema.Schema.Type<typeof WorkerMessage>;
export {};
//# sourceMappingURL=schema.d.ts.map