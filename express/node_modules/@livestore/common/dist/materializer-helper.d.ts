import { Option } from '@livestore/utils/effect';
import type { SqliteDb } from './adapter-types.js';
import type { EventDef, Materializer } from './schema/EventDef.js';
import type * as LiveStoreEvent from './schema/LiveStoreEvent.js';
import { type LiveStoreSchema } from './schema/schema.js';
import type { PreparedBindValues } from './util.js';
export declare const getExecStatementsFromMaterializer: ({ eventDef, materializer, dbState, event, }: {
    eventDef: EventDef.AnyWithoutFn;
    materializer: Materializer;
    dbState: SqliteDb;
    /** Both encoded and decoded events are supported to reduce the number of times we need to decode/encode */
    event: {
        decoded: LiveStoreEvent.AnyDecoded | LiveStoreEvent.PartialAnyDecoded;
        encoded: undefined;
    } | {
        decoded: undefined;
        encoded: LiveStoreEvent.AnyEncoded | LiveStoreEvent.PartialAnyEncoded;
    };
}) => ReadonlyArray<{
    statementSql: string;
    bindValues: PreparedBindValues;
    writeTables: ReadonlySet<string> | undefined;
}>;
export declare const makeMaterializerHash: ({ schema, dbState }: {
    schema: LiveStoreSchema;
    dbState: SqliteDb;
}) => (event: LiveStoreEvent.AnyEncodedGlobal) => Option.Option<number>;
export declare const hashMaterializerResults: (materializerResults: ReadonlyArray<{
    statementSql: string;
    bindValues: PreparedBindValues;
    writeTables: ReadonlySet<string> | undefined;
}>) => number;
export declare const replaceSessionIdSymbol: (bindValues: Record<string, unknown> | ReadonlyArray<unknown>, sessionId: string) => void;
//# sourceMappingURL=materializer-helper.d.ts.map