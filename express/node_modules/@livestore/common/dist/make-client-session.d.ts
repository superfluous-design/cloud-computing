import type { Scope, SubscriptionRef } from '@livestore/utils/effect';
import { Effect } from '@livestore/utils/effect';
import * as Webmesh from '@livestore/webmesh';
import type { AdapterArgs, ClientSession, ClientSessionLeaderThreadProxy, LockStatus, SqliteDb, UnexpectedError } from './adapter-types.js';
import * as Devtools from './devtools/mod.js';
declare global {
    var __debugWebmeshNode: any;
}
export declare const makeClientSession: <R>({ storeId, clientId, sessionId, isLeader, devtoolsEnabled, connectDevtoolsToStore, lockStatus, leaderThread, schema, sqliteDb, shutdown, connectWebmeshNode, webmeshMode, registerBeforeUnload, debugInstanceId, }: AdapterArgs & {
    clientId: string;
    sessionId: string;
    isLeader: boolean;
    lockStatus: SubscriptionRef.SubscriptionRef<LockStatus>;
    leaderThread: ClientSessionLeaderThreadProxy;
    sqliteDb: SqliteDb;
    connectWebmeshNode: (args: {
        webmeshNode: Webmesh.MeshNode;
        sessionInfo: Devtools.SessionInfo.SessionInfo;
    }) => Effect.Effect<void, UnexpectedError, Scope.Scope | R>;
    webmeshMode: "direct" | "proxy";
    registerBeforeUnload: (onBeforeUnload: () => void) => () => void;
}) => Effect.Effect<ClientSession, never, Scope.Scope | R>;
//# sourceMappingURL=make-client-session.d.ts.map