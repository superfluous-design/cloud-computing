/**
 * Creates a map that has a fixed number of entries.
 * Once hitting the bound, earliest insertions are removed
 */
export declare class BoundMap<K, V> {
    #private;
    constructor(sizeLimit: number);
    onEvict: ((key: K, value: V) => void) | undefined;
    set: (key: K, value: V) => void;
    get: (key: K) => V | undefined;
    delete: (key: K) => void;
    keys: () => MapIterator<K>;
}
export declare class BoundSet<V> {
    #private;
    constructor(sizeLimit: number);
    onEvict: ((key: V) => void) | undefined;
    add: (v: V) => void;
    [Symbol.iterator]: () => MapIterator<V>;
}
export declare class BoundArray<V> {
    #private;
    sizeLimit: number;
    constructor(sizeLimit: number);
    static make: <V_1>(sizeLimit: number, initial?: Iterable<V_1>) => BoundArray<V_1>;
    onEvict: ((key: V) => void) | undefined;
    push: (v: V) => void;
    get: (index: number) => V | undefined;
    delete: (index: number) => void;
    get length(): number;
    [Symbol.iterator]: () => IterableIterator<V>;
    map: <T>(fn: (v: V) => T) => T[];
    clear: () => void;
    sort: (fn?: (a: V, b: V) => number) => V[];
}
//# sourceMappingURL=bounded-collections.d.ts.map