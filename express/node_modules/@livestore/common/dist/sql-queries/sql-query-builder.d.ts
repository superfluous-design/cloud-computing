import type { SqliteDsl } from '../schema/state/sqlite/db-schema/mod.js';
import type { BindValues } from './sql-queries.js';
import type * as ClientTypes from './types.js';
export type SqlQuery = [stmt: string, bindValues: BindValues, tableName: string];
export declare const makeSqlQueryBuilder: <TSchema extends SqliteDsl.DbSchema>(schema: TSchema) => {
    findManyRows: <TTableName extends keyof TSchema & string>({ tableName, where, limit, }: {
        tableName: TTableName;
        where: ClientTypes.WhereValuesForTable<TSchema, TTableName>;
        limit?: number;
    }) => [string, BindValues, TTableName];
    countRows: <TTableName extends keyof TSchema & string>({ tableName, where, }: {
        tableName: TTableName;
        where: ClientTypes.WhereValuesForTable<TSchema, TTableName>;
    }) => [string, BindValues, TTableName];
    insertRow: <TTableName extends keyof TSchema & string>({ tableName, values, options, }: {
        tableName: TTableName;
        values: ClientTypes.DecodedValuesForTable<TSchema, TTableName>;
        options?: {
            orReplace: boolean;
        };
    }) => [string, BindValues, TTableName];
    insertRows: <TTableName extends keyof TSchema & string>({ tableName, valuesArray, }: {
        tableName: TTableName;
        valuesArray: ClientTypes.DecodedValuesForTable<TSchema, TTableName>[];
    }) => [string, BindValues, TTableName];
    insertOrIgnoreRow: <TTableName extends keyof TSchema & string>({ tableName, values, returnRow, }: {
        tableName: TTableName;
        values: ClientTypes.DecodedValuesForTable<TSchema, TTableName>;
        returnRow?: boolean;
    }) => [string, BindValues, TTableName];
    updateRows: <TTableName extends keyof TSchema & string>({ tableName, updateValues, where, }: {
        tableName: TTableName;
        updateValues: Partial<ClientTypes.DecodedValuesForTableAll<TSchema, TTableName>>;
        where: ClientTypes.WhereValuesForTable<TSchema, TTableName>;
    }) => [string, BindValues, TTableName];
    deleteRows: <TTableName extends keyof TSchema & string>({ tableName, where, }: {
        tableName: TTableName;
        where: ClientTypes.WhereValuesForTable<TSchema, TTableName>;
    }) => [string, BindValues, TTableName];
    upsertRow: <TTableName extends keyof TSchema & string>({ tableName, createValues, updateValues, where, }: {
        tableName: TTableName;
        createValues: ClientTypes.DecodedValuesForTable<TSchema, TTableName>;
        updateValues: Partial<ClientTypes.DecodedValuesForTableAll<TSchema, TTableName>>;
        where: ClientTypes.WhereValuesForTable<TSchema, TTableName>;
    }) => [string, BindValues, TTableName];
};
//# sourceMappingURL=sql-query-builder.d.ts.map