import { shouldNeverHappen } from '@livestore/utils';
import { pipe, ReadonlyArray, Schema, TreeFormatter } from '@livestore/utils/effect';
import { sql } from '../util.js';
import { objectEntries } from './misc.js';
import * as ClientTypes from './types.js';
export const findManyRows = ({ columns, tableName, where, limit, }) => {
    const whereSql = buildWhereSql({ where });
    const whereModifier = whereSql === '' ? '' : `WHERE ${whereSql}`;
    const limitModifier = limit ? `LIMIT ${limit}` : '';
    const whereBindValues = makeBindValues({ columns, values: where, variablePrefix: 'where_', skipNil: true });
    return [sql `SELECT * FROM ${tableName} ${whereModifier} ${limitModifier}`, whereBindValues];
};
export const countRows = ({ columns, tableName, where, }) => {
    const whereSql = buildWhereSql({ where });
    const whereModifier = whereSql === '' ? '' : `WHERE ${whereSql}`;
    const whereBindValues = makeBindValues({ columns, values: where, variablePrefix: 'where_', skipNil: true });
    return [sql `SELECT count(1) FROM ${tableName} ${whereModifier}`, whereBindValues];
};
export const insertRow = ({ tableName, columns, values, options = { orReplace: false }, }) => {
    const stmt = insertRowPrepared({
        tableName,
        columns,
        options: { orReplace: options?.orReplace, keys: Object.keys(values) },
    });
    return [stmt, makeBindValues({ columns, values })];
};
export const insertRowPrepared = ({ tableName, columns, options = { orReplace: false }, }) => {
    const keys = options?.keys ?? Object.keys(columns);
    const keysStr = keys.join(', ');
    const valuesStr = keys.map((key) => `$${key}`).join(', ');
    return sql `INSERT ${options.orReplace ? 'OR REPLACE ' : ''}INTO ${tableName} (${keysStr}) VALUES (${valuesStr})`;
};
export const insertRows = ({ columns, tableName, valuesArray, }) => {
    const keysStr = Object.keys(valuesArray[0]).join(', ');
    // NOTE consider batching for large arrays (https://sqlite.org/forum/info/f832398c19d30a4a)
    const valuesStrs = valuesArray
        .map((values, itemIndex) => Object.keys(values)
        .map((_) => `$item_${itemIndex}_${_}`)
        .join(', '))
        .map((_) => `(${_})`)
        .join(', ');
    const bindValues = valuesArray.reduce((acc, values, itemIndex) => ({
        ...acc,
        ...makeBindValues({ columns, values, variablePrefix: `item_${itemIndex}_` }),
    }), {});
    return [sql `INSERT INTO ${tableName} (${keysStr}) VALUES ${valuesStrs}`, bindValues];
};
export const insertOrIgnoreRow = ({ columns, tableName, values: values_, returnRow, }) => {
    const values = filterUndefinedFields(values_);
    const keysStr = Object.keys(values).join(', ');
    const valuesStr = Object.keys(values)
        .map((_) => `$${_}`)
        .join(', ');
    const bindValues = makeBindValues({ columns, values });
    const returningStmt = returnRow ? 'RETURNING *' : '';
    return [sql `INSERT OR IGNORE INTO ${tableName} (${keysStr}) VALUES (${valuesStr}) ${returningStmt}`, bindValues];
};
export const updateRows = ({ columns, tableName, updateValues: updateValues_, where, }) => {
    const updateValues = filterUndefinedFields(updateValues_);
    // TODO return an Option instead of `select 1` if there are no update values
    if (Object.keys(updateValues).length === 0) {
        return [sql `select 1`, {}];
    }
    const updateValueStr = Object.keys(updateValues)
        .map((columnName) => `${columnName} = $update_${columnName}`)
        .join(', ');
    const bindValues = {
        ...makeBindValues({ columns, values: updateValues, variablePrefix: 'update_' }),
        ...makeBindValues({ columns, values: where, variablePrefix: 'where_', skipNil: true }),
    };
    const whereSql = buildWhereSql({ where });
    const whereModifier = whereSql === '' ? '' : `WHERE ${whereSql}`;
    return [sql `UPDATE ${tableName} SET ${updateValueStr} ${whereModifier}`, bindValues];
};
export const deleteRows = ({ columns, tableName, where, }) => {
    const bindValues = {
        ...makeBindValues({ columns, values: where, variablePrefix: 'where_', skipNil: true }),
    };
    const whereSql = buildWhereSql({ where });
    const whereModifier = whereSql === '' ? '' : `WHERE ${whereSql}`;
    return [sql `DELETE FROM ${tableName} ${whereModifier}`, bindValues];
};
export const upsertRow = ({ tableName, columns, createValues: createValues_, updateValues: updateValues_, where, }) => {
    const createValues = filterUndefinedFields(createValues_);
    const updateValues = filterUndefinedFields(updateValues_);
    const keysStr = Object.keys(createValues).join(', ');
    const createValuesStr = Object.keys(createValues)
        .map((_) => `$create_${_}`)
        .join(', ');
    const conflictStr = Object.keys(where).join(', ');
    const updateValueStr = Object.keys(updateValues)
        .map((columnName) => `${columnName} = $update_${columnName}`)
        .join(', ');
    const bindValues = {
        ...makeBindValues({ columns, values: createValues, variablePrefix: 'create_' }),
        ...makeBindValues({ columns, values: updateValues, variablePrefix: 'update_' }),
    };
    return [
        sql `
      INSERT INTO ${tableName} (${keysStr})
       VALUES (${createValuesStr})
       ON CONFLICT (${conflictStr}) DO UPDATE SET ${updateValueStr}
    `,
        bindValues,
    ];
};
export const createTable = ({ table, tableName, }) => {
    const primaryKeys = Object.entries(table.columns)
        .filter(([_, columnDef]) => columnDef.primaryKey)
        .map(([columnName, _]) => columnName);
    const columnDefStrs = Object.entries(table.columns).map(([columnName, columnDef]) => {
        const nullModifier = columnDef.nullable === true ? '' : 'NOT NULL';
        const defaultModifier = columnDef.default._tag === 'None' ? '' : `DEFAULT ${columnDef.default.value}`;
        return sql `${columnName} ${columnDef.columnType} ${nullModifier} ${defaultModifier}`;
    });
    if (primaryKeys.length > 0) {
        columnDefStrs.push(`PRIMARY KEY (${primaryKeys.join(', ')})`);
    }
    return sql `CREATE TABLE ${tableName} (${columnDefStrs.join(', ')});`;
};
export const makeBindValues = ({ columns, values, variablePrefix = '', skipNil, }) => {
    const codecMap = pipe(columns, objectEntries, ReadonlyArray.map(([columnName, columnDef]) => [
        columnName,
        (value) => {
            if (columnDef.nullable === true && (value === null || value === undefined))
                return null;
            const res = Schema.encodeEither(columnDef.schema)(value);
            if (res._tag === 'Left') {
                const parseErrorStr = TreeFormatter.formatErrorSync(res.left);
                const expectedSchemaStr = String(columnDef.schema.ast);
                console.error(`\
Error making bind values for SQL query for column "${columnName}".

Expected schema: ${expectedSchemaStr}

Error: ${parseErrorStr}

Value:`, value);
                debugger;
                throw res.left;
            }
            else {
                return res.right;
            }
        },
    ]), Object.fromEntries);
    return pipe(Object.entries(values)
        // NOTE null/undefined values are handled via explicit SQL syntax and don't need to be provided as bind values
        .filter(([, value]) => skipNil !== true || (value !== null && value !== undefined))
        .flatMap(([columnName, value]) => {
        const codec = codecMap[columnName] ?? shouldNeverHappen(`No codec found for column "${columnName}"`);
        // remap complex where-values with `op`
        if (typeof value === 'object' && value !== null && 'op' in value) {
            switch (value.op) {
                case 'in': {
                    return value.val.map((value, i) => [`${variablePrefix}${columnName}_${i}`, codec(value)]);
                }
                case '=':
                case '>':
                case '<': {
                    return [[`${variablePrefix}${columnName}`, codec(value.val)]];
                }
                default: {
                    throw new Error(`Unknown op: ${value.op}`);
                }
            }
        }
        else {
            return [[`${variablePrefix}${columnName}`, codec(value)]];
        }
    }), Object.fromEntries);
};
const buildWhereSql = ({ where, }) => {
    const getWhereOp = (columnName, value) => {
        if (value === null) {
            return `IS NULL`;
        }
        else if (typeof value === 'object' && typeof value.op === 'string' && ClientTypes.isValidWhereOp(value.op)) {
            return `${value.op} $where_${columnName}`;
        }
        else if (typeof value === 'object' && typeof value.op === 'string' && value.op === 'in') {
            return `in (${value.val.map((_, i) => `$where_${columnName}_${i}`).join(', ')})`;
        }
        else {
            return `= $where_${columnName}`;
        }
    };
    return pipe(where, objectEntries, ReadonlyArray.map(([columnName, value]) => `${columnName} ${getWhereOp(columnName, value)}`), ReadonlyArray.join(' AND '));
};
// TODO better typing
const filterUndefinedFields = (obj) => {
    return Object.fromEntries(Object.entries(obj).filter(([, value]) => value !== undefined));
};
//# sourceMappingURL=sql-queries.js.map