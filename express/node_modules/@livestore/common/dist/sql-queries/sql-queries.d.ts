import type { SqliteDsl } from '../schema/state/sqlite/db-schema/mod.js';
import * as ClientTypes from './types.js';
export type BindValues = {
    readonly [columnName: string]: any;
};
export declare const findManyRows: <TColumns extends SqliteDsl.Columns>({ columns, tableName, where, limit, }: {
    tableName: string;
    columns: TColumns;
    where: ClientTypes.WhereValuesForColumns<TColumns>;
    limit?: number;
}) => [string, BindValues];
export declare const countRows: <TColumns extends SqliteDsl.Columns>({ columns, tableName, where, }: {
    tableName: string;
    columns: TColumns;
    where: ClientTypes.WhereValuesForColumns<TColumns>;
}) => [string, BindValues];
export declare const insertRow: <TColumns extends SqliteDsl.Columns>({ tableName, columns, values, options, }: {
    tableName: string;
    columns: TColumns;
    values: ClientTypes.DecodedValuesForColumns<TColumns>;
    options?: {
        orReplace: boolean;
    };
}) => [string, BindValues];
export declare const insertRowPrepared: <TColumns extends SqliteDsl.Columns>({ tableName, columns, options, }: {
    tableName: string;
    columns: TColumns;
    options?: {
        orReplace: boolean;
        keys?: string[];
    };
}) => string;
export declare const insertRows: <TColumns extends SqliteDsl.Columns>({ columns, tableName, valuesArray, }: {
    tableName: string;
    columns: TColumns;
    valuesArray: ClientTypes.DecodedValuesForColumns<TColumns>[];
}) => [string, BindValues];
export declare const insertOrIgnoreRow: <TColumns extends SqliteDsl.Columns>({ columns, tableName, values: values_, returnRow, }: {
    tableName: string;
    columns: TColumns;
    values: ClientTypes.DecodedValuesForColumns<TColumns>;
    returnRow: boolean;
}) => [string, BindValues];
export declare const updateRows: <TColumns extends SqliteDsl.Columns>({ columns, tableName, updateValues: updateValues_, where, }: {
    columns: TColumns;
    tableName: string;
    updateValues: Partial<ClientTypes.DecodedValuesForColumnsAll<TColumns>>;
    where: ClientTypes.WhereValuesForColumns<TColumns>;
}) => [string, BindValues];
export declare const deleteRows: <TColumns extends SqliteDsl.Columns>({ columns, tableName, where, }: {
    columns: TColumns;
    tableName: string;
    where: ClientTypes.WhereValuesForColumns<TColumns>;
}) => [string, BindValues];
export declare const upsertRow: <TColumns extends SqliteDsl.Columns>({ tableName, columns, createValues: createValues_, updateValues: updateValues_, where, }: {
    tableName: string;
    columns: TColumns;
    createValues: ClientTypes.DecodedValuesForColumns<TColumns>;
    updateValues: Partial<ClientTypes.DecodedValuesForColumnsAll<TColumns>>;
    where: ClientTypes.WhereValuesForColumns<TColumns>;
}) => [string, BindValues];
export declare const createTable: ({ table, tableName, }: {
    table: SqliteDsl.TableDefinition<any, SqliteDsl.Columns>;
    tableName: string;
}) => string;
export declare const makeBindValues: <TColumns extends SqliteDsl.Columns, TKeys extends keyof TColumns>({ columns, values, variablePrefix, skipNil, }: {
    columns: TColumns;
    values: Partial<Record<TKeys, any>>;
    variablePrefix?: string;
    /** So far only used to prepare `where` statements */
    skipNil?: boolean;
}) => Record<string, any>;
//# sourceMappingURL=sql-queries.d.ts.map