import type { EventDef, EventDefFactsSnapshot } from '../../schema/EventDef.js';
import type * as LiveStoreEvent from '../../schema/LiveStoreEvent.js';
import { type FactValidationResult } from './facts.js';
import type { HistoryDagNode } from './history-dag-common.js';
export type RebaseEventWithConflict = HistoryDagNode & {
    conflictType: 'overlap' | 'missing-requirement';
    conflictingEvents: HistoryDagNode[];
};
export type RebaseInput = {
    newRemoteEvents: RebaseEventWithConflict[];
    pendingLocalEvents: RebaseEventWithConflict[];
    validate: (args: {
        rebasedLocalEvents: LiveStoreEvent.PartialAnyDecoded[];
        eventDefs: Record<string, EventDef.Any>;
    }) => FactValidationResult;
};
export type RebaseOutput = {
    rebasedLocalEvents: LiveStoreEvent.PartialAnyDecoded[];
};
export type RebaseFn = (input: RebaseInput) => RebaseOutput;
export declare const defaultRebaseFn: RebaseFn;
export declare const rebaseEvents: ({ rebaseFn, pendingLocalEvents, newRemoteEvents, currentFactsSnapshot, clientId, sessionId, }: {
    pendingLocalEvents: HistoryDagNode[];
    newRemoteEvents: HistoryDagNode[];
    rebaseFn: RebaseFn;
    currentFactsSnapshot: EventDefFactsSnapshot;
    clientId: string;
    sessionId: string;
}) => ReadonlyArray<LiveStoreEvent.AnyDecoded>;
//# sourceMappingURL=rebase-events.d.ts.map