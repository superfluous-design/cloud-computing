import type { EventDef } from '../../../schema/EventDef.js';
import type { HistoryDagNode } from '../history-dag-common.js';
export declare const printEvent: ({ seqNum, parentSeqNum, factsGroup, ...rest }: HistoryDagNode) => {
    facts: import("../../../schema/EventDef.js").EventDefFactsGroup;
    name: string;
    args: any;
    meta?: any;
    clientId: string;
    sessionId: string | undefined;
    seqNum: string;
    parentSeqNum: string;
};
/** Used for conflict detection and event history compaction */
export declare const facts: {
    todoExists: (id: string) => string;
    todoIsWriteable: (id: string, writeable: boolean) => [string, boolean];
    todoCompleted: (id: string, completed: boolean) => [string, boolean];
    todoTextUpdated: (id: string) => string;
    inputValue: (id: string) => string;
};
export declare const events: {
    createTodo: EventDef<"createTodo", {
        readonly text: string;
        readonly id: string;
    }, {
        readonly text: string;
        readonly id: string;
    }, false>;
    upsertTodo: EventDef<"upsertTodo", {
        readonly text?: string | undefined;
        readonly id: string;
    }, {
        readonly id: string;
        readonly text?: string | undefined;
    }, false>;
    todoCompleted: EventDef<"todoCompleted", {
        readonly id: string;
    }, {
        readonly id: string;
    }, false>;
    todoUncompleted: EventDef<"todoUncompleted", {
        readonly id: string;
    }, {
        readonly id: string;
    }, false>;
    todoCompleteds: EventDef<"todoCompleteds", {
        readonly ids: readonly string[];
    }, {
        readonly ids: readonly string[];
    }, false>;
    toggleTodo: EventDef<"toggleTodo", {
        readonly id: string;
    }, {
        readonly id: string;
    }, false>;
    setReadonlyTodo: EventDef<"setReadonlyTodo", {
        readonly id: string;
        readonly readonly: boolean;
    }, {
        readonly id: string;
        readonly readonly: boolean;
    }, false>;
    setTextTodo: EventDef<"setTextTodo", {
        readonly text: string;
        readonly id: string;
    }, {
        readonly text: string;
        readonly id: string;
    }, false>;
    setInputValue: EventDef<"setInputValue", {
        readonly text: string;
        readonly id: string;
    }, {
        readonly text: string;
        readonly id: string;
    }, false>;
};
export type PartialEvent = {
    name: string;
    args: any;
};
export declare const toEventNodes: (partialEvents: PartialEvent[], eventDefs: Record<string, EventDef.Any>, clientId: string, sessionId: string | undefined) => HistoryDagNode[];
//# sourceMappingURL=event-fixtures.d.ts.map