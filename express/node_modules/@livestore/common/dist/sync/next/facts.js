import { notYetImplemented } from '@livestore/utils';
import { graphologyDag } from './graphology_.js';
import { EMPTY_FACT_VALUE } from './history-dag-common.js';
export const factsSnapshotForEvents = (events, endEventSequenceNumber) => {
    const facts = new Map();
    for (const event of events) {
        if (compareEventSequenceNumbers(event.seqNum, endEventSequenceNumber) > 0) {
            return facts;
        }
        applyFactGroup(event.factsGroup, facts);
    }
    return facts;
};
export const factsSnapshotForDag = (dag, endEventSequenceNumber) => {
    const facts = new Map();
    const orderedEventSequenceNumberStrs = graphologyDag.topologicalSort(dag);
    for (let i = 0; i < orderedEventSequenceNumberStrs.length; i++) {
        const event = dag.getNodeAttributes(orderedEventSequenceNumberStrs[i]);
        if (endEventSequenceNumber !== undefined && compareEventSequenceNumbers(event.seqNum, endEventSequenceNumber) > 0) {
            return facts;
        }
        applyFactGroup(event.factsGroup, facts);
    }
    return facts;
};
export const validateFacts = ({ factGroups, initialSnapshot, }) => {
    const currentSnapshot = new Map(initialSnapshot);
    for (const [index, factGroup] of factGroups.entries()) {
        if (isSubSetMapByValue(factGroup.depRequire, currentSnapshot) === false) {
            const existing = new Map();
            const required = new Map();
            for (const [key, value] of factGroup.depRequire) {
                if (currentSnapshot.get(key) !== value) {
                    existing.set(key, currentSnapshot.get(key));
                    required.set(key, value);
                }
            }
            return {
                success: false,
                index,
                requiredFacts: factGroup.depRequire,
                currentSnapshot,
                mismatch: { existing, required },
            };
        }
        applyFactGroup(factGroup, currentSnapshot);
    }
    return {
        success: true,
    };
};
export const applyFactGroups = (factGroups, snapshot) => {
    for (const factGroup of factGroups) {
        applyFactGroup(factGroup, snapshot);
    }
};
export const applyFactGroup = (factGroup, snapshot) => {
    for (const [key, value] of factGroup.modifySet) {
        snapshot.set(key, value);
    }
    for (const [key, _value] of factGroup.modifyUnset) {
        snapshot.delete(key);
    }
};
/** Check if setA is a subset of setB */
const isSubSetMapByValue = (setA, setB) => {
    for (const [key, value] of setA) {
        if (setB.get(key) !== value) {
            return false;
        }
    }
    return true;
};
/** Check if setA is a subset of setB */
const isSubSetMapByKey = (setA, setB) => {
    for (const [key, _value] of setA) {
        if (!setB.has(key)) {
            return false;
        }
    }
    return true;
};
/** Check if groupA depends on groupB */
export const dependsOn = (groupA, groupB) => factsIntersect(groupA.depRead, groupB.modifySet) ||
    factsIntersect(groupA.depRead, groupB.modifyUnset) ||
    factsIntersect(groupA.depRequire, groupB.modifySet) ||
    factsIntersect(groupA.depRequire, groupB.modifyUnset);
export const replacesFacts = (groupA, groupB) => {
    const replaces = (a, b) => a.size > 0 && b.size > 0 && isSameMapByKey(a, b);
    const noFactsOrSame = (a, b) => a.size === 0 || b.size === 0 || isSameMapByKey(a, b);
    return ((replaces(groupA.modifySet, groupB.modifySet) && noFactsOrSame(groupA.modifyUnset, groupB.modifyUnset)) ||
        (replaces(groupA.modifySet, groupB.modifyUnset) && noFactsOrSame(groupA.modifyUnset, groupB.modifySet)) ||
        (replaces(groupA.modifyUnset, groupB.modifySet) && noFactsOrSame(groupA.modifySet, groupB.modifyUnset)) ||
        (replaces(groupA.modifyUnset, groupB.modifyUnset) && noFactsOrSame(groupA.modifySet, groupB.modifySet)));
};
export const isSameMapByKey = (set, otherSet) => set.size === otherSet.size && isSubSetMapByKey(set, otherSet);
export const factsToString = (facts) => {
    return Array.from(facts)
        .map(([key, value]) => (value === EMPTY_FACT_VALUE ? key : `${key}=${value}`))
        .join(', ');
};
export const factsIntersect = (setA, setB) => {
    for (const [key, _value] of setA) {
        if (setB.has(key)) {
            return true;
        }
    }
    return false;
};
export const getFactsGroupForEventArgs = ({ factsCallback, args, currentFacts, }) => {
    const depRead = new Map();
    const factsSnapshotProxy = new Proxy(currentFacts, {
        get: (target, prop) => {
            if (prop === 'has') {
                return (key) => {
                    depRead.set(key, EMPTY_FACT_VALUE);
                    return target.has(key);
                };
            }
            else if (prop === 'get') {
                return (key) => {
                    depRead.set(key, EMPTY_FACT_VALUE);
                    return target.get(key);
                };
            }
            notYetImplemented(`getFactsGroupForEventArgs: ${prop.toString()} is not yet implemented`);
        },
    });
    const factsRes = factsCallback?.(args, factsSnapshotProxy);
    const iterableToMap = (iterable) => {
        const map = new Map();
        for (const item of iterable) {
            if (typeof item === 'string') {
                map.set(item, EMPTY_FACT_VALUE);
            }
            else {
                map.set(item[0], item[1]);
            }
        }
        return map;
    };
    const facts = {
        modifySet: factsRes?.modify.set ? iterableToMap(factsRes.modify.set) : new Map(),
        modifyUnset: factsRes?.modify.unset ? iterableToMap(factsRes.modify.unset) : new Map(),
        depRequire: factsRes?.require ? iterableToMap(factsRes.require) : new Map(),
        depRead,
    };
    return facts;
};
export const compareEventSequenceNumbers = (a, b) => {
    if (a.global !== b.global) {
        return a.global - b.global;
    }
    return a.client - b.client;
};
//# sourceMappingURL=facts.js.map