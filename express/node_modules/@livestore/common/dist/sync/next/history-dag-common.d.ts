import type { EventDefFactsGroup } from '../../schema/EventDef.js';
import * as EventSequenceNumber from '../../schema/EventSequenceNumber.js';
import { graphology } from './graphology_.js';
export declare const connectionTypeOptions: readonly ["parent", "facts"];
export type ConnectionType = (typeof connectionTypeOptions)[number];
/**
 * Eventlog represented as a multi-DAG including edges for
 * - total-order (parent) relationships
 * - dependency (requires/reads facts) relationships
 */
export type HistoryDag = graphology.IGraph<HistoryDagNode, {
    type: ConnectionType;
}>;
export declare const emptyHistoryDag: () => HistoryDag;
export declare const rootParentNum: EventSequenceNumber.EventSequenceNumber;
export type HistoryDagNode = {
    seqNum: EventSequenceNumber.EventSequenceNumber;
    parentSeqNum: EventSequenceNumber.EventSequenceNumber;
    name: string;
    args: any;
    /** Facts are being used for conflict detection and history compaction */
    factsGroup: EventDefFactsGroup;
    meta?: any;
    clientId: string;
    sessionId: string | undefined;
};
export declare const rootEventNode: HistoryDagNode;
export declare const EMPTY_FACT_VALUE: unique symbol;
//# sourceMappingURL=history-dag-common.d.ts.map