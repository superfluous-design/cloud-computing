import type { ParseResult, Scope, WebChannel } from '@livestore/utils/effect';
import { Duration, Effect, Schema, Subscribable } from '@livestore/utils/effect';
export declare const RequestSessions: Schema.TaggedStruct<"RequestSessions", {}>;
export type RequestSessions = typeof RequestSessions.Type;
export declare const SessionInfo: Schema.TaggedStruct<"SessionInfo", {
    storeId: typeof Schema.String;
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    schemaAlias: typeof Schema.String;
    isLeader: typeof Schema.Boolean;
}>;
export type SessionInfo = typeof SessionInfo.Type;
export declare const Message: Schema.Union<[Schema.TaggedStruct<"RequestSessions", {}>, Schema.TaggedStruct<"SessionInfo", {
    storeId: typeof Schema.String;
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    schemaAlias: typeof Schema.String;
    isLeader: typeof Schema.Boolean;
}>]>;
export type Message = typeof Message.Type;
/** Usually called in client session */
export declare const provideSessionInfo: ({ webChannel, sessionInfo, }: {
    webChannel: WebChannel.WebChannel<Message, Message>;
    sessionInfo: SessionInfo;
}) => Effect.Effect<void, ParseResult.ParseError>;
/** Usually called in devtools */
export declare const requestSessionInfoSubscription: ({ webChannel, pollInterval, staleTimeout, }: {
    webChannel: WebChannel.WebChannel<Message, Message>;
    pollInterval?: Duration.DurationInput;
    staleTimeout?: Duration.DurationInput;
}) => Effect.Effect<Subscribable.Subscribable<Set<SessionInfo>>, ParseResult.ParseError, Scope.Scope>;
//# sourceMappingURL=devtools-sessioninfo.d.ts.map