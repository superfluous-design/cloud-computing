import { Schema } from '@livestore/utils/effect';
import * as SyncState from '../sync/syncstate.js';
declare const ResetAllDataReq_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.ResetAllDataReq">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    mode: Schema.Literal<["all-data", "only-app-db"]>;
}>;
export declare class ResetAllDataReq extends ResetAllDataReq_base {
}
declare const DatabaseFileInfoReq_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.DatabaseFileInfoReq">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
}>;
export declare class DatabaseFileInfoReq extends DatabaseFileInfoReq_base {
}
declare const DatabaseFileInfo_base: Schema.Struct<{
    fileSize: typeof Schema.Number;
    persistenceInfo: Schema.TypeLiteral<{
        fileName: typeof Schema.String;
    }, readonly [{
        readonly key: typeof Schema.String;
        readonly value: typeof Schema.Any;
    }]>;
}>;
export declare class DatabaseFileInfo extends DatabaseFileInfo_base {
}
declare const DatabaseFileInfoRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.DatabaseFileInfoRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    state: typeof DatabaseFileInfo;
    eventlog: typeof DatabaseFileInfo;
}>;
export declare class DatabaseFileInfoRes extends DatabaseFileInfoRes_base {
}
declare const NetworkStatusSubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.NetworkStatusSubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class NetworkStatusSubscribe extends NetworkStatusSubscribe_base {
}
declare const NetworkStatusUnsubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.NetworkStatusUnsubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class NetworkStatusUnsubscribe extends NetworkStatusUnsubscribe_base {
}
declare const NetworkStatusRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.NetworkStatusRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    networkStatus: Schema.Struct<{
        isConnected: typeof Schema.Boolean;
        timestampMs: typeof Schema.Number;
        latchClosed: typeof Schema.Boolean;
    }>;
    subscriptionId: typeof Schema.String;
}>;
export declare class NetworkStatusRes extends NetworkStatusRes_base {
}
declare const SyncingInfoReq_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SyncingInfoReq">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
}>;
export declare class SyncingInfoReq extends SyncingInfoReq_base {
}
declare const SyncingInfo_base: Schema.Struct<{
    enabled: typeof Schema.Boolean;
    metadata: Schema.Record$<typeof Schema.String, typeof Schema.Any>;
}>;
export declare class SyncingInfo extends SyncingInfo_base {
}
declare const SyncingInfoRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SyncingInfoRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    syncingInfo: typeof SyncingInfo;
}>;
export declare class SyncingInfoRes extends SyncingInfoRes_base {
}
declare const SyncHistorySubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SyncHistorySubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class SyncHistorySubscribe extends SyncHistorySubscribe_base {
}
declare const SyncHistoryUnsubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SyncHistoryUnsubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class SyncHistoryUnsubscribe extends SyncHistoryUnsubscribe_base {
}
declare const SyncHistoryRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SyncHistoryRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    eventEncoded: Schema.Struct<{
        name: typeof Schema.String;
        args: typeof Schema.Any;
        seqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        parentSeqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        clientId: typeof Schema.String;
        sessionId: typeof Schema.String;
    }>;
    metadata: Schema.Option<Schema.Schema<Schema.JsonValue, Schema.JsonValue, never>>;
    subscriptionId: typeof Schema.String;
}>;
export declare class SyncHistoryRes extends SyncHistoryRes_base {
}
declare const SyncHeadSubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SyncHeadSubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class SyncHeadSubscribe extends SyncHeadSubscribe_base {
}
declare const SyncHeadUnsubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SyncHeadUnsubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class SyncHeadUnsubscribe extends SyncHeadUnsubscribe_base {
}
declare const SyncHeadRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SyncHeadRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    local: Schema.Struct<{
        global: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        client: Schema.BrandSchema<number & import("effect/Brand").Brand<"ClientEventSequenceNumber">, number, never>;
    }>;
    upstream: Schema.Struct<{
        global: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        client: Schema.BrandSchema<number & import("effect/Brand").Brand<"ClientEventSequenceNumber">, number, never>;
    }>;
    subscriptionId: typeof Schema.String;
}>;
export declare class SyncHeadRes extends SyncHeadRes_base {
}
declare const SnapshotReq_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SnapshotReq">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
}>;
export declare class SnapshotReq extends SnapshotReq_base {
}
declare const SnapshotRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SnapshotRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    snapshot: Schema.Schema<Uint8Array<ArrayBufferLike>, Uint8Array<ArrayBufferLike>, never>;
}>;
export declare class SnapshotRes extends SnapshotRes_base {
}
export declare const LoadDatabaseFile: import("./devtools-messages-common.js").LeaderReqResSchema<"LSD.Leader.LoadDatabaseFile", {
    data: Schema.Schema<Uint8Array<ArrayBufferLike>, Uint8Array<ArrayBufferLike>, never>;
}, {}, {
    cause: Schema.Union<[Schema.TaggedStruct<"unsupported-file", {}>, Schema.TaggedStruct<"unsupported-database", {}>, Schema.TaggedStruct<"unexpected-error", {
        cause: typeof Schema.Defect;
    }>]>;
}>;
declare const SyncPull_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.SyncPull">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    payload: typeof SyncState.PayloadUpstream;
}>;
export declare class SyncPull extends SyncPull_base {
}
declare const CommitEventReq_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.CommitEventReq">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    eventEncoded: Schema.Struct<{
        name: typeof Schema.String;
        args: typeof Schema.Any;
    }>;
}>;
export declare class CommitEventReq extends CommitEventReq_base {
}
declare const CommitEventRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.CommitEventRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
}>;
export declare class CommitEventRes extends CommitEventRes_base {
}
declare const EventlogReq_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.EventlogReq">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
}>;
export declare class EventlogReq extends EventlogReq_base {
}
declare const EventlogRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.EventlogRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & {
    eventlog: Schema.Schema<Uint8Array<ArrayBufferLike>, Uint8Array<ArrayBufferLike>, never>;
}>;
export declare class EventlogRes extends EventlogRes_base {
}
declare const Ping_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.Ping">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
}>;
export declare class Ping extends Ping_base {
}
declare const Pong_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.Pong">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
}>;
export declare class Pong extends Pong_base {
}
declare const Disconnect_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.Leader.Disconnect">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
}>;
export declare class Disconnect extends Disconnect_base {
}
export declare const SetSyncLatch: import("./devtools-messages-common.js").LeaderReqResSchema<"LSD.Leader.SetSyncLatch", {
    closeLatch: typeof Schema.Boolean;
}, {}, never>;
export declare const ResetAllData: import("./devtools-messages-common.js").LeaderReqResSchema<"LSD.Leader.ResetAllData", {
    mode: Schema.Literal<["all-data", "only-app-db"]>;
}, {}, never>;
export declare const MessageToApp: Schema.Union<[typeof SnapshotReq, Schema.TaggedStruct<"LSD.Leader.LoadDatabaseFile.Request", {
    data: Schema.Schema<Uint8Array<ArrayBufferLike>, Uint8Array<ArrayBufferLike>, never>;
} & {
    readonly requestId: typeof Schema.String;
    readonly liveStoreVersion: typeof import("./devtools-messages-common.js").liveStoreVersion;
    readonly clientId: typeof Schema.String;
}>, typeof EventlogReq, Schema.TaggedStruct<"LSD.Leader.ResetAllData.Request", {
    mode: Schema.Literal<["all-data", "only-app-db"]>;
} & {
    readonly requestId: typeof Schema.String;
    readonly liveStoreVersion: typeof import("./devtools-messages-common.js").liveStoreVersion;
    readonly clientId: typeof Schema.String;
}>, typeof NetworkStatusSubscribe, typeof NetworkStatusUnsubscribe, typeof Disconnect, typeof CommitEventReq, typeof Ping, typeof DatabaseFileInfoReq, typeof SyncHistorySubscribe, typeof SyncHistoryUnsubscribe, typeof SyncingInfoReq, typeof SyncHeadSubscribe, typeof SyncHeadUnsubscribe, Schema.TaggedStruct<"LSD.Leader.SetSyncLatch.Request", {
    closeLatch: typeof Schema.Boolean;
} & {
    readonly requestId: typeof Schema.String;
    readonly liveStoreVersion: typeof import("./devtools-messages-common.js").liveStoreVersion;
    readonly clientId: typeof Schema.String;
}>]>;
export type MessageToApp = typeof MessageToApp.Type;
export declare const MessageFromApp: Schema.Union<[typeof SnapshotRes, Schema.TaggedStruct<"LSD.Leader.LoadDatabaseFile.Response.Success", {
    readonly requestId: typeof Schema.String;
    readonly liveStoreVersion: typeof import("./devtools-messages-common.js").liveStoreVersion;
    readonly clientId: typeof Schema.String;
}> | Schema.TaggedStruct<"LSD.Leader.LoadDatabaseFile.Response.Error", {
    cause: Schema.Union<[Schema.TaggedStruct<"unsupported-file", {}>, Schema.TaggedStruct<"unsupported-database", {}>, Schema.TaggedStruct<"unexpected-error", {
        cause: typeof Schema.Defect;
    }>]>;
} & {
    readonly requestId: typeof Schema.String;
    readonly liveStoreVersion: typeof import("./devtools-messages-common.js").liveStoreVersion;
    readonly clientId: typeof Schema.String;
}>, typeof EventlogRes, typeof Disconnect, typeof SyncPull, typeof NetworkStatusRes, typeof CommitEventRes, typeof Pong, typeof DatabaseFileInfoRes, typeof SyncHistoryRes, typeof SyncingInfoRes, typeof SyncHeadRes, Schema.TaggedStruct<"LSD.Leader.ResetAllData.Response.Success", {
    readonly requestId: typeof Schema.String;
    readonly liveStoreVersion: typeof import("./devtools-messages-common.js").liveStoreVersion;
    readonly clientId: typeof Schema.String;
}>, Schema.TaggedStruct<"LSD.Leader.SetSyncLatch.Response.Success", {
    readonly requestId: typeof Schema.String;
    readonly liveStoreVersion: typeof import("./devtools-messages-common.js").liveStoreVersion;
    readonly clientId: typeof Schema.String;
}>]>;
export type MessageFromApp = typeof MessageFromApp.Type;
export {};
//# sourceMappingURL=devtools-messages-leader.d.ts.map