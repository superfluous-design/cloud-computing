import { Schema } from '@livestore/utils/effect';
declare const DebugInfoReq_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.DebugInfoReq">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
}>;
export declare class DebugInfoReq extends DebugInfoReq_base {
}
declare const DebugInfoRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.DebugInfoRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    debugInfo: Schema.Struct<{
        slowQueries: Schema.transform<Schema.Struct<{
            size: typeof Schema.Number;
            items: Schema.Array$<Schema.Schema<{
                readonly queryStr: string;
                readonly bindValues: ((readonly (string | number | Uint8Array<ArrayBufferLike> | null)[] | {
                    readonly [x: string]: string | number | Uint8Array<ArrayBufferLike> | null;
                }) & import("effect/Brand").Brand<"PreparedBindValues">) | undefined;
                readonly durationMs: number;
                readonly rowsCount: number | undefined;
                readonly queriedTables: ReadonlySet<string>;
                readonly startTimePerfNow: number;
            }, {
                readonly queryStr: string;
                readonly bindValues: readonly (string | number | readonly number[] | null)[] | {
                    readonly [x: string]: string | number | readonly number[] | null;
                } | undefined;
                readonly durationMs: number;
                readonly rowsCount: number | undefined;
                readonly queriedTables: readonly string[];
                readonly startTimePerfNow: number;
            }, never>>;
        }>, Schema.Schema<import("../bounded-collections.js").BoundArray<{
            readonly queryStr: string;
            readonly bindValues: ((readonly (string | number | Uint8Array<ArrayBufferLike> | null)[] | {
                readonly [x: string]: string | number | Uint8Array<ArrayBufferLike> | null;
            }) & import("effect/Brand").Brand<"PreparedBindValues">) | undefined;
            readonly durationMs: number;
            readonly rowsCount: number | undefined;
            readonly queriedTables: ReadonlySet<string>;
            readonly startTimePerfNow: number;
        }>, import("../bounded-collections.js").BoundArray<{
            readonly queryStr: string;
            readonly bindValues: ((readonly (string | number | Uint8Array<ArrayBufferLike> | null)[] | {
                readonly [x: string]: string | number | Uint8Array<ArrayBufferLike> | null;
            }) & import("effect/Brand").Brand<"PreparedBindValues">) | undefined;
            readonly durationMs: number;
            readonly rowsCount: number | undefined;
            readonly queriedTables: ReadonlySet<string>;
            readonly startTimePerfNow: number;
        }>, never>>;
        queryFrameDuration: typeof Schema.Number;
        queryFrameCount: typeof Schema.Number;
        events: Schema.transform<Schema.Struct<{
            size: typeof Schema.Number;
            items: Schema.Array$<Schema.Schema<readonly [string, any], readonly [string, any], never>>;
        }>, Schema.Schema<import("../bounded-collections.js").BoundArray<readonly [string, any]>, import("../bounded-collections.js").BoundArray<readonly [string, any]>, never>>;
    }>;
}>;
export declare class DebugInfoRes extends DebugInfoRes_base {
}
declare const DebugInfoHistorySubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.DebugInfoHistorySubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class DebugInfoHistorySubscribe extends DebugInfoHistorySubscribe_base {
}
declare const DebugInfoHistoryRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.DebugInfoHistoryRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    debugInfoHistory: Schema.Array$<Schema.Struct<{
        slowQueries: Schema.transform<Schema.Struct<{
            size: typeof Schema.Number;
            items: Schema.Array$<Schema.Schema<{
                readonly queryStr: string;
                readonly bindValues: ((readonly (string | number | Uint8Array<ArrayBufferLike> | null)[] | {
                    readonly [x: string]: string | number | Uint8Array<ArrayBufferLike> | null;
                }) & import("effect/Brand").Brand<"PreparedBindValues">) | undefined;
                readonly durationMs: number;
                readonly rowsCount: number | undefined;
                readonly queriedTables: ReadonlySet<string>;
                readonly startTimePerfNow: number;
            }, {
                readonly queryStr: string;
                readonly bindValues: readonly (string | number | readonly number[] | null)[] | {
                    readonly [x: string]: string | number | readonly number[] | null;
                } | undefined;
                readonly durationMs: number;
                readonly rowsCount: number | undefined;
                readonly queriedTables: readonly string[];
                readonly startTimePerfNow: number;
            }, never>>;
        }>, Schema.Schema<import("../bounded-collections.js").BoundArray<{
            readonly queryStr: string;
            readonly bindValues: ((readonly (string | number | Uint8Array<ArrayBufferLike> | null)[] | {
                readonly [x: string]: string | number | Uint8Array<ArrayBufferLike> | null;
            }) & import("effect/Brand").Brand<"PreparedBindValues">) | undefined;
            readonly durationMs: number;
            readonly rowsCount: number | undefined;
            readonly queriedTables: ReadonlySet<string>;
            readonly startTimePerfNow: number;
        }>, import("../bounded-collections.js").BoundArray<{
            readonly queryStr: string;
            readonly bindValues: ((readonly (string | number | Uint8Array<ArrayBufferLike> | null)[] | {
                readonly [x: string]: string | number | Uint8Array<ArrayBufferLike> | null;
            }) & import("effect/Brand").Brand<"PreparedBindValues">) | undefined;
            readonly durationMs: number;
            readonly rowsCount: number | undefined;
            readonly queriedTables: ReadonlySet<string>;
            readonly startTimePerfNow: number;
        }>, never>>;
        queryFrameDuration: typeof Schema.Number;
        queryFrameCount: typeof Schema.Number;
        events: Schema.transform<Schema.Struct<{
            size: typeof Schema.Number;
            items: Schema.Array$<Schema.Schema<readonly [string, any], readonly [string, any], never>>;
        }>, Schema.Schema<import("../bounded-collections.js").BoundArray<readonly [string, any]>, import("../bounded-collections.js").BoundArray<readonly [string, any]>, never>>;
    }>>;
    subscriptionId: typeof Schema.String;
}>;
export declare class DebugInfoHistoryRes extends DebugInfoHistoryRes_base {
}
declare const DebugInfoHistoryUnsubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.DebugInfoHistoryUnsubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class DebugInfoHistoryUnsubscribe extends DebugInfoHistoryUnsubscribe_base {
}
declare const DebugInfoResetReq_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.DebugInfoResetReq">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
}>;
export declare class DebugInfoResetReq extends DebugInfoResetReq_base {
}
declare const DebugInfoResetRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.DebugInfoResetRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
}>;
export declare class DebugInfoResetRes extends DebugInfoResetRes_base {
}
declare const DebugInfoRerunQueryReq_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.DebugInfoRerunQueryReq">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    queryStr: typeof Schema.String;
    bindValues: Schema.UndefinedOr<Schema.brand<Schema.Union<[Schema.Array$<Schema.Union<[typeof Schema.String, typeof Schema.Number, typeof Schema.Uint8Array, typeof Schema.Null]>>, Schema.Record$<typeof Schema.String, Schema.Union<[typeof Schema.String, typeof Schema.Number, typeof Schema.Uint8Array, typeof Schema.Null]>>]>, "PreparedBindValues">>;
    queriedTables: Schema.ReadonlySet$<typeof Schema.String>;
}>;
export declare class DebugInfoRerunQueryReq extends DebugInfoRerunQueryReq_base {
}
declare const DebugInfoRerunQueryRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.DebugInfoRerunQueryRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
}>;
export declare class DebugInfoRerunQueryRes extends DebugInfoRerunQueryRes_base {
}
declare const SyncHeadSubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.SyncHeadSubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class SyncHeadSubscribe extends SyncHeadSubscribe_base {
}
declare const SyncHeadUnsubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.SyncHeadUnsubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class SyncHeadUnsubscribe extends SyncHeadUnsubscribe_base {
}
declare const SyncHeadRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.SyncHeadRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    local: Schema.Struct<{
        global: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        client: Schema.BrandSchema<number & import("effect/Brand").Brand<"ClientEventSequenceNumber">, number, never>;
    }>;
    upstream: Schema.Struct<{
        global: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        client: Schema.BrandSchema<number & import("effect/Brand").Brand<"ClientEventSequenceNumber">, number, never>;
    }>;
    subscriptionId: typeof Schema.String;
}>;
export declare class SyncHeadRes extends SyncHeadRes_base {
}
declare const ReactivityGraphSubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.ReactivityGraphSubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    includeResults: typeof Schema.Boolean;
    subscriptionId: typeof Schema.String;
}>;
export declare class ReactivityGraphSubscribe extends ReactivityGraphSubscribe_base {
}
declare const ReactivityGraphUnsubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.ReactivityGraphUnsubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class ReactivityGraphUnsubscribe extends ReactivityGraphUnsubscribe_base {
}
declare const ReactivityGraphRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.ReactivityGraphRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    reactivityGraph: typeof Schema.Any;
    subscriptionId: typeof Schema.String;
}>;
export declare class ReactivityGraphRes extends ReactivityGraphRes_base {
}
declare const LiveQueriesSubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.LiveQueriesSubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class LiveQueriesSubscribe extends LiveQueriesSubscribe_base {
}
declare const LiveQueriesUnsubscribe_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.LiveQueriesUnsubscribe">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    subscriptionId: typeof Schema.String;
}>;
export declare class LiveQueriesUnsubscribe extends LiveQueriesUnsubscribe_base {
}
declare const SerializedLiveQuery_base: Schema.Struct<{
    _tag: Schema.Literal<["computed", "db", "graphql", "signal"]>;
    id: typeof Schema.Number;
    label: typeof Schema.String;
    hash: typeof Schema.String;
    runs: typeof Schema.Number;
    executionTimes: Schema.Array$<typeof Schema.Number>;
    lastestResult: typeof Schema.Any;
    activeSubscriptions: Schema.Array$<Schema.Struct<{
        frames: Schema.Array$<Schema.Struct<{
            name: typeof Schema.String;
            filePath: typeof Schema.String;
        }>>;
    }>>;
}>;
export declare class SerializedLiveQuery extends SerializedLiveQuery_base {
}
declare const LiveQueriesRes_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.LiveQueriesRes">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & {
    liveQueries: Schema.Array$<typeof SerializedLiveQuery>;
    subscriptionId: typeof Schema.String;
}>;
export declare class LiveQueriesRes extends LiveQueriesRes_base {
}
declare const Ping_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.Ping">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
}>;
export declare class Ping extends Ping_base {
}
declare const Pong_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.Pong">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
}>;
export declare class Pong extends Pong_base {
}
declare const Disconnect_base: Schema.Struct<{
    _tag: Schema.tag<"LSD.ClientSession.Disconnect">;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
}>;
export declare class Disconnect extends Disconnect_base {
}
export declare const MessageToApp: Schema.Union<[typeof DebugInfoReq, typeof DebugInfoHistorySubscribe, typeof DebugInfoHistoryUnsubscribe, typeof DebugInfoResetReq, typeof DebugInfoRerunQueryReq, typeof ReactivityGraphSubscribe, typeof ReactivityGraphUnsubscribe, typeof LiveQueriesSubscribe, typeof LiveQueriesUnsubscribe, typeof Disconnect, typeof Ping, typeof SyncHeadSubscribe, typeof SyncHeadUnsubscribe]>;
export type MessageToApp = typeof MessageToApp.Type;
export declare const MessageFromApp: Schema.Union<[typeof DebugInfoRes, typeof DebugInfoHistoryRes, typeof DebugInfoResetRes, typeof DebugInfoRerunQueryRes, typeof ReactivityGraphRes, typeof LiveQueriesRes, typeof Disconnect, typeof Pong, typeof SyncHeadRes]>;
export type MessageFromApp = typeof MessageFromApp.Type;
export {};
//# sourceMappingURL=devtools-messages-client-session.d.ts.map