import { Schema } from '@livestore/utils/effect';
export declare const NetworkStatus: Schema.Struct<{
    isConnected: typeof Schema.Boolean;
    timestampMs: typeof Schema.Number;
    /** Whether the network status devtools latch is closed. Used to simulate network disconnection. */
    latchClosed: typeof Schema.Boolean;
}>;
export type NetworkStatus = typeof NetworkStatus.Type;
export declare const requestId: typeof Schema.String;
export declare const clientId: typeof Schema.String;
export declare const sessionId: typeof Schema.String;
export declare const liveStoreVersion: Schema.Literal<["0.3.1"]>;
export declare const LSDMessage: <Tag extends string, Fields extends Schema.Struct.Fields>(tag: Tag, fields: Fields) => Schema.Struct<{
    _tag: Schema.tag<Tag>;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & Fields>;
export declare const LSDChannelMessage: <Tag extends string, Fields extends Schema.Struct.Fields>(tag: Tag, fields: Fields) => Schema.Struct<{
    _tag: Schema.tag<Tag>;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & Fields>;
export declare const LSDClientSessionChannelMessage: <Tag extends string, Fields extends Schema.Struct.Fields>(tag: Tag, fields: Fields) => Schema.Struct<{
    _tag: Schema.tag<Tag>;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
} & Fields>;
export declare const LSDClientSessionReqResMessage: <Tag extends string, Fields extends Schema.Struct.Fields>(tag: Tag, fields: Fields) => Schema.Struct<{
    _tag: Schema.tag<Tag>;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
    sessionId: typeof Schema.String;
    requestId: typeof Schema.String;
} & Fields>;
export declare const LSDReqResMessage: <Tag extends string, Fields extends Schema.Struct.Fields>(tag: Tag, fields: Fields) => Schema.Struct<{
    _tag: Schema.tag<Tag>;
} & {
    liveStoreVersion: Schema.Literal<["0.3.1"]>;
} & {
    clientId: typeof Schema.String;
} & {
    requestId: typeof Schema.String;
} & Fields>;
type DefaultFields = {
    readonly requestId: typeof Schema.String;
    readonly liveStoreVersion: typeof liveStoreVersion;
    readonly clientId: typeof Schema.String;
};
export type LeaderReqResSchema<Tag extends string, PayloadFields extends Schema.Struct.Fields, SuccessFields extends Schema.Struct.Fields, ErrorFields extends Schema.Struct.Fields = never> = {
    Request: Schema.TaggedStruct<`${Tag}.Request`, PayloadFields & DefaultFields>;
    Response: Schema.TaggedStruct<`${Tag}.Response.Success`, SuccessFields & DefaultFields> | (ErrorFields extends never ? never : Schema.TaggedStruct<`${Tag}.Response.Error`, ErrorFields & DefaultFields>);
    Success: Schema.TaggedStruct<`${Tag}.Response.Success`, SuccessFields & DefaultFields>;
    Error: ErrorFields extends never ? never : Schema.TaggedStruct<`${Tag}.Response.Error`, ErrorFields & DefaultFields>;
};
export declare const LeaderReqResMessage: <Tag extends string, PayloadFields extends Schema.Struct.Fields, SuccessFields extends Schema.Struct.Fields, ErrorFields extends Schema.Struct.Fields = never>(tag: Tag, fields: {
    payload: PayloadFields;
    success: SuccessFields;
    error?: ErrorFields;
}) => LeaderReqResSchema<Tag, PayloadFields, SuccessFields, ErrorFields>;
export {};
//# sourceMappingURL=devtools-messages-common.d.ts.map