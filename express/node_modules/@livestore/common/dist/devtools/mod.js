import { Schema } from '@livestore/utils/effect';
import { nanoid } from '@livestore/utils/nanoid';
import * as SessionInfo from './devtools-sessioninfo.js';
export * from './devtools-messages.js';
export * as SessionInfo from './devtools-sessioninfo.js';
export const DevtoolsMode = Schema.Union(Schema.TaggedStruct('node', {
    /** WebSocket URL */
    url: Schema.String,
}), Schema.TaggedStruct('web', {}), Schema.TaggedStruct('browser-extension', {}));
export const DevtoolsModeTag = DevtoolsMode.pipe(Schema.pluck('_tag'), Schema.typeSchema);
export const makeNodeName = {
    devtools: {
        random: () => `devtools-instance-${nanoid()}`,
    },
    client: {
        session: ({ storeId, clientId, sessionId }) => `client-session-${storeId}-${clientId}-${sessionId}`,
        leader: ({ storeId, clientId }) => `client-leader-${storeId}-${clientId}`,
    },
};
export const makeChannelName = {
    sessionInfo: () => `session-info`,
    devtoolsClientSession: ({ storeId, clientId, sessionId }) => `devtools-channel(client-session-${storeId}-${clientId}-${sessionId})`,
    devtoolsClientLeader: ({ storeId, clientId, sessionId }) => `devtools-channel(client-leader-${storeId}-${clientId}-${sessionId})`,
};
export const isChannelName = {
    devtoolsClientSession: (channelName, { storeId, clientId, sessionId }) => channelName === makeChannelName.devtoolsClientSession({ storeId, clientId, sessionId }),
    devtoolsClientLeader: (channelName, { storeId, clientId }) => channelName.startsWith(`devtools-channel(client-leader-${storeId}-${clientId}`),
};
export const makeSessionInfoBroadcastChannel = (webmeshNode) => webmeshNode.makeBroadcastChannel({
    channelName: makeChannelName.sessionInfo(),
    schema: SessionInfo.Message,
});
//# sourceMappingURL=mod.js.map