import type { Effect, Scope, WebChannel } from '@livestore/utils/effect';
import { Schema } from '@livestore/utils/effect';
import type { MeshNode } from '@livestore/webmesh';
import * as SessionInfo from './devtools-sessioninfo.js';
export * from './devtools-messages.js';
export * as SessionInfo from './devtools-sessioninfo.js';
export declare const DevtoolsMode: Schema.Union<[Schema.TaggedStruct<"node", {
    /** WebSocket URL */
    url: typeof Schema.String;
}>, Schema.TaggedStruct<"web", {}>, Schema.TaggedStruct<"browser-extension", {}>]>;
export type DevtoolsMode = typeof DevtoolsMode.Type;
export declare const DevtoolsModeTag: Schema.SchemaClass<"node" | "web" | "browser-extension", "node" | "web" | "browser-extension", never>;
export type DevtoolsModeTag = typeof DevtoolsModeTag.Type;
export declare const makeNodeName: {
    devtools: {
        random: () => string;
    };
    client: {
        session: ({ storeId, clientId, sessionId }: {
            storeId: string;
            clientId: string;
            sessionId: string;
        }) => string;
        leader: ({ storeId, clientId }: {
            storeId: string;
            clientId: string;
        }) => string;
    };
};
export declare const makeChannelName: {
    sessionInfo: () => string;
    devtoolsClientSession: ({ storeId, clientId, sessionId }: {
        storeId: string;
        clientId: string;
        sessionId: string;
    }) => string;
    devtoolsClientLeader: ({ storeId, clientId, sessionId }: {
        storeId: string;
        clientId: string;
        sessionId: string;
    }) => string;
};
export declare const isChannelName: {
    devtoolsClientSession: (channelName: string, { storeId, clientId, sessionId }: {
        storeId: string;
        clientId: string;
        sessionId: string;
    }) => boolean;
    devtoolsClientLeader: (channelName: string, { storeId, clientId }: {
        storeId: string;
        clientId: string;
    }) => boolean;
};
export declare const makeSessionInfoBroadcastChannel: (webmeshNode: MeshNode) => Effect.Effect<WebChannel.WebChannel<SessionInfo.Message, SessionInfo.Message>, never, Scope.Scope>;
//# sourceMappingURL=mod.d.ts.map