import type { HttpClient, Schema, Scope } from '@livestore/utils/effect';
import { Effect, Layer } from '@livestore/utils/effect';
import type { MakeSqliteDb } from '../adapter-types.js';
import { UnexpectedError } from '../adapter-types.js';
import type { LiveStoreSchema } from '../schema/mod.js';
import type { SyncOptions } from '../sync/sync.js';
import type { ShutdownChannel } from './shutdown-channel.js';
import type { DevtoolsOptions, LeaderSqliteDb } from './types.js';
import { LeaderThreadCtx } from './types.js';
export interface MakeLeaderThreadLayerParams {
    storeId: string;
    syncPayload: Schema.JsonValue | undefined;
    clientId: string;
    schema: LiveStoreSchema;
    makeSqliteDb: MakeSqliteDb;
    syncOptions: SyncOptions | undefined;
    dbState: LeaderSqliteDb;
    dbEventlog: LeaderSqliteDb;
    devtoolsOptions: DevtoolsOptions;
    shutdownChannel: ShutdownChannel;
    params?: {
        localPushBatchSize?: number;
        backendPushBatchSize?: number;
    };
    testing?: {
        syncProcessor?: {
            delays?: {
                localPushProcessing?: Effect.Effect<void>;
            };
        };
    };
}
export declare const makeLeaderThreadLayer: ({ schema, storeId, clientId, syncPayload, makeSqliteDb, syncOptions, dbState, dbEventlog, devtoolsOptions, shutdownChannel, params, testing, }: MakeLeaderThreadLayerParams) => Layer.Layer<LeaderThreadCtx, UnexpectedError, Scope.Scope | HttpClient.HttpClient>;
//# sourceMappingURL=make-leader-thread-layer.d.ts.map