import { Effect } from '@livestore/utils/effect';
import type { SqliteDb } from '../adapter-types.js';
import { SqliteError } from '../adapter-types.js';
import type { BindValues } from '../sql-queries/index.js';
import type { PreparedBindValues } from '../util.js';
type ConnectionOptions = {
    /**
     * The database connection locking mode.
     *
     * @remarks
     *
     * This **option is ignored** when used on an **in-memory database** as they can only operate in exclusive locking mode.
     * In-memory databases canâ€™t share state between connections (unless using a
     * {@link https://www.sqlite.org/sharedcache.html#shared_cache_and_in_memory_databases|shared cache}),
     * making concurrent access impossible. This is functionally equivalent to exclusive locking.
     *
     * @defaultValue
     * The default is `"NORMAL"` unless it was unless overridden at compile-time using `SQLITE_DEFAULT_LOCKING_MODE`.
     *
     * @see {@link https://www.sqlite.org/pragma.html#pragma_locking_mode|`locking_mode` pragma}
     */
    lockingMode?: 'NORMAL' | 'EXCLUSIVE';
    /**
     * Whether to enforce foreign key constraints.
     *
     * @privateRemarks
     *
     * We require a value for this option to minimize future problems, as the default value might change in future
     * versions of SQLite.
     *
     * @see {@link https://www.sqlite.org/pragma.html#pragma_foreign_keys|`foreign_keys` pragma}
     */
    foreignKeys: boolean;
};
export declare const configureConnection: (sqliteDb: SqliteDb, { foreignKeys, lockingMode }: ConnectionOptions) => Effect.Effect<void, SqliteError, never>;
export declare const execSql: (sqliteDb: SqliteDb, sql: string, bind: BindValues) => Effect.Effect<void, SqliteError, never>;
export declare const execSqlPrepared: (sqliteDb: SqliteDb, sql: string, bindValues: PreparedBindValues) => Effect.Effect<void, SqliteError, never>;
export {};
//# sourceMappingURL=connection.d.ts.map