/// <reference lib="dom" />
import { ParseResult, Schema } from '@livestore/utils/effect';
import { BoundArray } from './bounded-collections.js';
import { PreparedBindValues } from './util.js';
export const SlowQueryInfo = Schema.Struct({
    queryStr: Schema.String,
    bindValues: Schema.UndefinedOr(PreparedBindValues),
    durationMs: Schema.Number,
    rowsCount: Schema.UndefinedOr(Schema.Number),
    queriedTables: Schema.ReadonlySet(Schema.String),
    startTimePerfNow: Schema.Number,
});
const BoundArraySchemaFromSelf = (item) => Schema.declare([item], {
    decode: (item) => (input, parseOptions, ast) => {
        if (input instanceof BoundArray) {
            const elements = ParseResult.decodeUnknown(Schema.Array(item))([...input], parseOptions);
            return ParseResult.map(elements, (as) => BoundArray.make(input.sizeLimit, as));
        }
        return ParseResult.fail(new ParseResult.Type(ast, input));
    },
    encode: (item) => (input, parseOptions, ast) => {
        if (input instanceof BoundArray) {
            const elements = ParseResult.encodeUnknown(Schema.Array(item))([...input], parseOptions);
            return ParseResult.map(elements, (is) => BoundArray.make(input.sizeLimit, is));
        }
        return ParseResult.fail(new ParseResult.Type(ast, input));
    },
}, {
    description: `BoundArray<${Schema.format(item)}>`,
    pretty: () => (_) => `BoundArray(${_.length})`,
    arbitrary: () => (fc) => fc.anything(),
    equivalence: () => (a, b) => a === b,
});
export const BoundArraySchema = (elSchema) => Schema.transform(Schema.Struct({
    size: Schema.Number,
    items: Schema.Array(elSchema),
}), BoundArraySchemaFromSelf(Schema.typeSchema(elSchema)), {
    encode: (_) => ({ size: _.sizeLimit, items: [..._] }),
    decode: (_) => BoundArray.make(_.size, _.items),
});
export const DebugInfo = Schema.Struct({
    slowQueries: BoundArraySchema(SlowQueryInfo),
    queryFrameDuration: Schema.Number,
    queryFrameCount: Schema.Number,
    events: BoundArraySchema(Schema.Tuple(Schema.String, Schema.Any)),
});
export const MutableDebugInfo = Schema.mutable(DebugInfo);
//# sourceMappingURL=debug-info.js.map