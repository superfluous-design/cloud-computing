import { Brand, Schema } from '@livestore/utils/effect';
export const localEventSequenceNumber = Brand.nominal();
export const ClientEventSequenceNumber = Schema.fromBrand(localEventSequenceNumber)(Schema.Int);
export const globalEventSequenceNumber = Brand.nominal();
export const GlobalEventSequenceNumber = Schema.fromBrand(globalEventSequenceNumber)(Schema.Int);
export const clientDefault = 0;
// export const EventSequenceNumber = Schema.Struct({})
// export const EventSequenceNumber = Schema.Struct({})
// export const ClientEventSequenceNumber = Schema.Struct({})
// export const GlobalEventSequenceNumber = Schema.Struct({})
/**
 * NOTE: Client mutation events with a non-0 client id, won't be synced to the sync backend.
 */
export const EventSequenceNumber = Schema.Struct({
    global: GlobalEventSequenceNumber,
    /** Only increments for clientOnly events */
    client: ClientEventSequenceNumber,
    // TODO also provide a way to see "confirmation level" of event (e.g. confirmed by leader/sync backend)
    // TODO: actually add this field
    // Client only
    // generation: Schema.Number.pipe(Schema.optional),
}).annotations({ title: 'LiveStore.EventSequenceNumber' });
/**
 * Compare two event sequence numbers i.e. checks if the first event sequence number is less than the second.
 */
export const compare = (a, b) => {
    if (a.global !== b.global) {
        return a.global - b.global;
    }
    return a.client - b.client;
};
/**
 * Convert an event sequence number to a string representation.
 */
export const toString = (seqNum) => seqNum.client === 0 ? `e${seqNum.global}` : `e${seqNum.global}+${seqNum.client}`;
/**
 * Convert a string representation of an event sequence number to an event sequence number.
 */
export const fromString = (str) => {
    const [global, client] = str.slice(1, -1).split(',').map(Number);
    if (global === undefined || client === undefined) {
        throw new Error('Invalid event sequence number string');
    }
    return { global, client };
};
export const isEqual = (a, b) => a.global === b.global && a.client === b.client;
export const ROOT = {
    global: 0,
    client: clientDefault,
};
export const isGreaterThan = (a, b) => {
    return a.global > b.global || (a.global === b.global && a.client > b.client);
};
export const isGreaterThanOrEqual = (a, b) => {
    return a.global > b.global || (a.global === b.global && a.client >= b.client);
};
export const max = (a, b) => {
    return a.global > b.global || (a.global === b.global && a.client > b.client) ? a : b;
};
export const diff = (a, b) => {
    return {
        global: a.global - b.global,
        client: a.client - b.client,
    };
};
export const make = (seqNum) => {
    return Schema.is(EventSequenceNumber)(seqNum) ? seqNum : Schema.decodeSync(EventSequenceNumber)(seqNum);
};
export const nextPair = (seqNum, isLocal) => {
    if (isLocal) {
        return {
            seqNum: { global: seqNum.global, client: (seqNum.client + 1) },
            parentSeqNum: seqNum,
        };
    }
    return {
        seqNum: { global: (seqNum.global + 1), client: clientDefault },
        // NOTE we always point to `client: 0` for non-clientOnly events
        parentSeqNum: { global: seqNum.global, client: clientDefault },
    };
};
//# sourceMappingURL=EventSequenceNumber.js.map