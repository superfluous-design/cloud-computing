import { Schema } from '@livestore/utils/effect';
import { hashCode } from '../hash.js';
export const column = (props) => ({ _tag: 'column', ...props });
export const index = (columns, name, unique, primaryKey) => ({
    _tag: 'index',
    columns,
    name,
    unique,
    primaryKey,
});
export const table = (name, columns, indexes) => ({
    _tag: 'table',
    name,
    columns,
    indexes,
});
export const dbSchema = (tables) => ({ _tag: 'dbSchema', tables });
/**
 * NOTE we're only including SQLite-relevant information in the hash (which excludes the schema mapping)
 */
export const hash = (obj) => hashCode(JSON.stringify(trimInfoForHasing(obj)));
const trimInfoForHasing = (obj) => {
    switch (obj._tag) {
        case 'table': {
            return {
                _tag: 'table',
                name: obj.name,
                columns: obj.columns.map((column) => trimInfoForHasing(column)),
                indexes: obj.indexes.map((index) => trimInfoForHasing(index)),
            };
        }
        case 'column': {
            return {
                _tag: 'column',
                name: obj.name,
                type: obj.type._tag,
                primaryKey: obj.primaryKey,
                nullable: obj.nullable,
                default: obj.default,
            };
        }
        case 'index': {
            return {
                _tag: 'index',
                columns: obj.columns,
                name: obj.name,
                unique: obj.unique,
                primaryKey: obj.primaryKey,
            };
        }
        case 'foreignKey': {
            return {
                _tag: 'foreignKey',
                references: obj.references,
                key: obj.key,
                columns: obj.columns,
            };
        }
        case 'dbSchema': {
            return {
                _tag: 'dbSchema',
                tables: obj.tables.map(trimInfoForHasing),
            };
        }
        default: {
            throw new Error(`Unreachable: ${obj}`);
        }
    }
};
export const structSchemaForTable = (tableDef) => Schema.Struct(Object.fromEntries(tableDef.columns.map((column) => [column.name, column.schema])));
//# sourceMappingURL=sqlite.js.map