import { Schema } from '@livestore/utils/effect';
export * from './field-defs.js';
// TODO ensure via runtime check (possibly even via type-level check) that all index names are unique
export const makeDbSchema = (schema) => {
    return Array.isArray(schema) ? Object.fromEntries(schema.map((_) => [_.name, _])) : schema;
};
export const table = (name, columns, indexes) => {
    const ast = {
        _tag: 'table',
        name,
        columns: columsToAst(columns),
        indexes: indexesToAst(indexes ?? []),
    };
    return { name, columns, indexes, ast };
};
export const structSchemaForTable = (tableDef) => Schema.Struct(Object.fromEntries(tableDef.ast.columns.map((column) => [column.name, column.schema]))).annotations({
    title: tableDef.name,
});
export const insertStructSchemaForTable = (tableDef) => Schema.Struct(Object.fromEntries(tableDef.ast.columns.map((column) => [
    column.name,
    column.nullable === true || column.default._tag === 'Some' ? Schema.optional(column.schema) : column.schema,
]))).annotations({
    title: tableDef.name,
});
const columsToAst = (columns) => {
    return Object.entries(columns).map(([name, column]) => {
        return {
            _tag: 'column',
            name,
            schema: column.schema,
            default: column.default,
            nullable: column.nullable ?? false,
            primaryKey: column.primaryKey ?? false,
            type: { _tag: column.columnType },
        };
    });
};
const indexesToAst = (indexes) => {
    return indexes.map((_) => ({ _tag: 'index', columns: _.columns, name: _.name, unique: _.isUnique ?? false }));
};
//# sourceMappingURL=mod.js.map