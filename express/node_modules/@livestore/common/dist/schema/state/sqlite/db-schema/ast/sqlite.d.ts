import { type Option, Schema } from '@livestore/utils/effect';
export declare namespace ColumnType {
    type ColumnType = Text | Null | Real | Integer | Blob;
    type Text = {
        _tag: 'text';
    };
    type Null = {
        _tag: 'null';
    };
    type Real = {
        _tag: 'real';
    };
    type Integer = {
        _tag: 'integer';
    };
    type Blob = {
        _tag: 'blob';
    };
}
export type Column = {
    _tag: 'column';
    name: string;
    type: ColumnType.ColumnType;
    primaryKey: boolean;
    nullable: boolean;
    default: Option.Option<any>;
    schema: Schema.Schema<any>;
};
export declare const column: (props: Omit<Column, "_tag">) => Column;
export type Index = {
    _tag: 'index';
    columns: ReadonlyArray<string>;
    name?: string;
    unique?: boolean;
    primaryKey?: boolean;
};
export declare const index: (columns: ReadonlyArray<string>, name?: string, unique?: boolean, primaryKey?: boolean) => Index;
export type ForeignKey = {
    _tag: 'foreignKey';
    references: {
        table: string;
        columns: ReadonlyArray<string>;
    };
    key: {
        table: string;
        columns: ReadonlyArray<string>;
    };
    columns: ReadonlyArray<string>;
};
export type Table = {
    _tag: 'table';
    name: string;
    columns: ReadonlyArray<Column>;
    indexes: ReadonlyArray<Index>;
};
export declare const table: (name: string, columns: ReadonlyArray<Column>, indexes: ReadonlyArray<Index>) => Table;
export type DbSchema = {
    _tag: 'dbSchema';
    tables: Table[];
};
export declare const dbSchema: (tables: Table[]) => DbSchema;
/**
 * NOTE we're only including SQLite-relevant information in the hash (which excludes the schema mapping)
 */
export declare const hash: (obj: Table | Column | Index | ForeignKey | DbSchema) => number;
export declare const structSchemaForTable: (tableDef: Table) => Schema.Struct<{
    [k: string]: Schema.Schema<any, any, never>;
}>;
//# sourceMappingURL=sqlite.d.ts.map