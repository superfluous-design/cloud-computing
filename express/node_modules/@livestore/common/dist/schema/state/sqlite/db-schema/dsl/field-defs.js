import { casesHandled } from '@livestore/utils';
import { Option, Schema } from '@livestore/utils/effect';
export const isColumnDefinition = (value) => {
    const validColumnTypes = ['text', 'integer', 'real', 'blob'];
    return (typeof value === 'object' &&
        value !== null &&
        'columnType' in value &&
        validColumnTypes.includes(value['columnType']));
};
export const NoDefault = Symbol.for('NoDefault');
export const isSqlDefaultValue = (value) => {
    return typeof value === 'object' && value !== null && 'sql' in value && typeof value['sql'] === 'string';
};
const makeColDef = (columnType) => (def) => {
    const nullable = def?.nullable ?? false;
    const schemaWithoutNull = def?.schema ?? defaultSchemaForColumnType(columnType);
    const schema = nullable === true ? Schema.NullOr(schemaWithoutNull) : schemaWithoutNull;
    const default_ = def?.default === undefined || def.default === NoDefault ? Option.none() : Option.some(def.default);
    return {
        columnType,
        schema,
        default: default_,
        nullable,
        primaryKey: def?.primaryKey ?? false,
    };
};
export const column = (columnType) => makeColDef(columnType);
/// Column definitions
export const text = makeColDef('text');
export const integer = makeColDef('integer');
export const real = makeColDef('real');
export const blob = makeColDef('blob');
const makeSpecializedColDef = (columnType, opts) => (def) => {
    const nullable = def?.nullable ?? false;
    const schemaWithoutNull = opts._tag === 'baseSchemaFn' ? opts.baseSchemaFn(def?.schema) : opts.baseSchema;
    const schema = nullable === true ? Schema.NullOr(schemaWithoutNull) : schemaWithoutNull;
    const default_ = def?.default === undefined || def.default === NoDefault ? Option.none() : Option.some(def.default);
    return {
        columnType,
        schema,
        default: default_,
        nullable,
        primaryKey: def?.primaryKey ?? false,
    };
};
export const json = makeSpecializedColDef('text', {
    _tag: 'baseSchemaFn',
    baseSchemaFn: (customSchema) => Schema.parseJson(customSchema ?? Schema.Any),
});
export const datetime = makeSpecializedColDef('text', {
    _tag: 'baseSchema',
    baseSchema: Schema.Date,
});
export const datetimeInteger = makeSpecializedColDef('integer', {
    _tag: 'baseSchema',
    baseSchema: Schema.transform(Schema.Number, Schema.DateFromSelf, {
        decode: (ms) => new Date(ms),
        encode: (date) => date.getTime(),
    }),
});
export const boolean = makeSpecializedColDef('integer', {
    _tag: 'baseSchema',
    baseSchema: Schema.transform(Schema.Number, Schema.Boolean, {
        decode: (_) => _ === 1,
        encode: (_) => (_ ? 1 : 0),
    }),
});
export const defaultSchemaForColumnType = (columnType) => {
    switch (columnType) {
        case 'text': {
            return Schema.String;
        }
        case 'integer': {
            return Schema.Number;
        }
        case 'real': {
            return Schema.Number;
        }
        case 'blob': {
            return Schema.Uint8ArrayFromSelf;
        }
        default: {
            return casesHandled(columnType);
        }
    }
};
//# sourceMappingURL=field-defs.js.map