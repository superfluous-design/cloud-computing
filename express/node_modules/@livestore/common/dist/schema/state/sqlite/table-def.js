import { SqliteDsl } from './db-schema/mod.js';
import { makeQueryBuilder, QueryBuilderAstSymbol, QueryBuilderTypeId } from './query-builder/mod.js';
export const { blob, boolean, column, datetime, integer, isColumnDefinition, json, real, text } = SqliteDsl;
// TODO use to hide table def internals
export const TableDefInternalsSymbol = Symbol('TableDefInternals');
export const table = (args) => {
    const { name, columns: columnOrColumns, ...options } = args;
    const tablePath = name;
    const options_ = {
        isClientDocumentTable: false,
    };
    const columns = (SqliteDsl.isColumnDefinition(columnOrColumns) ? { value: columnOrColumns } : columnOrColumns);
    const sqliteDef = SqliteDsl.table(tablePath, columns, options?.indexes ?? []);
    const rowSchema = SqliteDsl.structSchemaForTable(sqliteDef);
    const insertSchema = SqliteDsl.insertStructSchemaForTable(sqliteDef);
    const tableDef = {
        sqliteDef,
        options: options_,
        rowSchema,
        insertSchema,
    };
    const query = makeQueryBuilder(tableDef);
    // tableDef.query = query
    // NOTE we're currently patching the existing tableDef object
    // as it's being used as part of the query builder API
    for (const key of Object.keys(query)) {
        // @ts-expect-error TODO properly implement this
        tableDef[key] = query[key];
    }
    // @ts-expect-error TODO properly type this
    tableDef[QueryBuilderAstSymbol] = query[QueryBuilderAstSymbol];
    // @ts-expect-error TODO properly type this
    tableDef[QueryBuilderTypeId] = query[QueryBuilderTypeId];
    return tableDef;
};
//# sourceMappingURL=table-def.js.map