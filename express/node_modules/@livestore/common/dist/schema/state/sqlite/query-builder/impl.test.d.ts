import { Schema } from '@livestore/utils/effect';
import { State } from '../../../mod.js';
export declare const issue: State.SQLite.TableDef<State.SQLite.SqliteTableDefForInput<"issue", {
    readonly id: {
        columnType: "integer";
        schema: Schema.Schema<number, number, never>;
        default: import("effect/Option").None<never>;
        nullable: false;
        primaryKey: true;
    };
    readonly title: {
        columnType: "text";
        schema: Schema.Schema<string, string, never>;
        default: import("effect/Option").Some<"">;
        nullable: false;
        primaryKey: false;
    };
    readonly creator: {
        columnType: "text";
        schema: Schema.Schema<string, string, never>;
        default: import("effect/Option").Some<"">;
        nullable: false;
        primaryKey: false;
    };
    readonly priority: {
        columnType: "integer";
        schema: Schema.Schema<0 | 4 | 1 | 2 | 3, 0 | 4 | 1 | 2 | 3, never>;
        default: import("effect/Option").Some<0>;
        nullable: false;
        primaryKey: false;
    };
    readonly created: {
        columnType: "integer";
        schema: Schema.Schema<Date, number, never>;
        default: import("effect/Option").None<never>;
        nullable: false;
        primaryKey: false;
    };
    readonly deleted: {
        columnType: "integer";
        schema: Schema.Schema<Date | null, number | null, never>;
        default: import("effect/Option").None<never>;
        nullable: true;
        primaryKey: false;
    };
    readonly modified: {
        columnType: "integer";
        schema: Schema.Schema<Date, number, never>;
        default: import("effect/Option").None<never>;
        nullable: false;
        primaryKey: false;
    };
    readonly kanbanorder: {
        columnType: "text";
        schema: Schema.Schema<string, string, never>;
        default: import("effect/Option").Some<"">;
        nullable: false;
        primaryKey: false;
    };
}>, {
    isClientDocumentTable: false;
    requiredInsertColumnNames: "id" | "created" | "modified";
}, Schema.Schema<{
    readonly id: number;
    readonly title: string;
    readonly creator: string;
    readonly priority: 0 | 4 | 1 | 2 | 3;
    readonly created: Date;
    readonly deleted: Date | null;
    readonly modified: Date;
    readonly kanbanorder: string;
}, {
    readonly id: number;
    readonly title: string;
    readonly creator: string;
    readonly priority: 0 | 4 | 1 | 2 | 3;
    readonly created: number;
    readonly deleted: number | null;
    readonly modified: number;
    readonly kanbanorder: string;
}, never>>;
//# sourceMappingURL=impl.test.d.ts.map