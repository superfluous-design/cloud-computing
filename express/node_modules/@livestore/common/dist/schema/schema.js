import { isReadonlyArray, shouldNeverHappen } from '@livestore/utils';
import { rawSqlEvent } from './EventDef.js';
import { tableIsClientDocumentTable } from './state/sqlite/client-document-def.js';
import { stateSystemTables } from './state/sqlite/system-tables.js';
export const LiveStoreSchemaSymbol = Symbol.for('livestore.LiveStoreSchema');
export const makeSchema = (
/** Note when using the object-notation for tables/events, the object keys are ignored and not used as table/mutation names */
inputSchema) => {
    const state = inputSchema.state;
    const tables = inputSchema.state.sqlite.tables;
    for (const tableDef of stateSystemTables) {
        tables.set(tableDef.sqliteDef.name, tableDef);
    }
    const eventsDefsMap = new Map();
    if (isReadonlyArray(inputSchema.events)) {
        for (const eventDef of inputSchema.events) {
            eventsDefsMap.set(eventDef.name, eventDef);
        }
    }
    else {
        for (const eventDef of Object.values(inputSchema.events ?? {})) {
            if (eventsDefsMap.has(eventDef.name)) {
                shouldNeverHappen(`Duplicate event name: ${eventDef.name}. Please use unique names for events.`);
            }
            eventsDefsMap.set(eventDef.name, eventDef);
        }
    }
    eventsDefsMap.set(rawSqlEvent.name, rawSqlEvent);
    for (const tableDef of tables.values()) {
        if (tableIsClientDocumentTable(tableDef) && eventsDefsMap.has(tableDef.set.name) === false) {
            eventsDefsMap.set(tableDef.set.name, tableDef.set);
        }
    }
    return {
        LiveStoreSchemaSymbol,
        _DbSchemaType: Symbol.for('livestore.DbSchemaType'),
        _EventDefMapType: Symbol.for('livestore.EventDefMapType'),
        state,
        eventsDefsMap,
        devtools: {
            alias: inputSchema.devtools?.alias ?? 'default',
        },
    };
};
export const getEventDef = (schema, eventName) => {
    const eventDef = schema.eventsDefsMap.get(eventName);
    if (eventDef === undefined) {
        return shouldNeverHappen(`No mutation definition found for \`${eventName}\`.`);
    }
    const materializer = schema.state.materializers.get(eventName);
    if (materializer === undefined) {
        return shouldNeverHappen(`No materializer found for \`${eventName}\`.`);
    }
    return { eventDef, materializer };
};
//# sourceMappingURL=schema.js.map