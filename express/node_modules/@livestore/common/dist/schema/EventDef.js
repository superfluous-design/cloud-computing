import { shouldNeverHappen } from '@livestore/utils';
import { Schema } from '@livestore/utils/effect';
export const defineFacts = (record) => record;
export const defineEvent = (args) => {
    const { name, schema, ...options } = args;
    const makePartialEvent = (args) => {
        const res = Schema.validateEither(schema)(args);
        if (res._tag === 'Left') {
            shouldNeverHappen(`Invalid event args for event '${name}':`, res.left.message, '\n');
        }
        return { name: name, args };
    };
    Object.defineProperty(makePartialEvent, 'name', { value: name });
    Object.defineProperty(makePartialEvent, 'schema', { value: schema });
    Object.defineProperty(makePartialEvent, 'encoded', {
        value: (args) => ({ name: name, args }),
    });
    Object.defineProperty(makePartialEvent, 'options', {
        value: {
            clientOnly: options?.clientOnly ?? false,
            facts: options?.facts
                ? (args, currentFacts) => {
                    const res = options.facts(args, currentFacts);
                    return {
                        modify: {
                            set: res.modify?.set ? new Set(res.modify.set) : new Set(),
                            unset: res.modify?.unset ? new Set(res.modify.unset) : new Set(),
                        },
                        require: res.require ? new Set(res.require) : new Set(),
                    };
                }
                : undefined,
            derived: options?.derived ?? false,
        },
    });
    return makePartialEvent;
};
export const synced = (args) => defineEvent({ ...args, clientOnly: false });
export const clientOnly = (args) => defineEvent({ ...args, clientOnly: true });
export const defineMaterializer = (eventDef, materializer) => {
    return materializer;
};
export const materializers = (eventDefRecord, handlers) => {
    return handlers;
};
export const rawSqlEvent = defineEvent({
    name: 'livestore.RawSql',
    schema: Schema.Struct({
        sql: Schema.String,
        bindValues: Schema.optional(Schema.Record({ key: Schema.String, value: Schema.Any })),
        writeTables: Schema.optional(Schema.ReadonlySet(Schema.String)),
    }),
    clientOnly: true,
    derived: true,
});
export const rawSqlMaterializer = defineMaterializer(rawSqlEvent, ({ sql, bindValues, writeTables }) => ({
    sql,
    bindValues: bindValues ?? {},
    writeTables,
}));
//# sourceMappingURL=EventDef.js.map