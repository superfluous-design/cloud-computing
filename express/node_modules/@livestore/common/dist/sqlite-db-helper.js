import { Schema } from '@livestore/utils/effect';
import { getResultSchema, isQueryBuilder } from './schema/state/sqlite/query-builder/mod.js';
export const makeExecute = (execute) => {
    return (...args) => {
        const [queryStrOrQueryBuilder, bindValuesOrOptions, maybeOptions] = args;
        if (isQueryBuilder(queryStrOrQueryBuilder)) {
            const { query, bindValues } = queryStrOrQueryBuilder.asSql();
            return execute(query, bindValues, bindValuesOrOptions);
        }
        else {
            return execute(queryStrOrQueryBuilder, bindValuesOrOptions, maybeOptions);
        }
    };
};
export const makeSelect = (select) => {
    return (...args) => {
        const [queryStrOrQueryBuilder, maybeBindValues] = args;
        if (isQueryBuilder(queryStrOrQueryBuilder)) {
            const { query, bindValues } = queryStrOrQueryBuilder.asSql();
            const resultSchema = getResultSchema(queryStrOrQueryBuilder);
            const results = select(query, bindValues);
            return Schema.decodeSync(resultSchema)(results);
        }
        else {
            return select(queryStrOrQueryBuilder, maybeBindValues);
        }
    };
};
//# sourceMappingURL=sqlite-db-helper.js.map