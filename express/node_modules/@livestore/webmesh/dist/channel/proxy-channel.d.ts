import type { PubSub } from '@livestore/utils/effect';
import { Effect, Queue, Schema, Scope, WebChannel } from '@livestore/utils/effect';
import { type ChannelName, type MeshNodeName, type ProxyQueueItem } from '../common.js';
import * as MeshSchema from '../mesh-schema.js';
interface MakeProxyChannelArgs {
    queue: Queue.Queue<ProxyQueueItem>;
    nodeName: MeshNodeName;
    newEdgeAvailablePubSub: PubSub.PubSub<MeshNodeName>;
    sendPacket: (packet: typeof MeshSchema.ProxyChannelPacket.Type) => Effect.Effect<void>;
    channelName: ChannelName;
    target: MeshNodeName;
    schema: {
        send: Schema.Schema<any, any>;
        listen: Schema.Schema<any, any>;
    };
}
export declare const makeProxyChannel: ({ queue, nodeName, newEdgeAvailablePubSub, sendPacket, target, channelName, schema, }: MakeProxyChannelArgs) => Effect.Effect<WebChannel.WebChannel<any, any, never>, never, Scope.Scope>;
export {};
//# sourceMappingURL=proxy-channel.d.ts.map