import { Predicate, Schema } from '@livestore/utils/effect';
// TODO actually use this to avoid timeouts in certain cases
// export class NoConnectionRouteSignal extends Schema.TaggedError<NoConnectionRouteSignal>()(
//   'NoConnectionRouteSignal',
//   {},
// ) {}
export class EdgeAlreadyExistsError extends Schema.TaggedError()('EdgeAlreadyExistsError', {
    target: Schema.String,
}) {
}
export const packetAsOtelAttributes = (packet) => ({
    packetId: packet.id,
    'span.label': packet.id + (Predicate.hasProperty(packet, 'reqId') && packet.reqId !== undefined ? ` for ${packet.reqId}` : ''),
    ...(packet._tag !== 'DirectChannelResponseSuccess' && packet._tag !== 'ProxyChannelPayload' ? { packet } : {}),
});
export const ListenForChannelResult = Schema.Struct({
    channelName: Schema.String,
    source: Schema.String,
    mode: Schema.Union(Schema.Literal('proxy'), Schema.Literal('direct')),
});
//# sourceMappingURL=common.js.map